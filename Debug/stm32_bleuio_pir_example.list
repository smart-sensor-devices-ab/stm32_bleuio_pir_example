
stm32_bleuio_pir_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1e0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800d480  0800d480  0001d480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d6a0  0800d6a0  0001d6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d6a8  0800d6a8  0001d6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d6ac  0800d6ac  0001d6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  24000000  0800d6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000094  0800d744  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000f4  0800d7a4  000200f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed4  24000154  0800d804  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001028  0800d804  00021028  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003678c  00000000  00000000  00020182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051a9  00000000  00000000  0005690e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  0005bab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001738  00000000  00000000  0005d378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b687  00000000  00000000  0005eab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020881  00000000  00000000  0009a137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016d66f  00000000  00000000  000ba9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00228027  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d64  00000000  00000000  0022807c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d468 	.word	0x0800d468

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	0800d468 	.word	0x0800d468

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fed2 	bl	8001434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f8ce 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 fa0c 	bl	8000ab0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000698:	f000 f94a 	bl	8000930 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800069c:	f000 f9bc 	bl	8000a18 <MX_USART3_UART_Init>
  MX_USB_HOST_Init();
 80006a0:	f00b fed8 	bl	800c454 <MX_USB_HOST_Init>
  MX_TIM16_Init();
 80006a4:	f000 f990 	bl	80009c8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  isBleuIOReady = false;
 80006a8:	4b4d      	ldr	r3, [pc, #308]	; (80007e0 <main+0x158>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
  isAdvertising= false;
 80006ae:	4b4d      	ldr	r3, [pc, #308]	; (80007e4 <main+0x15c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
  isAdvNameSet= false;
 80006b4:	4b4c      	ldr	r3, [pc, #304]	; (80007e8 <main+0x160>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
  pirIRQEnabled = true;
 80006ba:	4b4c      	ldr	r3, [pc, #304]	; (80007ec <main+0x164>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
  pirAdvTimer = 0;
 80006c0:	4b4b      	ldr	r3, [pc, #300]	; (80007f0 <main+0x168>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
  pirActivationTimeout = 0;
 80006c6:	4b4b      	ldr	r3, [pc, #300]	; (80007f4 <main+0x16c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
  uartStatus = UART_RX_NONE;
 80006cc:	4b4a      	ldr	r3, [pc, #296]	; (80007f8 <main+0x170>)
 80006ce:	22ff      	movs	r2, #255	; 0xff
 80006d0:	701a      	strb	r2, [r3, #0]

  // Starts uart recieve interrupt mode
  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, RXBUFFERSIZE);
 80006d2:	2201      	movs	r2, #1
 80006d4:	4949      	ldr	r1, [pc, #292]	; (80007fc <main+0x174>)
 80006d6:	484a      	ldr	r0, [pc, #296]	; (8000800 <main+0x178>)
 80006d8:	f007 f862 	bl	80077a0 <HAL_UART_Receive_IT>

  // Turns on all LEDs on start up
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2101      	movs	r1, #1
 80006e0:	4848      	ldr	r0, [pc, #288]	; (8000804 <main+0x17c>)
 80006e2:	f002 fbb5 	bl	8002e50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2102      	movs	r1, #2
 80006ea:	4847      	ldr	r0, [pc, #284]	; (8000808 <main+0x180>)
 80006ec:	f002 fbb0 	bl	8002e50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f6:	4843      	ldr	r0, [pc, #268]	; (8000804 <main+0x17c>)
 80006f8:	f002 fbaa 	bl	8002e50 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80006fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000700:	f000 ff2a 	bl	8001558 <HAL_Delay>

  // Turns off all LEDs except Red
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2101      	movs	r1, #1
 8000708:	483e      	ldr	r0, [pc, #248]	; (8000804 <main+0x17c>)
 800070a:	f002 fba1 	bl	8002e50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2102      	movs	r1, #2
 8000712:	483d      	ldr	r0, [pc, #244]	; (8000808 <main+0x180>)
 8000714:	f002 fb9c 	bl	8002e50 <HAL_GPIO_WritePin>

  // Sends welcome message to uart
  uart_buf_len = sprintf(uart_tx_buf, "\r\nWelcome to STM32 BleuIO PIR Sensor Example!\r\n\r\n\r\nWaiting for BleuIO...");
 8000718:	493c      	ldr	r1, [pc, #240]	; (800080c <main+0x184>)
 800071a:	483d      	ldr	r0, [pc, #244]	; (8000810 <main+0x188>)
 800071c:	f00c fb28 	bl	800cd70 <siprintf>
 8000720:	4603      	mov	r3, r0
 8000722:	4a3c      	ldr	r2, [pc, #240]	; (8000814 <main+0x18c>)
 8000724:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000726:	4b3b      	ldr	r3, [pc, #236]	; (8000814 <main+0x18c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	b29a      	uxth	r2, r3
 800072c:	f04f 33ff 	mov.w	r3, #4294967295
 8000730:	4937      	ldr	r1, [pc, #220]	; (8000810 <main+0x188>)
 8000732:	4833      	ldr	r0, [pc, #204]	; (8000800 <main+0x178>)
 8000734:	f006 ff9e 	bl	8007674 <HAL_UART_Transmit>
  HAL_TIM_Base_Start_IT(&htim16);
 8000738:	4837      	ldr	r0, [pc, #220]	; (8000818 <main+0x190>)
 800073a:	f006 fcdb 	bl	80070f4 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800073e:	f00b feaf 	bl	800c4a0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    // Simple handler for uart input
    handleUartInput(uartStatus);
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <main+0x170>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fb64 	bl	8000e14 <handleUartInput>
//    // Inteprets the dongle data
    dongle_interpreter(dongle_response);
 800074c:	4833      	ldr	r0, [pc, #204]	; (800081c <main+0x194>)
 800074e:	f000 fb8d 	bl	8000e6c <dongle_interpreter>

// 	Setting Advertising name
    if(isBleuIOReady && !isAdvNameSet)
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <main+0x158>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d01f      	beq.n	800079a <main+0x112>
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <main+0x160>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	f083 0301 	eor.w	r3, r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d018      	beq.n	800079a <main+0x112>
    {
    	// Setting name in response data to 'BleuIO PIR Detected'
    	writeToDongle((uint8_t*)DONGLE_CMD_SET_ADV_NAME);
 8000768:	482d      	ldr	r0, [pc, #180]	; (8000820 <main+0x198>)
 800076a:	f00b fe5f 	bl	800c42c <writeToDongle>
    	HAL_Delay(200);
 800076e:	20c8      	movs	r0, #200	; 0xc8
 8000770:	f000 fef2 	bl	8001558 <HAL_Delay>
    	isAdvNameSet = true;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <main+0x160>)
 8000776:	2201      	movs	r2, #1
 8000778:	701a      	strb	r2, [r3, #0]
		uart_buf_len = sprintf(uart_tx_buf, "\r\n\r\nDevice name set.\r\nBleuIO will now advertise if PIR detect movement!\r\n\r\n\r\n");
 800077a:	492a      	ldr	r1, [pc, #168]	; (8000824 <main+0x19c>)
 800077c:	4824      	ldr	r0, [pc, #144]	; (8000810 <main+0x188>)
 800077e:	f00c faf7 	bl	800cd70 <siprintf>
 8000782:	4603      	mov	r3, r0
 8000784:	4a23      	ldr	r2, [pc, #140]	; (8000814 <main+0x18c>)
 8000786:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <main+0x18c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	b29a      	uxth	r2, r3
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	491f      	ldr	r1, [pc, #124]	; (8000810 <main+0x188>)
 8000794:	481a      	ldr	r0, [pc, #104]	; (8000800 <main+0x178>)
 8000796:	f006 ff6d 	bl	8007674 <HAL_UART_Transmit>
    }

//     Stops advertising if advertising and pirAdvTimer has run out.
    if(isAdvertising && pirAdvTimer < 0)
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <main+0x15c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0cd      	beq.n	800073e <main+0xb6>
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <main+0x168>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	dac9      	bge.n	800073e <main+0xb6>
    {
    	writeToDongle((uint8_t*)DONGLE_CMD_AT_ADVSTOP);
 80007aa:	481f      	ldr	r0, [pc, #124]	; (8000828 <main+0x1a0>)
 80007ac:	f00b fe3e 	bl	800c42c <writeToDongle>
    	HAL_Delay(200);
 80007b0:	20c8      	movs	r0, #200	; 0xc8
 80007b2:	f000 fed1 	bl	8001558 <HAL_Delay>
    	isAdvertising = false;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <main+0x15c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
		uart_buf_len = sprintf(uart_tx_buf, "\r\nNo movement registered for %i seconds. Turning advertising off...\r\n\r\n\r\n", ADV_TIMER_REFRESH - PIR_TIMEOUT_REFRESH);
 80007bc:	2205      	movs	r2, #5
 80007be:	491b      	ldr	r1, [pc, #108]	; (800082c <main+0x1a4>)
 80007c0:	4813      	ldr	r0, [pc, #76]	; (8000810 <main+0x188>)
 80007c2:	f00c fad5 	bl	800cd70 <siprintf>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <main+0x18c>)
 80007ca:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <main+0x18c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	490e      	ldr	r1, [pc, #56]	; (8000810 <main+0x188>)
 80007d8:	4809      	ldr	r0, [pc, #36]	; (8000800 <main+0x178>)
 80007da:	f006 ff4b 	bl	8007674 <HAL_UART_Transmit>
    MX_USB_HOST_Process();
 80007de:	e7ae      	b.n	800073e <main+0xb6>
 80007e0:	24000420 	.word	0x24000420
 80007e4:	24000428 	.word	0x24000428
 80007e8:	24000418 	.word	0x24000418
 80007ec:	24000384 	.word	0x24000384
 80007f0:	24000534 	.word	0x24000534
 80007f4:	24000424 	.word	0x24000424
 80007f8:	2400026a 	.word	0x2400026a
 80007fc:	2400026c 	.word	0x2400026c
 8000800:	24000388 	.word	0x24000388
 8000804:	58020400 	.word	0x58020400
 8000808:	58021000 	.word	0x58021000
 800080c:	0800d480 	.word	0x0800d480
 8000810:	24000170 	.word	0x24000170
 8000814:	2400041c 	.word	0x2400041c
 8000818:	240004e8 	.word	0x240004e8
 800081c:	24000290 	.word	0x24000290
 8000820:	0800d4cc 	.word	0x0800d4cc
 8000824:	0800d518 	.word	0x0800d518
 8000828:	0800d568 	.word	0x0800d568
 800082c:	0800d578 	.word	0x0800d578

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09c      	sub	sp, #112	; 0x70
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	224c      	movs	r2, #76	; 0x4c
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f00c f9d4 	bl	800cbec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2220      	movs	r2, #32
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f00c f9ce 	bl	800cbec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000850:	2002      	movs	r0, #2
 8000852:	f004 f8af 	bl	80049b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b33      	ldr	r3, [pc, #204]	; (8000928 <SystemClock_Config+0xf8>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	4a32      	ldr	r2, [pc, #200]	; (8000928 <SystemClock_Config+0xf8>)
 8000860:	f023 0301 	bic.w	r3, r3, #1
 8000864:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000866:	4b30      	ldr	r3, [pc, #192]	; (8000928 <SystemClock_Config+0xf8>)
 8000868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	4b2e      	ldr	r3, [pc, #184]	; (800092c <SystemClock_Config+0xfc>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000878:	4a2c      	ldr	r2, [pc, #176]	; (800092c <SystemClock_Config+0xfc>)
 800087a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b2a      	ldr	r3, [pc, #168]	; (800092c <SystemClock_Config+0xfc>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800088c:	bf00      	nop
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <SystemClock_Config+0xfc>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800089a:	d1f8      	bne.n	800088e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800089c:	2303      	movs	r3, #3
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008aa:	2340      	movs	r3, #64	; 0x40
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	2302      	movs	r3, #2
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008ba:	2318      	movs	r3, #24
 80008bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c2:	2304      	movs	r3, #4
 80008c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ca:	230c      	movs	r3, #12
 80008cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 f8b4 	bl	8004a48 <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008e6:	f000 fad1 	bl	8000e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	233f      	movs	r3, #63	; 0x3f
 80008ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2101      	movs	r1, #1
 800090e:	4618      	mov	r0, r3
 8000910:	f004 fcaa 	bl	8005268 <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800091a:	f000 fab7 	bl	8000e8c <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3770      	adds	r7, #112	; 0x70
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	58000400 	.word	0x58000400
 800092c:	58024800 	.word	0x58024800

08000930 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <MX_ETH_Init+0x80>)
 8000936:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <MX_ETH_Init+0x84>)
 8000938:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_ETH_Init+0x88>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_ETH_Init+0x88>)
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_ETH_Init+0x88>)
 8000948:	22e1      	movs	r2, #225	; 0xe1
 800094a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_ETH_Init+0x88>)
 800094e:	2200      	movs	r2, #0
 8000950:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_ETH_Init+0x88>)
 8000954:	2200      	movs	r2, #0
 8000956:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_ETH_Init+0x88>)
 800095a:	2200      	movs	r2, #0
 800095c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_ETH_Init+0x80>)
 8000960:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <MX_ETH_Init+0x88>)
 8000962:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_ETH_Init+0x80>)
 8000966:	2201      	movs	r2, #1
 8000968:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_ETH_Init+0x80>)
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <MX_ETH_Init+0x8c>)
 800096e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_ETH_Init+0x80>)
 8000972:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <MX_ETH_Init+0x90>)
 8000974:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_ETH_Init+0x80>)
 8000978:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800097c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_ETH_Init+0x80>)
 8000980:	f001 fca0 	bl	80022c4 <HAL_ETH_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800098a:	f000 fa7f 	bl	8000e8c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800098e:	2234      	movs	r2, #52	; 0x34
 8000990:	2100      	movs	r1, #0
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_ETH_Init+0x94>)
 8000994:	f00c f92a 	bl	800cbec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MX_ETH_Init+0x94>)
 800099a:	2221      	movs	r2, #33	; 0x21
 800099c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_ETH_Init+0x94>)
 80009a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009a4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <MX_ETH_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2400042c 	.word	0x2400042c
 80009b4:	40028000 	.word	0x40028000
 80009b8:	24000274 	.word	0x24000274
 80009bc:	240000f4 	.word	0x240000f4
 80009c0:	24000094 	.word	0x24000094
 80009c4:	240004b4 	.word	0x240004b4

080009c8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009ce:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <MX_TIM16_Init+0x4c>)
 80009d0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6400 -1;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009d4:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80009d8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 -1;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80009e6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_TIM16_Init+0x48>)
 80009fc:	f006 fb22 	bl	8007044 <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000a06:	f000 fa41 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	240004e8 	.word	0x240004e8
 8000a14:	40014400 	.word	0x40014400

08000a18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <MX_USART3_UART_Init+0x94>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a62:	f006 fdb7 	bl	80075d4 <HAL_UART_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a6c:	f000 fa0e 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a74:	f008 fcd5 	bl	8009422 <HAL_UARTEx_SetTxFifoThreshold>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7e:	f000 fa05 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a82:	2100      	movs	r1, #0
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a86:	f008 fd0a 	bl	800949e <HAL_UARTEx_SetRxFifoThreshold>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a90:	f000 f9fc 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a96:	f008 fc8b 	bl	80093b0 <HAL_UARTEx_DisableFifoMode>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa0:	f000 f9f4 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	24000388 	.word	0x24000388
 8000aac:	40004800 	.word	0x40004800

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	; 0x30
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b6b      	ldr	r3, [pc, #428]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a69      	ldr	r2, [pc, #420]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b67      	ldr	r3, [pc, #412]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae4:	4b63      	ldr	r3, [pc, #396]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a62      	ldr	r2, [pc, #392]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b5f      	ldr	r3, [pc, #380]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b5c      	ldr	r3, [pc, #368]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a5a      	ldr	r2, [pc, #360]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b58      	ldr	r3, [pc, #352]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b20:	4b54      	ldr	r3, [pc, #336]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a53      	ldr	r2, [pc, #332]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b50      	ldr	r3, [pc, #320]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	4a4b      	ldr	r2, [pc, #300]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b46:	f043 0308 	orr.w	r3, r3, #8
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4e:	4b49      	ldr	r3, [pc, #292]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5c:	4b45      	ldr	r3, [pc, #276]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	4a44      	ldr	r2, [pc, #272]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6c:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	4a3c      	ldr	r2, [pc, #240]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8a:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <MX_GPIO_Init+0x1c4>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	f003 0310 	and.w	r3, r3, #16
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b9e:	4836      	ldr	r0, [pc, #216]	; (8000c78 <MX_GPIO_Init+0x1c8>)
 8000ba0:	f002 f956 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000baa:	4834      	ldr	r0, [pc, #208]	; (8000c7c <MX_GPIO_Init+0x1cc>)
 8000bac:	f002 f950 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	4832      	ldr	r0, [pc, #200]	; (8000c80 <MX_GPIO_Init+0x1d0>)
 8000bb6:	f002 f94b 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	482d      	ldr	r0, [pc, #180]	; (8000c84 <MX_GPIO_Init+0x1d4>)
 8000bd0:	f001 ff8e 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_IRQ_SIGNAL_Pin */
  GPIO_InitStruct.Pin = PIR_IRQ_SIGNAL_Pin;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd8:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PIR_IRQ_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	4829      	ldr	r0, [pc, #164]	; (8000c8c <MX_GPIO_Init+0x1dc>)
 8000be8:	f001 ff82 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bec:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	481c      	ldr	r0, [pc, #112]	; (8000c78 <MX_GPIO_Init+0x1c8>)
 8000c06:	f001 ff73 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4816      	ldr	r0, [pc, #88]	; (8000c7c <MX_GPIO_Init+0x1cc>)
 8000c24:	f001 ff64 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4815      	ldr	r0, [pc, #84]	; (8000c90 <MX_GPIO_Init+0x1e0>)
 8000c3c:	f001 ff58 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	480a      	ldr	r0, [pc, #40]	; (8000c80 <MX_GPIO_Init+0x1d0>)
 8000c58:	f001 ff4a 	bl	8002af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2006      	movs	r0, #6
 8000c62:	f000 fd98 	bl	8001796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c66:	2006      	movs	r0, #6
 8000c68:	f000 fdaf 	bl	80017ca <HAL_NVIC_EnableIRQ>

}
 8000c6c:	bf00      	nop
 8000c6e:	3730      	adds	r7, #48	; 0x30
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58020400 	.word	0x58020400
 8000c7c:	58020c00 	.word	0x58020c00
 8000c80:	58021000 	.word	0x58021000
 8000c84:	58020800 	.word	0x58020800
 8000c88:	11110000 	.word	0x11110000
 8000c8c:	58020000 	.word	0x58020000
 8000c90:	58021800 	.word	0x58021800

08000c94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	if(UartHandle == &huart3)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_UART_RxCpltCallback+0x68>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d127      	bne.n	8000cf4 <HAL_UART_RxCpltCallback+0x60>
	{
		RX_value = (int)aRxBuffer[0];
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_UART_RxCpltCallback+0x6c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_UART_RxCpltCallback+0x70>)
 8000cac:	601a      	str	r2, [r3, #0]
		uartStatus = UART_RX_NONE;
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_UART_RxCpltCallback+0x74>)
 8000cb0:	22ff      	movs	r2, #255	; 0xff
 8000cb2:	701a      	strb	r2, [r3, #0]

		switch(RX_value)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <HAL_UART_RxCpltCallback+0x70>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b32      	cmp	r3, #50	; 0x32
 8000cba:	d00e      	beq.n	8000cda <HAL_UART_RxCpltCallback+0x46>
 8000cbc:	2b32      	cmp	r3, #50	; 0x32
 8000cbe:	dc10      	bgt.n	8000ce2 <HAL_UART_RxCpltCallback+0x4e>
 8000cc0:	2b30      	cmp	r3, #48	; 0x30
 8000cc2:	d002      	beq.n	8000cca <HAL_UART_RxCpltCallback+0x36>
 8000cc4:	2b31      	cmp	r3, #49	; 0x31
 8000cc6:	d004      	beq.n	8000cd2 <HAL_UART_RxCpltCallback+0x3e>
 8000cc8:	e00b      	b.n	8000ce2 <HAL_UART_RxCpltCallback+0x4e>
		{
			case UART_RX_0:
			{
				uartStatus = UART_RX_0;
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_UART_RxCpltCallback+0x74>)
 8000ccc:	2230      	movs	r2, #48	; 0x30
 8000cce:	701a      	strb	r2, [r3, #0]
				break;
 8000cd0:	e00b      	b.n	8000cea <HAL_UART_RxCpltCallback+0x56>
			}
			case UART_RX_1:
			{
				uartStatus = UART_RX_1;
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_UART_RxCpltCallback+0x74>)
 8000cd4:	2231      	movs	r2, #49	; 0x31
 8000cd6:	701a      	strb	r2, [r3, #0]
				break;
 8000cd8:	e007      	b.n	8000cea <HAL_UART_RxCpltCallback+0x56>
			}
			case UART_RX_2:
			{
				uartStatus = UART_RX_2;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_UART_RxCpltCallback+0x74>)
 8000cdc:	2232      	movs	r2, #50	; 0x32
 8000cde:	701a      	strb	r2, [r3, #0]
				break;
 8000ce0:	e003      	b.n	8000cea <HAL_UART_RxCpltCallback+0x56>
			}
			default:
			{
				uartStatus = UART_RX_NONE;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_UART_RxCpltCallback+0x74>)
 8000ce4:	22ff      	movs	r2, #255	; 0xff
 8000ce6:	701a      	strb	r2, [r3, #0]
				break;
 8000ce8:	bf00      	nop
			}
		}
		// Resets uart recieve interrupt mode
		HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, RXBUFFERSIZE);
 8000cea:	2201      	movs	r2, #1
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <HAL_UART_RxCpltCallback+0x6c>)
 8000cee:	4803      	ldr	r0, [pc, #12]	; (8000cfc <HAL_UART_RxCpltCallback+0x68>)
 8000cf0:	f006 fd56 	bl	80077a0 <HAL_UART_Receive_IT>
	}
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	24000388 	.word	0x24000388
 8000d00:	2400026c 	.word	0x2400026c
 8000d04:	24000270 	.word	0x24000270
 8000d08:	2400026a 	.word	0x2400026a

08000d0c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
	// If The INT Source Is  and both isBleuIOReady and isAdvNameSet is true continue
	// Here we check if the source of the interrupt is our PIR sensor (EXTI0 (A0 Pin)), we also make sure that the dongle is ready
    if((GPIO_Pin == PIR_IRQ_SIGNAL_Pin) && isBleuIOReady && isAdvNameSet)
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d13d      	bne.n	8000d98 <HAL_GPIO_EXTI_Callback+0x8c>
 8000d1c:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x94>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d039      	beq.n	8000d98 <HAL_GPIO_EXTI_Callback+0x8c>
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x98>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d035      	beq.n	8000d98 <HAL_GPIO_EXTI_Callback+0x8c>
    {
    	// To ensure the PIR sensor doesn't trigger constantly we put a timeout period before it can trigger again.
    	if(pirActivationTimeout < 0)
 8000d2c:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	da31      	bge.n	8000d98 <HAL_GPIO_EXTI_Callback+0x8c>
    	{
			pirActivationTimeout = PIR_TIMEOUT_REFRESH;
 8000d34:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000d36:	2214      	movs	r2, #20
 8000d38:	601a      	str	r2, [r3, #0]

			pirAdvTimer = ADV_TIMER_REFRESH;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_GPIO_EXTI_Callback+0xa0>)
 8000d3c:	2219      	movs	r2, #25
 8000d3e:	601a      	str	r2, [r3, #0]

			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1); // Toggle The YELLOW LED
 8000d40:	2102      	movs	r1, #2
 8000d42:	481b      	ldr	r0, [pc, #108]	; (8000db0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000d44:	f002 f89d 	bl	8002e82 <HAL_GPIO_TogglePin>
			pirIRQEnabled = false;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
			uart_buf_len = sprintf(uart_tx_buf, "\r\nMovement registered! %s\r\n\r\n\r\n", isAdvertising ? "" : "Turning on advertising...");
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_GPIO_EXTI_Callback+0x4e>
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_GPIO_EXTI_Callback+0xb0>)
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_EXTI_Callback+0x50>
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4919      	ldr	r1, [pc, #100]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000d60:	4819      	ldr	r0, [pc, #100]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000d62:	f00c f805 	bl	800cd70 <siprintf>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <HAL_GPIO_EXTI_Callback+0xc0>)
 8000d6a:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_GPIO_EXTI_Callback+0xc0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	4914      	ldr	r1, [pc, #80]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000d78:	4815      	ldr	r0, [pc, #84]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000d7a:	f006 fc7b 	bl	8007674 <HAL_UART_Transmit>
			if(!isAdvertising)
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	f083 0301 	eor.w	r3, r3, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d005      	beq.n	8000d98 <HAL_GPIO_EXTI_Callback+0x8c>
			{
				writeToDongle((uint8_t*)DONGLE_CMD_AT_ADVSTART);
 8000d8c:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000d8e:	f00b fb4d 	bl	800c42c <writeToDongle>
				isAdvertising = true;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
			}
    	}
    }
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	24000420 	.word	0x24000420
 8000da4:	24000418 	.word	0x24000418
 8000da8:	24000424 	.word	0x24000424
 8000dac:	24000534 	.word	0x24000534
 8000db0:	58021000 	.word	0x58021000
 8000db4:	24000384 	.word	0x24000384
 8000db8:	24000428 	.word	0x24000428
 8000dbc:	0800d5c4 	.word	0x0800d5c4
 8000dc0:	0800d5c8 	.word	0x0800d5c8
 8000dc4:	0800d5e4 	.word	0x0800d5e4
 8000dc8:	24000170 	.word	0x24000170
 8000dcc:	2400041c 	.word	0x2400041c
 8000dd0:	24000388 	.word	0x24000388
 8000dd4:	0800d604 	.word	0x0800d604

08000dd8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

	if(htim == &htim16)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d109      	bne.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		pirAdvTimer--;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000df0:	6013      	str	r3, [r2, #0]
		pirActivationTimeout--;
 8000df2:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000dfa:	6013      	str	r3, [r2, #0]
	}
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	240004e8 	.word	0x240004e8
 8000e0c:	24000534 	.word	0x24000534
 8000e10:	24000424 	.word	0x24000424

08000e14 <handleUartInput>:
/**
  * @brief Simple uart input handler
  * @retval None
  */
void handleUartInput(UARTCommandTypeDef cmd)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
	switch(cmd)
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2bff      	cmp	r3, #255	; 0xff
 8000e22:	d01a      	beq.n	8000e5a <handleUartInput+0x46>
 8000e24:	2bff      	cmp	r3, #255	; 0xff
 8000e26:	dc14      	bgt.n	8000e52 <handleUartInput+0x3e>
 8000e28:	2b32      	cmp	r3, #50	; 0x32
 8000e2a:	d00e      	beq.n	8000e4a <handleUartInput+0x36>
 8000e2c:	2b32      	cmp	r3, #50	; 0x32
 8000e2e:	dc10      	bgt.n	8000e52 <handleUartInput+0x3e>
 8000e30:	2b30      	cmp	r3, #48	; 0x30
 8000e32:	d002      	beq.n	8000e3a <handleUartInput+0x26>
 8000e34:	2b31      	cmp	r3, #49	; 0x31
 8000e36:	d004      	beq.n	8000e42 <handleUartInput+0x2e>
 8000e38:	e00b      	b.n	8000e52 <handleUartInput+0x3e>
//			{
//				uart_buf_len = sprintf(uart_tx_buf, BLEUIO_NOT_READY_MSG);
//				HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
//			}

			uartStatus = UART_RX_NONE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <handleUartInput+0x54>)
 8000e3c:	22ff      	movs	r2, #255	; 0xff
 8000e3e:	701a      	strb	r2, [r3, #0]
			break;
 8000e40:	e00c      	b.n	8000e5c <handleUartInput+0x48>
		}
		case UART_RX_1:
		{
			// 1

			uartStatus = UART_RX_NONE;
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <handleUartInput+0x54>)
 8000e44:	22ff      	movs	r2, #255	; 0xff
 8000e46:	701a      	strb	r2, [r3, #0]
			break;
 8000e48:	e008      	b.n	8000e5c <handleUartInput+0x48>
		case UART_RX_2:
		{
			// 2


			uartStatus = UART_RX_NONE;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <handleUartInput+0x54>)
 8000e4c:	22ff      	movs	r2, #255	; 0xff
 8000e4e:	701a      	strb	r2, [r3, #0]
			break;
 8000e50:	e004      	b.n	8000e5c <handleUartInput+0x48>
		{
			break;
		}
		default:
		{
			uartStatus = UART_RX_NONE;
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <handleUartInput+0x54>)
 8000e54:	22ff      	movs	r2, #255	; 0xff
 8000e56:	701a      	strb	r2, [r3, #0]
			break;
 8000e58:	e000      	b.n	8000e5c <handleUartInput+0x48>
			break;
 8000e5a:	bf00      	nop
		}
	}
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	2400026a 	.word	0x2400026a

08000e6c <dongle_interpreter>:
/**
  * @brief Simple dongle interpreter
  * @retval None
  */
void dongle_interpreter(uint8_t * input)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
//		if(strstr((char *)input, "\r\nADVERTISING STOPPED.") != NULL)
//		{
//			// Do something
//		}
//	}
	memset(&dongle_response, 0, RSP_SIZE);
 8000e74:	22f4      	movs	r2, #244	; 0xf4
 8000e76:	2100      	movs	r1, #0
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <dongle_interpreter+0x1c>)
 8000e7a:	f00b feb7 	bl	800cbec <memset>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	24000290 	.word	0x24000290

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <Error_Handler+0x8>
	...

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_MspInit+0x30>)
 8000ea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea4:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_MspInit+0x30>)
 8000ea6:	f043 0302 	orr.w	r3, r3, #2
 8000eaa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_MspInit+0x30>)
 8000eb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	58024400 	.word	0x58024400

08000ecc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08e      	sub	sp, #56	; 0x38
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a59      	ldr	r2, [pc, #356]	; (8001050 <HAL_ETH_MspInit+0x184>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	f040 80ab 	bne.w	8001046 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ef0:	4b58      	ldr	r3, [pc, #352]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000ef2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ef6:	4a57      	ldr	r2, [pc, #348]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000efc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f00:	4b54      	ldr	r3, [pc, #336]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f0a:	623b      	str	r3, [r7, #32]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f0e:	4b51      	ldr	r3, [pc, #324]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f14:	4a4f      	ldr	r2, [pc, #316]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f1e:	4b4d      	ldr	r3, [pc, #308]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f2c:	4b49      	ldr	r3, [pc, #292]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f32:	4a48      	ldr	r2, [pc, #288]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f3c:	4b45      	ldr	r3, [pc, #276]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	61bb      	str	r3, [r7, #24]
 8000f48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	4b42      	ldr	r3, [pc, #264]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f50:	4a40      	ldr	r2, [pc, #256]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5a:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6e:	4a39      	ldr	r2, [pc, #228]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f78:	4b36      	ldr	r3, [pc, #216]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	4b33      	ldr	r3, [pc, #204]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8c:	4a31      	ldr	r2, [pc, #196]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f96:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fc2:	2332      	movs	r3, #50	; 0x32
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd2:	230b      	movs	r3, #11
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	481e      	ldr	r0, [pc, #120]	; (8001058 <HAL_ETH_MspInit+0x18c>)
 8000fde:	f001 fd87 	bl	8002af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000fe2:	2386      	movs	r3, #134	; 0x86
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff2:	230b      	movs	r3, #11
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4817      	ldr	r0, [pc, #92]	; (800105c <HAL_ETH_MspInit+0x190>)
 8000ffe:	f001 fd77 	bl	8002af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001014:	230b      	movs	r3, #11
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	4810      	ldr	r0, [pc, #64]	; (8001060 <HAL_ETH_MspInit+0x194>)
 8001020:	f001 fd66 	bl	8002af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001024:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001036:	230b      	movs	r3, #11
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	4808      	ldr	r0, [pc, #32]	; (8001064 <HAL_ETH_MspInit+0x198>)
 8001042:	f001 fd55 	bl	8002af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3738      	adds	r7, #56	; 0x38
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40028000 	.word	0x40028000
 8001054:	58024400 	.word	0x58024400
 8001058:	58020800 	.word	0x58020800
 800105c:	58020000 	.word	0x58020000
 8001060:	58020400 	.word	0x58020400
 8001064:	58021800 	.word	0x58021800

08001068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <HAL_TIM_Base_MspInit+0x48>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d116      	bne.n	80010a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_TIM_Base_MspInit+0x4c>)
 800107c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001080:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <HAL_TIM_Base_MspInit+0x4c>)
 8001082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001086:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_TIM_Base_MspInit+0x4c>)
 800108c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2075      	movs	r0, #117	; 0x75
 800109e:	f000 fb7a 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80010a2:	2075      	movs	r0, #117	; 0x75
 80010a4:	f000 fb91 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40014400 	.word	0x40014400
 80010b4:	58024400 	.word	0x58024400

080010b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0b8      	sub	sp, #224	; 0xe0
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	22bc      	movs	r2, #188	; 0xbc
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f00b fd87 	bl	800cbec <memset>
  if(huart->Instance==USART3)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a29      	ldr	r2, [pc, #164]	; (8001188 <HAL_UART_MspInit+0xd0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d14a      	bne.n	800117e <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010e8:	2302      	movs	r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 fc42 	bl	8005980 <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001102:	f7ff fec3 	bl	8000e8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <HAL_UART_MspInit+0xd4>)
 8001108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800110c:	4a1f      	ldr	r2, [pc, #124]	; (800118c <HAL_UART_MspInit+0xd4>)
 800110e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001112:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_UART_MspInit+0xd4>)
 8001118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800111c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_UART_MspInit+0xd4>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112a:	4a18      	ldr	r2, [pc, #96]	; (800118c <HAL_UART_MspInit+0xd4>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_UART_MspInit+0xd4>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001142:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001146:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800115c:	2307      	movs	r3, #7
 800115e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001162:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001166:	4619      	mov	r1, r3
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <HAL_UART_MspInit+0xd8>)
 800116a:	f001 fcc1 	bl	8002af0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2027      	movs	r0, #39	; 0x27
 8001174:	f000 fb0f 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001178:	2027      	movs	r0, #39	; 0x27
 800117a:	f000 fb26 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	37e0      	adds	r7, #224	; 0xe0
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40004800 	.word	0x40004800
 800118c:	58024400 	.word	0x58024400
 8001190:	58020c00 	.word	0x58020c00

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e0:	f000 f99a 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f001 fe62 	bl	8002eb6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <USART3_IRQHandler+0x10>)
 80011fe:	f006 fb15 	bl	800782c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	24000388 	.word	0x24000388

0800120c <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8001212:	f002 f8d5 	bl	80033c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	24000d14 	.word	0x24000d14

08001220 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8001226:	f002 f8cb 	bl	80033c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	24000d14 	.word	0x24000d14

08001234 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <OTG_FS_IRQHandler+0x10>)
 800123a:	f002 f8c1 	bl	80033c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	24000d14 	.word	0x24000d14

08001248 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <TIM16_IRQHandler+0x10>)
 800124e:	f005 ffc1 	bl	80071d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	240004e8 	.word	0x240004e8

0800125c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001264:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <_sbrk+0x5c>)
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <_sbrk+0x60>)
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <_sbrk+0x64>)
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <_sbrk+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800128c:	f00b fc74 	bl	800cb78 <__errno>
 8001290:	4603      	mov	r3, r0
 8001292:	220c      	movs	r2, #12
 8001294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	e009      	b.n	80012b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <_sbrk+0x64>)
 80012ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	24080000 	.word	0x24080000
 80012bc:	00000400 	.word	0x00000400
 80012c0:	2400027c 	.word	0x2400027c
 80012c4:	24001028 	.word	0x24001028

080012c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012cc:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <SystemInit+0xec>)
 80012ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d2:	4a38      	ldr	r2, [pc, #224]	; (80013b4 <SystemInit+0xec>)
 80012d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012dc:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <SystemInit+0xf0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	2b06      	cmp	r3, #6
 80012e6:	d807      	bhi.n	80012f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012e8:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <SystemInit+0xf0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 030f 	bic.w	r3, r3, #15
 80012f0:	4a31      	ldr	r2, [pc, #196]	; (80013b8 <SystemInit+0xf0>)
 80012f2:	f043 0307 	orr.w	r3, r3, #7
 80012f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012f8:	4b30      	ldr	r3, [pc, #192]	; (80013bc <SystemInit+0xf4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a2f      	ldr	r2, [pc, #188]	; (80013bc <SystemInit+0xf4>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001304:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <SystemInit+0xf4>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <SystemInit+0xf4>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	492b      	ldr	r1, [pc, #172]	; (80013bc <SystemInit+0xf4>)
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <SystemInit+0xf8>)
 8001312:	4013      	ands	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <SystemInit+0xf0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <SystemInit+0xf0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 030f 	bic.w	r3, r3, #15
 800132a:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <SystemInit+0xf0>)
 800132c:	f043 0307 	orr.w	r3, r3, #7
 8001330:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <SystemInit+0xf4>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <SystemInit+0xf4>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <SystemInit+0xf4>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <SystemInit+0xf4>)
 8001346:	4a1f      	ldr	r2, [pc, #124]	; (80013c4 <SystemInit+0xfc>)
 8001348:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <SystemInit+0xf4>)
 800134c:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <SystemInit+0x100>)
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <SystemInit+0xf4>)
 8001352:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <SystemInit+0x104>)
 8001354:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <SystemInit+0xf4>)
 8001358:	2200      	movs	r2, #0
 800135a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <SystemInit+0xf4>)
 800135e:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <SystemInit+0x104>)
 8001360:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <SystemInit+0xf4>)
 8001364:	2200      	movs	r2, #0
 8001366:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <SystemInit+0xf4>)
 800136a:	4a18      	ldr	r2, [pc, #96]	; (80013cc <SystemInit+0x104>)
 800136c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <SystemInit+0xf4>)
 8001370:	2200      	movs	r2, #0
 8001372:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <SystemInit+0xf4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a10      	ldr	r2, [pc, #64]	; (80013bc <SystemInit+0xf4>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <SystemInit+0xf4>)
 8001382:	2200      	movs	r2, #0
 8001384:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <SystemInit+0x108>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <SystemInit+0x10c>)
 800138c:	4013      	ands	r3, r2
 800138e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001392:	d202      	bcs.n	800139a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <SystemInit+0x110>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <SystemInit+0x114>)
 800139c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013a0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <SystemInit+0xec>)
 80013a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00
 80013b8:	52002000 	.word	0x52002000
 80013bc:	58024400 	.word	0x58024400
 80013c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80013c4:	02020200 	.word	0x02020200
 80013c8:	01ff0000 	.word	0x01ff0000
 80013cc:	01010280 	.word	0x01010280
 80013d0:	5c001000 	.word	0x5c001000
 80013d4:	ffff0000 	.word	0xffff0000
 80013d8:	51008108 	.word	0x51008108
 80013dc:	52004000 	.word	0x52004000

080013e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001418 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e4:	f7ff ff70 	bl	80012c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	; (8001420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	; (800142c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f00b fbb9 	bl	800cb84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001412:	f7ff f939 	bl	8000688 <main>
  bx  lr
 8001416:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001418:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800141c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001420:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8001424:	0800d6b0 	.word	0x0800d6b0
  ldr r2, =_sbss
 8001428:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 800142c:	24001028 	.word	0x24001028

08001430 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC3_IRQHandler>
	...

08001434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143a:	2003      	movs	r0, #3
 800143c:	f000 f9a0 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001440:	f004 f8c8 	bl	80055d4 <HAL_RCC_GetSysClockFreq>
 8001444:	4602      	mov	r2, r0
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_Init+0x68>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	4913      	ldr	r1, [pc, #76]	; (80014a0 <HAL_Init+0x6c>)
 8001452:	5ccb      	ldrb	r3, [r1, r3]
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
 800145c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_Init+0x68>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_Init+0x6c>)
 8001468:	5cd3      	ldrb	r3, [r2, r3]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <HAL_Init+0x70>)
 8001476:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001478:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_Init+0x74>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f814 	bl	80014ac <HAL_InitTick>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e002      	b.n	8001494 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800148e:	f7ff fd03 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	58024400 	.word	0x58024400
 80014a0:	0800d634 	.word	0x0800d634
 80014a4:	24000004 	.word	0x24000004
 80014a8:	24000000 	.word	0x24000000

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_InitTick+0x60>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e021      	b.n	8001504 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_InitTick+0x64>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_InitTick+0x60>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f985 	bl	80017e6 <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 f94f 	bl	8001796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_InitTick+0x68>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2400000c 	.word	0x2400000c
 8001510:	24000000 	.word	0x24000000
 8001514:	24000008 	.word	0x24000008

08001518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2400000c 	.word	0x2400000c
 800153c:	24000538 	.word	0x24000538

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	24000538 	.word	0x24000538

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff ffee 	bl	8001540 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffde 	bl	8001540 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2400000c 	.word	0x2400000c

080015a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetREVID+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0c1b      	lsrs	r3, r3, #16
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	5c001000 	.word	0x5c001000

080015b8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015c8:	4904      	ldr	r1, [pc, #16]	; (80015dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	58000400 	.word	0x58000400

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <__NVIC_SetPriorityGrouping+0x40>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	4313      	orrs	r3, r2
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x40>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00
 8001624:	05fa0000 	.word	0x05fa0000

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff8e 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff29 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff40 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff90 	bl	80016d4 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5f 	bl	8001680 <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff33 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa4 	bl	800173c <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff fe9a 	bl	8001540 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e2dc      	b.n	8001dd2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d008      	beq.n	8001836 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e2cd      	b.n	8001dd2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a76      	ldr	r2, [pc, #472]	; (8001a14 <HAL_DMA_Abort+0x214>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d04a      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a74      	ldr	r2, [pc, #464]	; (8001a18 <HAL_DMA_Abort+0x218>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d045      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a73      	ldr	r2, [pc, #460]	; (8001a1c <HAL_DMA_Abort+0x21c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d040      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a71      	ldr	r2, [pc, #452]	; (8001a20 <HAL_DMA_Abort+0x220>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d03b      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a70      	ldr	r2, [pc, #448]	; (8001a24 <HAL_DMA_Abort+0x224>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d036      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a6e      	ldr	r2, [pc, #440]	; (8001a28 <HAL_DMA_Abort+0x228>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d031      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a6d      	ldr	r2, [pc, #436]	; (8001a2c <HAL_DMA_Abort+0x22c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d02c      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6b      	ldr	r2, [pc, #428]	; (8001a30 <HAL_DMA_Abort+0x230>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d027      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a6a      	ldr	r2, [pc, #424]	; (8001a34 <HAL_DMA_Abort+0x234>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d022      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a68      	ldr	r2, [pc, #416]	; (8001a38 <HAL_DMA_Abort+0x238>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01d      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a67      	ldr	r2, [pc, #412]	; (8001a3c <HAL_DMA_Abort+0x23c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d018      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a65      	ldr	r2, [pc, #404]	; (8001a40 <HAL_DMA_Abort+0x240>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a64      	ldr	r2, [pc, #400]	; (8001a44 <HAL_DMA_Abort+0x244>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00e      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a62      	ldr	r2, [pc, #392]	; (8001a48 <HAL_DMA_Abort+0x248>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d009      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a61      	ldr	r2, [pc, #388]	; (8001a4c <HAL_DMA_Abort+0x24c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d004      	beq.n	80018d6 <HAL_DMA_Abort+0xd6>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a5f      	ldr	r2, [pc, #380]	; (8001a50 <HAL_DMA_Abort+0x250>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d101      	bne.n	80018da <HAL_DMA_Abort+0xda>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_DMA_Abort+0xdc>
 80018da:	2300      	movs	r3, #0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 021e 	bic.w	r2, r2, #30
 80018ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e00a      	b.n	800191e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 020e 	bic.w	r2, r2, #14
 8001916:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a3c      	ldr	r2, [pc, #240]	; (8001a14 <HAL_DMA_Abort+0x214>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d072      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a3a      	ldr	r2, [pc, #232]	; (8001a18 <HAL_DMA_Abort+0x218>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d06d      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a39      	ldr	r2, [pc, #228]	; (8001a1c <HAL_DMA_Abort+0x21c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d068      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a37      	ldr	r2, [pc, #220]	; (8001a20 <HAL_DMA_Abort+0x220>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d063      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a36      	ldr	r2, [pc, #216]	; (8001a24 <HAL_DMA_Abort+0x224>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d05e      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a34      	ldr	r2, [pc, #208]	; (8001a28 <HAL_DMA_Abort+0x228>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d059      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a33      	ldr	r2, [pc, #204]	; (8001a2c <HAL_DMA_Abort+0x22c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d054      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a31      	ldr	r2, [pc, #196]	; (8001a30 <HAL_DMA_Abort+0x230>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d04f      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a30      	ldr	r2, [pc, #192]	; (8001a34 <HAL_DMA_Abort+0x234>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d04a      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a2e      	ldr	r2, [pc, #184]	; (8001a38 <HAL_DMA_Abort+0x238>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d045      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2d      	ldr	r2, [pc, #180]	; (8001a3c <HAL_DMA_Abort+0x23c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d040      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2b      	ldr	r2, [pc, #172]	; (8001a40 <HAL_DMA_Abort+0x240>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d03b      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a2a      	ldr	r2, [pc, #168]	; (8001a44 <HAL_DMA_Abort+0x244>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d036      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <HAL_DMA_Abort+0x248>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d031      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a27      	ldr	r2, [pc, #156]	; (8001a4c <HAL_DMA_Abort+0x24c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d02c      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <HAL_DMA_Abort+0x250>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d027      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a24      	ldr	r2, [pc, #144]	; (8001a54 <HAL_DMA_Abort+0x254>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d022      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <HAL_DMA_Abort+0x258>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01d      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a21      	ldr	r2, [pc, #132]	; (8001a5c <HAL_DMA_Abort+0x25c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d018      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <HAL_DMA_Abort+0x260>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <HAL_DMA_Abort+0x264>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d00e      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <HAL_DMA_Abort+0x268>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d009      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1b      	ldr	r2, [pc, #108]	; (8001a6c <HAL_DMA_Abort+0x26c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d004      	beq.n	8001a0e <HAL_DMA_Abort+0x20e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a19      	ldr	r2, [pc, #100]	; (8001a70 <HAL_DMA_Abort+0x270>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d132      	bne.n	8001a74 <HAL_DMA_Abort+0x274>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e031      	b.n	8001a76 <HAL_DMA_Abort+0x276>
 8001a12:	bf00      	nop
 8001a14:	40020010 	.word	0x40020010
 8001a18:	40020028 	.word	0x40020028
 8001a1c:	40020040 	.word	0x40020040
 8001a20:	40020058 	.word	0x40020058
 8001a24:	40020070 	.word	0x40020070
 8001a28:	40020088 	.word	0x40020088
 8001a2c:	400200a0 	.word	0x400200a0
 8001a30:	400200b8 	.word	0x400200b8
 8001a34:	40020410 	.word	0x40020410
 8001a38:	40020428 	.word	0x40020428
 8001a3c:	40020440 	.word	0x40020440
 8001a40:	40020458 	.word	0x40020458
 8001a44:	40020470 	.word	0x40020470
 8001a48:	40020488 	.word	0x40020488
 8001a4c:	400204a0 	.word	0x400204a0
 8001a50:	400204b8 	.word	0x400204b8
 8001a54:	58025408 	.word	0x58025408
 8001a58:	5802541c 	.word	0x5802541c
 8001a5c:	58025430 	.word	0x58025430
 8001a60:	58025444 	.word	0x58025444
 8001a64:	58025458 	.word	0x58025458
 8001a68:	5802546c 	.word	0x5802546c
 8001a6c:	58025480 	.word	0x58025480
 8001a70:	58025494 	.word	0x58025494
 8001a74:	2300      	movs	r3, #0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a88:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a6d      	ldr	r2, [pc, #436]	; (8001c44 <HAL_DMA_Abort+0x444>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d04a      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6b      	ldr	r2, [pc, #428]	; (8001c48 <HAL_DMA_Abort+0x448>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d045      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6a      	ldr	r2, [pc, #424]	; (8001c4c <HAL_DMA_Abort+0x44c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d040      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a68      	ldr	r2, [pc, #416]	; (8001c50 <HAL_DMA_Abort+0x450>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d03b      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a67      	ldr	r2, [pc, #412]	; (8001c54 <HAL_DMA_Abort+0x454>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d036      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a65      	ldr	r2, [pc, #404]	; (8001c58 <HAL_DMA_Abort+0x458>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d031      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a64      	ldr	r2, [pc, #400]	; (8001c5c <HAL_DMA_Abort+0x45c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d02c      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a62      	ldr	r2, [pc, #392]	; (8001c60 <HAL_DMA_Abort+0x460>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d027      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a61      	ldr	r2, [pc, #388]	; (8001c64 <HAL_DMA_Abort+0x464>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d022      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a5f      	ldr	r2, [pc, #380]	; (8001c68 <HAL_DMA_Abort+0x468>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d01d      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5e      	ldr	r2, [pc, #376]	; (8001c6c <HAL_DMA_Abort+0x46c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d018      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a5c      	ldr	r2, [pc, #368]	; (8001c70 <HAL_DMA_Abort+0x470>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a5b      	ldr	r2, [pc, #364]	; (8001c74 <HAL_DMA_Abort+0x474>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00e      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a59      	ldr	r2, [pc, #356]	; (8001c78 <HAL_DMA_Abort+0x478>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d009      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a58      	ldr	r2, [pc, #352]	; (8001c7c <HAL_DMA_Abort+0x47c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d004      	beq.n	8001b2a <HAL_DMA_Abort+0x32a>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a56      	ldr	r2, [pc, #344]	; (8001c80 <HAL_DMA_Abort+0x480>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d108      	bne.n	8001b3c <HAL_DMA_Abort+0x33c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0201 	bic.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e007      	b.n	8001b4c <HAL_DMA_Abort+0x34c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0201 	bic.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b4c:	e013      	b.n	8001b76 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b4e:	f7ff fcf7 	bl	8001540 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	d90c      	bls.n	8001b76 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e12d      	b.n	8001dd2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1e5      	bne.n	8001b4e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a2f      	ldr	r2, [pc, #188]	; (8001c44 <HAL_DMA_Abort+0x444>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d04a      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a2d      	ldr	r2, [pc, #180]	; (8001c48 <HAL_DMA_Abort+0x448>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d045      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a2c      	ldr	r2, [pc, #176]	; (8001c4c <HAL_DMA_Abort+0x44c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d040      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a2a      	ldr	r2, [pc, #168]	; (8001c50 <HAL_DMA_Abort+0x450>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d03b      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a29      	ldr	r2, [pc, #164]	; (8001c54 <HAL_DMA_Abort+0x454>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d036      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a27      	ldr	r2, [pc, #156]	; (8001c58 <HAL_DMA_Abort+0x458>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d031      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <HAL_DMA_Abort+0x45c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d02c      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <HAL_DMA_Abort+0x460>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d027      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a23      	ldr	r2, [pc, #140]	; (8001c64 <HAL_DMA_Abort+0x464>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d022      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a21      	ldr	r2, [pc, #132]	; (8001c68 <HAL_DMA_Abort+0x468>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01d      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a20      	ldr	r2, [pc, #128]	; (8001c6c <HAL_DMA_Abort+0x46c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d018      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <HAL_DMA_Abort+0x470>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d013      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <HAL_DMA_Abort+0x474>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d00e      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <HAL_DMA_Abort+0x478>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d009      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1a      	ldr	r2, [pc, #104]	; (8001c7c <HAL_DMA_Abort+0x47c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d004      	beq.n	8001c22 <HAL_DMA_Abort+0x422>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <HAL_DMA_Abort+0x480>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_DMA_Abort+0x426>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_DMA_Abort+0x428>
 8001c26:	2300      	movs	r3, #0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d02b      	beq.n	8001c84 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	223f      	movs	r2, #63	; 0x3f
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	e02a      	b.n	8001c9a <HAL_DMA_Abort+0x49a>
 8001c44:	40020010 	.word	0x40020010
 8001c48:	40020028 	.word	0x40020028
 8001c4c:	40020040 	.word	0x40020040
 8001c50:	40020058 	.word	0x40020058
 8001c54:	40020070 	.word	0x40020070
 8001c58:	40020088 	.word	0x40020088
 8001c5c:	400200a0 	.word	0x400200a0
 8001c60:	400200b8 	.word	0x400200b8
 8001c64:	40020410 	.word	0x40020410
 8001c68:	40020428 	.word	0x40020428
 8001c6c:	40020440 	.word	0x40020440
 8001c70:	40020458 	.word	0x40020458
 8001c74:	40020470 	.word	0x40020470
 8001c78:	40020488 	.word	0x40020488
 8001c7c:	400204a0 	.word	0x400204a0
 8001c80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	2201      	movs	r2, #1
 8001c94:	409a      	lsls	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a4f      	ldr	r2, [pc, #316]	; (8001ddc <HAL_DMA_Abort+0x5dc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d072      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a4d      	ldr	r2, [pc, #308]	; (8001de0 <HAL_DMA_Abort+0x5e0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d06d      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a4c      	ldr	r2, [pc, #304]	; (8001de4 <HAL_DMA_Abort+0x5e4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d068      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_DMA_Abort+0x5e8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d063      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a49      	ldr	r2, [pc, #292]	; (8001dec <HAL_DMA_Abort+0x5ec>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d05e      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a47      	ldr	r2, [pc, #284]	; (8001df0 <HAL_DMA_Abort+0x5f0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d059      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a46      	ldr	r2, [pc, #280]	; (8001df4 <HAL_DMA_Abort+0x5f4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d054      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a44      	ldr	r2, [pc, #272]	; (8001df8 <HAL_DMA_Abort+0x5f8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d04f      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a43      	ldr	r2, [pc, #268]	; (8001dfc <HAL_DMA_Abort+0x5fc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d04a      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a41      	ldr	r2, [pc, #260]	; (8001e00 <HAL_DMA_Abort+0x600>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d045      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a40      	ldr	r2, [pc, #256]	; (8001e04 <HAL_DMA_Abort+0x604>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d040      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a3e      	ldr	r2, [pc, #248]	; (8001e08 <HAL_DMA_Abort+0x608>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d03b      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a3d      	ldr	r2, [pc, #244]	; (8001e0c <HAL_DMA_Abort+0x60c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d036      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a3b      	ldr	r2, [pc, #236]	; (8001e10 <HAL_DMA_Abort+0x610>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d031      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a3a      	ldr	r2, [pc, #232]	; (8001e14 <HAL_DMA_Abort+0x614>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d02c      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a38      	ldr	r2, [pc, #224]	; (8001e18 <HAL_DMA_Abort+0x618>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d027      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a37      	ldr	r2, [pc, #220]	; (8001e1c <HAL_DMA_Abort+0x61c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d022      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a35      	ldr	r2, [pc, #212]	; (8001e20 <HAL_DMA_Abort+0x620>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01d      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a34      	ldr	r2, [pc, #208]	; (8001e24 <HAL_DMA_Abort+0x624>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d018      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a32      	ldr	r2, [pc, #200]	; (8001e28 <HAL_DMA_Abort+0x628>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a31      	ldr	r2, [pc, #196]	; (8001e2c <HAL_DMA_Abort+0x62c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00e      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a2f      	ldr	r2, [pc, #188]	; (8001e30 <HAL_DMA_Abort+0x630>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d009      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a2e      	ldr	r2, [pc, #184]	; (8001e34 <HAL_DMA_Abort+0x634>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d004      	beq.n	8001d8a <HAL_DMA_Abort+0x58a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a2c      	ldr	r2, [pc, #176]	; (8001e38 <HAL_DMA_Abort+0x638>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_DMA_Abort+0x58e>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_DMA_Abort+0x590>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d015      	beq.n	8001dc0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d9c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00c      	beq.n	8001dc0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001dbe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40020010 	.word	0x40020010
 8001de0:	40020028 	.word	0x40020028
 8001de4:	40020040 	.word	0x40020040
 8001de8:	40020058 	.word	0x40020058
 8001dec:	40020070 	.word	0x40020070
 8001df0:	40020088 	.word	0x40020088
 8001df4:	400200a0 	.word	0x400200a0
 8001df8:	400200b8 	.word	0x400200b8
 8001dfc:	40020410 	.word	0x40020410
 8001e00:	40020428 	.word	0x40020428
 8001e04:	40020440 	.word	0x40020440
 8001e08:	40020458 	.word	0x40020458
 8001e0c:	40020470 	.word	0x40020470
 8001e10:	40020488 	.word	0x40020488
 8001e14:	400204a0 	.word	0x400204a0
 8001e18:	400204b8 	.word	0x400204b8
 8001e1c:	58025408 	.word	0x58025408
 8001e20:	5802541c 	.word	0x5802541c
 8001e24:	58025430 	.word	0x58025430
 8001e28:	58025444 	.word	0x58025444
 8001e2c:	58025458 	.word	0x58025458
 8001e30:	5802546c 	.word	0x5802546c
 8001e34:	58025480 	.word	0x58025480
 8001e38:	58025494 	.word	0x58025494

08001e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e205      	b.n	800225a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d004      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2280      	movs	r2, #128	; 0x80
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e1fa      	b.n	800225a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a8c      	ldr	r2, [pc, #560]	; (800209c <HAL_DMA_Abort_IT+0x260>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d04a      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a8b      	ldr	r2, [pc, #556]	; (80020a0 <HAL_DMA_Abort_IT+0x264>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d045      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a89      	ldr	r2, [pc, #548]	; (80020a4 <HAL_DMA_Abort_IT+0x268>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d040      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a88      	ldr	r2, [pc, #544]	; (80020a8 <HAL_DMA_Abort_IT+0x26c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d03b      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a86      	ldr	r2, [pc, #536]	; (80020ac <HAL_DMA_Abort_IT+0x270>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d036      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a85      	ldr	r2, [pc, #532]	; (80020b0 <HAL_DMA_Abort_IT+0x274>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d031      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a83      	ldr	r2, [pc, #524]	; (80020b4 <HAL_DMA_Abort_IT+0x278>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d02c      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a82      	ldr	r2, [pc, #520]	; (80020b8 <HAL_DMA_Abort_IT+0x27c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d027      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a80      	ldr	r2, [pc, #512]	; (80020bc <HAL_DMA_Abort_IT+0x280>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d022      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a7f      	ldr	r2, [pc, #508]	; (80020c0 <HAL_DMA_Abort_IT+0x284>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d01d      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a7d      	ldr	r2, [pc, #500]	; (80020c4 <HAL_DMA_Abort_IT+0x288>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d018      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7c      	ldr	r2, [pc, #496]	; (80020c8 <HAL_DMA_Abort_IT+0x28c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d013      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a7a      	ldr	r2, [pc, #488]	; (80020cc <HAL_DMA_Abort_IT+0x290>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00e      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a79      	ldr	r2, [pc, #484]	; (80020d0 <HAL_DMA_Abort_IT+0x294>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d009      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a77      	ldr	r2, [pc, #476]	; (80020d4 <HAL_DMA_Abort_IT+0x298>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d004      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a76      	ldr	r2, [pc, #472]	; (80020d8 <HAL_DMA_Abort_IT+0x29c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d101      	bne.n	8001f08 <HAL_DMA_Abort_IT+0xcc>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_DMA_Abort_IT+0xce>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d065      	beq.n	8001fda <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2204      	movs	r2, #4
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a60      	ldr	r2, [pc, #384]	; (800209c <HAL_DMA_Abort_IT+0x260>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d04a      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a5e      	ldr	r2, [pc, #376]	; (80020a0 <HAL_DMA_Abort_IT+0x264>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d045      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a5d      	ldr	r2, [pc, #372]	; (80020a4 <HAL_DMA_Abort_IT+0x268>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d040      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a5b      	ldr	r2, [pc, #364]	; (80020a8 <HAL_DMA_Abort_IT+0x26c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d03b      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a5a      	ldr	r2, [pc, #360]	; (80020ac <HAL_DMA_Abort_IT+0x270>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d036      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a58      	ldr	r2, [pc, #352]	; (80020b0 <HAL_DMA_Abort_IT+0x274>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d031      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a57      	ldr	r2, [pc, #348]	; (80020b4 <HAL_DMA_Abort_IT+0x278>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d02c      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a55      	ldr	r2, [pc, #340]	; (80020b8 <HAL_DMA_Abort_IT+0x27c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d027      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a54      	ldr	r2, [pc, #336]	; (80020bc <HAL_DMA_Abort_IT+0x280>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d022      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <HAL_DMA_Abort_IT+0x284>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01d      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a51      	ldr	r2, [pc, #324]	; (80020c4 <HAL_DMA_Abort_IT+0x288>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d018      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a4f      	ldr	r2, [pc, #316]	; (80020c8 <HAL_DMA_Abort_IT+0x28c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a4e      	ldr	r2, [pc, #312]	; (80020cc <HAL_DMA_Abort_IT+0x290>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00e      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a4c      	ldr	r2, [pc, #304]	; (80020d0 <HAL_DMA_Abort_IT+0x294>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d009      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a4b      	ldr	r2, [pc, #300]	; (80020d4 <HAL_DMA_Abort_IT+0x298>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d004      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x17a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a49      	ldr	r2, [pc, #292]	; (80020d8 <HAL_DMA_Abort_IT+0x29c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d108      	bne.n	8001fc8 <HAL_DMA_Abort_IT+0x18c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0201 	bic.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	e147      	b.n	8002258 <HAL_DMA_Abort_IT+0x41c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e13e      	b.n	8002258 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 020e 	bic.w	r2, r2, #14
 8001fe8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2b      	ldr	r2, [pc, #172]	; (800209c <HAL_DMA_Abort_IT+0x260>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d04a      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <HAL_DMA_Abort_IT+0x264>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d045      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <HAL_DMA_Abort_IT+0x268>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d040      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <HAL_DMA_Abort_IT+0x26c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d03b      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a25      	ldr	r2, [pc, #148]	; (80020ac <HAL_DMA_Abort_IT+0x270>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d036      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <HAL_DMA_Abort_IT+0x274>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d031      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <HAL_DMA_Abort_IT+0x278>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d02c      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a20      	ldr	r2, [pc, #128]	; (80020b8 <HAL_DMA_Abort_IT+0x27c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d027      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <HAL_DMA_Abort_IT+0x280>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d022      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <HAL_DMA_Abort_IT+0x284>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01d      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <HAL_DMA_Abort_IT+0x288>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d018      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1a      	ldr	r2, [pc, #104]	; (80020c8 <HAL_DMA_Abort_IT+0x28c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a19      	ldr	r2, [pc, #100]	; (80020cc <HAL_DMA_Abort_IT+0x290>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00e      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_DMA_Abort_IT+0x294>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d009      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <HAL_DMA_Abort_IT+0x298>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d004      	beq.n	800208a <HAL_DMA_Abort_IT+0x24e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_DMA_Abort_IT+0x29c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d128      	bne.n	80020dc <HAL_DMA_Abort_IT+0x2a0>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e027      	b.n	80020ec <HAL_DMA_Abort_IT+0x2b0>
 800209c:	40020010 	.word	0x40020010
 80020a0:	40020028 	.word	0x40020028
 80020a4:	40020040 	.word	0x40020040
 80020a8:	40020058 	.word	0x40020058
 80020ac:	40020070 	.word	0x40020070
 80020b0:	40020088 	.word	0x40020088
 80020b4:	400200a0 	.word	0x400200a0
 80020b8:	400200b8 	.word	0x400200b8
 80020bc:	40020410 	.word	0x40020410
 80020c0:	40020428 	.word	0x40020428
 80020c4:	40020440 	.word	0x40020440
 80020c8:	40020458 	.word	0x40020458
 80020cc:	40020470 	.word	0x40020470
 80020d0:	40020488 	.word	0x40020488
 80020d4:	400204a0 	.word	0x400204a0
 80020d8:	400204b8 	.word	0x400204b8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a5c      	ldr	r2, [pc, #368]	; (8002264 <HAL_DMA_Abort_IT+0x428>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d072      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a5b      	ldr	r2, [pc, #364]	; (8002268 <HAL_DMA_Abort_IT+0x42c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d06d      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a59      	ldr	r2, [pc, #356]	; (800226c <HAL_DMA_Abort_IT+0x430>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d068      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_DMA_Abort_IT+0x434>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d063      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a56      	ldr	r2, [pc, #344]	; (8002274 <HAL_DMA_Abort_IT+0x438>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d05e      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a55      	ldr	r2, [pc, #340]	; (8002278 <HAL_DMA_Abort_IT+0x43c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d059      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a53      	ldr	r2, [pc, #332]	; (800227c <HAL_DMA_Abort_IT+0x440>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d054      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a52      	ldr	r2, [pc, #328]	; (8002280 <HAL_DMA_Abort_IT+0x444>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d04f      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a50      	ldr	r2, [pc, #320]	; (8002284 <HAL_DMA_Abort_IT+0x448>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d04a      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a4f      	ldr	r2, [pc, #316]	; (8002288 <HAL_DMA_Abort_IT+0x44c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d045      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a4d      	ldr	r2, [pc, #308]	; (800228c <HAL_DMA_Abort_IT+0x450>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d040      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a4c      	ldr	r2, [pc, #304]	; (8002290 <HAL_DMA_Abort_IT+0x454>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d03b      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a4a      	ldr	r2, [pc, #296]	; (8002294 <HAL_DMA_Abort_IT+0x458>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d036      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a49      	ldr	r2, [pc, #292]	; (8002298 <HAL_DMA_Abort_IT+0x45c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d031      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a47      	ldr	r2, [pc, #284]	; (800229c <HAL_DMA_Abort_IT+0x460>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d02c      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a46      	ldr	r2, [pc, #280]	; (80022a0 <HAL_DMA_Abort_IT+0x464>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d027      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a44      	ldr	r2, [pc, #272]	; (80022a4 <HAL_DMA_Abort_IT+0x468>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d022      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a43      	ldr	r2, [pc, #268]	; (80022a8 <HAL_DMA_Abort_IT+0x46c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d01d      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a41      	ldr	r2, [pc, #260]	; (80022ac <HAL_DMA_Abort_IT+0x470>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d018      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a40      	ldr	r2, [pc, #256]	; (80022b0 <HAL_DMA_Abort_IT+0x474>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d013      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a3e      	ldr	r2, [pc, #248]	; (80022b4 <HAL_DMA_Abort_IT+0x478>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00e      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a3d      	ldr	r2, [pc, #244]	; (80022b8 <HAL_DMA_Abort_IT+0x47c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d009      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a3b      	ldr	r2, [pc, #236]	; (80022bc <HAL_DMA_Abort_IT+0x480>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d004      	beq.n	80021dc <HAL_DMA_Abort_IT+0x3a0>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a3a      	ldr	r2, [pc, #232]	; (80022c0 <HAL_DMA_Abort_IT+0x484>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_DMA_Abort_IT+0x3a4>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_DMA_Abort_IT+0x3a6>
 80021e0:	2300      	movs	r3, #0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d028      	beq.n	8002238 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	2201      	movs	r2, #1
 8002206:	409a      	lsls	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002214:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00c      	beq.n	8002238 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800222c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002236:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40020010 	.word	0x40020010
 8002268:	40020028 	.word	0x40020028
 800226c:	40020040 	.word	0x40020040
 8002270:	40020058 	.word	0x40020058
 8002274:	40020070 	.word	0x40020070
 8002278:	40020088 	.word	0x40020088
 800227c:	400200a0 	.word	0x400200a0
 8002280:	400200b8 	.word	0x400200b8
 8002284:	40020410 	.word	0x40020410
 8002288:	40020428 	.word	0x40020428
 800228c:	40020440 	.word	0x40020440
 8002290:	40020458 	.word	0x40020458
 8002294:	40020470 	.word	0x40020470
 8002298:	40020488 	.word	0x40020488
 800229c:	400204a0 	.word	0x400204a0
 80022a0:	400204b8 	.word	0x400204b8
 80022a4:	58025408 	.word	0x58025408
 80022a8:	5802541c 	.word	0x5802541c
 80022ac:	58025430 	.word	0x58025430
 80022b0:	58025444 	.word	0x58025444
 80022b4:	58025458 	.word	0x58025458
 80022b8:	5802546c 	.word	0x5802546c
 80022bc:	58025480 	.word	0x58025480
 80022c0:	58025494 	.word	0x58025494

080022c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0c6      	b.n	8002464 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fdf4 	bl	8000ecc <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2223      	movs	r2, #35	; 0x23
 80022e8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	4b60      	ldr	r3, [pc, #384]	; (800246c <HAL_ETH_Init+0x1a8>)
 80022ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022f0:	4a5e      	ldr	r2, [pc, #376]	; (800246c <HAL_ETH_Init+0x1a8>)
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022fa:	4b5c      	ldr	r3, [pc, #368]	; (800246c <HAL_ETH_Init+0x1a8>)
 80022fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7a1b      	ldrb	r3, [r3, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d103      	bne.n	8002318 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff f951 	bl	80015b8 <HAL_SYSCFG_ETHInterfaceSelect>
 8002316:	e003      	b.n	8002320 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002318:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800231c:	f7ff f94c 	bl	80015b8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002338:	f7ff f902 	bl	8001540 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800233e:	e00f      	b.n	8002360 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002340:	f7ff f8fe 	bl	8001540 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800234e:	d907      	bls.n	8002360 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2204      	movs	r2, #4
 8002354:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	22e0      	movs	r2, #224	; 0xe0
 800235a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e081      	b.n	8002464 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1e6      	bne.n	8002340 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fac0 	bl	80028f8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002378:	f003 faa6 	bl	80058c8 <HAL_RCC_GetHCLKFreq>
 800237c:	4603      	mov	r3, r0
 800237e:	4a3c      	ldr	r2, [pc, #240]	; (8002470 <HAL_ETH_Init+0x1ac>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	0c9a      	lsrs	r2, r3, #18
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3a01      	subs	r2, #1
 800238c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fa13 	bl	80027bc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80023ac:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80023b0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	22e0      	movs	r2, #224	; 0xe0
 80023c8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e04a      	b.n	8002464 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	f241 1308 	movw	r3, #4360	; 0x1108
 80023d6:	4413      	add	r3, r2
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <HAL_ETH_Init+0x1b0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6952      	ldr	r2, [r2, #20]
 80023e2:	0052      	lsls	r2, r2, #1
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	6809      	ldr	r1, [r1, #0]
 80023e8:	431a      	orrs	r2, r3
 80023ea:	f241 1308 	movw	r3, #4360	; 0x1108
 80023ee:	440b      	add	r3, r1
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fad8 	bl	80029a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fb1c 	bl	8002a36 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	3305      	adds	r3, #5
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	021a      	lsls	r2, r3, #8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	3304      	adds	r3, #4
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	3303      	adds	r3, #3
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	061a      	lsls	r2, r3, #24
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	3302      	adds	r3, #2
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	041b      	lsls	r3, r3, #16
 8002430:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	3301      	adds	r3, #1
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800243c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800244a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800244c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2210      	movs	r2, #16
 800245a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2210      	movs	r2, #16
 8002460:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	58024400 	.word	0x58024400
 8002470:	431bde83 	.word	0x431bde83
 8002474:	ffff8001 	.word	0xffff8001

08002478 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800248a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	791b      	ldrb	r3, [r3, #4]
 8002490:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002492:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	7b1b      	ldrb	r3, [r3, #12]
 8002498:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800249a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	7b5b      	ldrb	r3, [r3, #13]
 80024a0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024a2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	7b9b      	ldrb	r3, [r3, #14]
 80024a8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80024aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	7bdb      	ldrb	r3, [r3, #15]
 80024b0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024b2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	7c12      	ldrb	r2, [r2, #16]
 80024b8:	2a00      	cmp	r2, #0
 80024ba:	d102      	bne.n	80024c2 <ETH_SetMACConfig+0x4a>
 80024bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024c0:	e000      	b.n	80024c4 <ETH_SetMACConfig+0x4c>
 80024c2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024c4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	7c52      	ldrb	r2, [r2, #17]
 80024ca:	2a00      	cmp	r2, #0
 80024cc:	d102      	bne.n	80024d4 <ETH_SetMACConfig+0x5c>
 80024ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024d2:	e000      	b.n	80024d6 <ETH_SetMACConfig+0x5e>
 80024d4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024d6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	7c9b      	ldrb	r3, [r3, #18]
 80024dc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024de:	431a      	orrs	r2, r3
                                macconf->Speed |
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80024e4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80024ea:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	7f1b      	ldrb	r3, [r3, #28]
 80024f0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80024f2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	7f5b      	ldrb	r3, [r3, #29]
 80024f8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80024fa:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	7f92      	ldrb	r2, [r2, #30]
 8002500:	2a00      	cmp	r2, #0
 8002502:	d102      	bne.n	800250a <ETH_SetMACConfig+0x92>
 8002504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002508:	e000      	b.n	800250c <ETH_SetMACConfig+0x94>
 800250a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800250c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	7fdb      	ldrb	r3, [r3, #31]
 8002512:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002514:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	f892 2020 	ldrb.w	r2, [r2, #32]
 800251c:	2a00      	cmp	r2, #0
 800251e:	d102      	bne.n	8002526 <ETH_SetMACConfig+0xae>
 8002520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002524:	e000      	b.n	8002528 <ETH_SetMACConfig+0xb0>
 8002526:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002528:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800252e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002536:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002538:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b56      	ldr	r3, [pc, #344]	; (80026a4 <ETH_SetMACConfig+0x22c>)
 800254a:	4013      	ands	r3, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	430b      	orrs	r3, r1
 8002554:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002562:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002564:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800256e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002576:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002578:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002580:	2a00      	cmp	r2, #0
 8002582:	d102      	bne.n	800258a <ETH_SetMACConfig+0x112>
 8002584:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002588:	e000      	b.n	800258c <ETH_SetMACConfig+0x114>
 800258a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800258c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <ETH_SetMACConfig+0x230>)
 800259e:	4013      	ands	r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	68f9      	ldr	r1, [r7, #12]
 80025a6:	430b      	orrs	r3, r1
 80025a8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	4b3a      	ldr	r3, [pc, #232]	; (80026ac <ETH_SetMACConfig+0x234>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	68f9      	ldr	r1, [r7, #12]
 80025ca:	430b      	orrs	r3, r1
 80025cc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025d4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025da:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80025e2:	2a00      	cmp	r2, #0
 80025e4:	d101      	bne.n	80025ea <ETH_SetMACConfig+0x172>
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	e000      	b.n	80025ec <ETH_SetMACConfig+0x174>
 80025ea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80025ec:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025fe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002602:	4013      	ands	r3, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	68f9      	ldr	r1, [r7, #12]
 800260a:	430b      	orrs	r3, r1
 800260c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002614:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800261c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	f023 0103 	bic.w	r1, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	430a      	orrs	r2, r1
 8002636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002642:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800265e:	2a00      	cmp	r2, #0
 8002660:	d101      	bne.n	8002666 <ETH_SetMACConfig+0x1ee>
 8002662:	2240      	movs	r2, #64	; 0x40
 8002664:	e000      	b.n	8002668 <ETH_SetMACConfig+0x1f0>
 8002666:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002668:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002670:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002672:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800267a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002688:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	430a      	orrs	r2, r1
 8002694:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	00048083 	.word	0x00048083
 80026a8:	c0f88000 	.word	0xc0f88000
 80026ac:	fffffef0 	.word	0xfffffef0

080026b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <ETH_SetDMAConfig+0xf8>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	6809      	ldr	r1, [r1, #0]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80026d6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	791b      	ldrb	r3, [r3, #4]
 80026dc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026e2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	7b1b      	ldrb	r3, [r3, #12]
 80026e8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f241 0304 	movw	r3, #4100	; 0x1004
 80026f6:	4413      	add	r3, r2
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	4b2c      	ldr	r3, [pc, #176]	; (80027ac <ETH_SetDMAConfig+0xfc>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6811      	ldr	r1, [r2, #0]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	431a      	orrs	r2, r3
 8002706:	f241 0304 	movw	r3, #4100	; 0x1004
 800270a:	440b      	add	r3, r1
 800270c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	7b5b      	ldrb	r3, [r3, #13]
 8002712:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <ETH_SetDMAConfig+0x100>)
 8002728:	4013      	ands	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6811      	ldr	r1, [r2, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	431a      	orrs	r2, r3
 8002732:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002736:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	7d1b      	ldrb	r3, [r3, #20]
 8002740:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002742:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	7f5b      	ldrb	r3, [r3, #29]
 8002748:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f241 1304 	movw	r3, #4356	; 0x1104
 8002756:	4413      	add	r3, r2
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <ETH_SetDMAConfig+0x104>)
 800275c:	4013      	ands	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6811      	ldr	r1, [r2, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	431a      	orrs	r2, r3
 8002766:	f241 1304 	movw	r3, #4356	; 0x1104
 800276a:	440b      	add	r3, r1
 800276c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	7f1b      	ldrb	r3, [r3, #28]
 8002772:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	f241 1308 	movw	r3, #4360	; 0x1108
 8002784:	4413      	add	r3, r2
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <ETH_SetDMAConfig+0x108>)
 800278a:	4013      	ands	r3, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6811      	ldr	r1, [r2, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	431a      	orrs	r2, r3
 8002794:	f241 1308 	movw	r3, #4360	; 0x1108
 8002798:	440b      	add	r3, r1
 800279a:	601a      	str	r2, [r3, #0]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	ffff87fd 	.word	0xffff87fd
 80027ac:	ffff2ffe 	.word	0xffff2ffe
 80027b0:	fffec000 	.word	0xfffec000
 80027b4:	ffc0efef 	.word	0xffc0efef
 80027b8:	7fc0ffff 	.word	0x7fc0ffff

080027bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b0a4      	sub	sp, #144	; 0x90
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027ca:	2300      	movs	r3, #0
 80027cc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027fc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002804:	2300      	movs	r3, #0
 8002806:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002808:	2300      	movs	r3, #0
 800280a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002814:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002818:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002820:	2300      	movs	r3, #0
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002836:	2300      	movs	r3, #0
 8002838:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800283a:	2300      	movs	r3, #0
 800283c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800283e:	2300      	movs	r3, #0
 8002840:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002854:	2320      	movs	r3, #32
 8002856:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002866:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800286c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002870:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002878:	2302      	movs	r3, #2
 800287a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002896:	2300      	movs	r3, #0
 8002898:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a4:	4619      	mov	r1, r3
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fde6 	bl	8002478 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028b0:	2301      	movs	r3, #1
 80028b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80028be:	2300      	movs	r3, #0
 80028c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80028dc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff fee1 	bl	80026b0 <ETH_SetDMAConfig>
}
 80028ee:	bf00      	nop
 80028f0:	3790      	adds	r7, #144	; 0x90
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002908:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002910:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002912:	f002 ffd9 	bl	80058c8 <HAL_RCC_GetHCLKFreq>
 8002916:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4a1e      	ldr	r2, [pc, #120]	; (8002994 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d908      	bls.n	8002932 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d804      	bhi.n	8002932 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	e027      	b.n	8002982 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4a18      	ldr	r2, [pc, #96]	; (8002998 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d908      	bls.n	800294c <ETH_MAC_MDIO_ClkConfig+0x54>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	4a17      	ldr	r2, [pc, #92]	; (800299c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d204      	bcs.n	800294c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	e01a      	b.n	8002982 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4a13      	ldr	r2, [pc, #76]	; (800299c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d303      	bcc.n	800295c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d911      	bls.n	8002980 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4a10      	ldr	r2, [pc, #64]	; (80029a0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d908      	bls.n	8002976 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d804      	bhi.n	8002976 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e005      	b.n	8002982 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e000      	b.n	8002982 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002980:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	01312cff 	.word	0x01312cff
 8002998:	02160ebf 	.word	0x02160ebf
 800299c:	03938700 	.word	0x03938700
 80029a0:	05f5e0ff 	.word	0x05f5e0ff
 80029a4:	08f0d17f 	.word	0x08f0d17f

080029a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e01d      	b.n	80029f2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68d9      	ldr	r1, [r3, #12]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2200      	movs	r2, #0
 80029d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2200      	movs	r2, #0
 80029de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	3206      	adds	r2, #6
 80029e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	3301      	adds	r3, #1
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d9de      	bls.n	80029b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	f241 132c 	movw	r3, #4396	; 0x112c
 8002a06:	4413      	add	r3, r2
 8002a08:	2203      	movs	r2, #3
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68d9      	ldr	r1, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	f241 1314 	movw	r3, #4372	; 0x1114
 8002a18:	4413      	add	r3, r2
 8002a1a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002a28:	601a      	str	r2, [r3, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e024      	b.n	8002a8e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6919      	ldr	r1, [r3, #16]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2200      	movs	r2, #0
 8002a78:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3310      	adds	r3, #16
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d9d7      	bls.n	8002a44 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	f241 1330 	movw	r3, #4400	; 0x1130
 8002aba:	4413      	add	r3, r2
 8002abc:	2203      	movs	r2, #3
 8002abe:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6919      	ldr	r1, [r3, #16]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	f241 131c 	movw	r3, #4380	; 0x111c
 8002acc:	4413      	add	r3, r2
 8002ace:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	f241 1328 	movw	r3, #4392	; 0x1128
 8002ae0:	4413      	add	r3, r2
 8002ae2:	6019      	str	r1, [r3, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b089      	sub	sp, #36	; 0x24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002afe:	4b89      	ldr	r3, [pc, #548]	; (8002d24 <HAL_GPIO_Init+0x234>)
 8002b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b02:	e194      	b.n	8002e2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8186 	beq.w	8002e28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d00b      	beq.n	8002b3c <HAL_GPIO_Init+0x4c>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d007      	beq.n	8002b3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b30:	2b11      	cmp	r3, #17
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b12      	cmp	r3, #18
 8002b3a:	d130      	bne.n	8002b9e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	2203      	movs	r2, #3
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b72:	2201      	movs	r2, #1
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	f003 0201 	and.w	r2, r3, #1
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	2203      	movs	r2, #3
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0xee>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b12      	cmp	r3, #18
 8002bdc:	d123      	bne.n	8002c26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	08da      	lsrs	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3208      	adds	r2, #8
 8002be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	08da      	lsrs	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3208      	adds	r2, #8
 8002c20:	69b9      	ldr	r1, [r7, #24]
 8002c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2203      	movs	r2, #3
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0203 	and.w	r2, r3, #3
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80e0 	beq.w	8002e28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c68:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <HAL_GPIO_Init+0x238>)
 8002c6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c6e:	4a2e      	ldr	r2, [pc, #184]	; (8002d28 <HAL_GPIO_Init+0x238>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c78:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <HAL_GPIO_Init+0x238>)
 8002c7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c86:	4a29      	ldr	r2, [pc, #164]	; (8002d2c <HAL_GPIO_Init+0x23c>)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a20      	ldr	r2, [pc, #128]	; (8002d30 <HAL_GPIO_Init+0x240>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d052      	beq.n	8002d58 <HAL_GPIO_Init+0x268>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a1f      	ldr	r2, [pc, #124]	; (8002d34 <HAL_GPIO_Init+0x244>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d031      	beq.n	8002d1e <HAL_GPIO_Init+0x22e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a1e      	ldr	r2, [pc, #120]	; (8002d38 <HAL_GPIO_Init+0x248>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d02b      	beq.n	8002d1a <HAL_GPIO_Init+0x22a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a1d      	ldr	r2, [pc, #116]	; (8002d3c <HAL_GPIO_Init+0x24c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d025      	beq.n	8002d16 <HAL_GPIO_Init+0x226>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <HAL_GPIO_Init+0x250>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01f      	beq.n	8002d12 <HAL_GPIO_Init+0x222>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a1b      	ldr	r2, [pc, #108]	; (8002d44 <HAL_GPIO_Init+0x254>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d019      	beq.n	8002d0e <HAL_GPIO_Init+0x21e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a1a      	ldr	r2, [pc, #104]	; (8002d48 <HAL_GPIO_Init+0x258>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_GPIO_Init+0x21a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <HAL_GPIO_Init+0x25c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00d      	beq.n	8002d06 <HAL_GPIO_Init+0x216>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a18      	ldr	r2, [pc, #96]	; (8002d50 <HAL_GPIO_Init+0x260>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <HAL_GPIO_Init+0x212>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a17      	ldr	r2, [pc, #92]	; (8002d54 <HAL_GPIO_Init+0x264>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_GPIO_Init+0x20e>
 8002cfa:	2309      	movs	r3, #9
 8002cfc:	e02d      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002cfe:	230a      	movs	r3, #10
 8002d00:	e02b      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d02:	2308      	movs	r3, #8
 8002d04:	e029      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d06:	2307      	movs	r3, #7
 8002d08:	e027      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	e025      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d0e:	2305      	movs	r3, #5
 8002d10:	e023      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e021      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e01f      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e01d      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e01b      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d22:	bf00      	nop
 8002d24:	58000080 	.word	0x58000080
 8002d28:	58024400 	.word	0x58024400
 8002d2c:	58000400 	.word	0x58000400
 8002d30:	58020000 	.word	0x58020000
 8002d34:	58020400 	.word	0x58020400
 8002d38:	58020800 	.word	0x58020800
 8002d3c:	58020c00 	.word	0x58020c00
 8002d40:	58021000 	.word	0x58021000
 8002d44:	58021400 	.word	0x58021400
 8002d48:	58021800 	.word	0x58021800
 8002d4c:	58021c00 	.word	0x58021c00
 8002d50:	58022000 	.word	0x58022000
 8002d54:	58022400 	.word	0x58022400
 8002d58:	2300      	movs	r3, #0
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	f002 0203 	and.w	r2, r2, #3
 8002d60:	0092      	lsls	r2, r2, #2
 8002d62:	4093      	lsls	r3, r2
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d6a:	4938      	ldr	r1, [pc, #224]	; (8002e4c <HAL_GPIO_Init+0x35c>)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	3302      	adds	r3, #2
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f47f ae63 	bne.w	8002b04 <HAL_GPIO_Init+0x14>
  }
}
 8002e3e:	bf00      	nop
 8002e40:	bf00      	nop
 8002e42:	3724      	adds	r7, #36	; 0x24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	58000400 	.word	0x58000400

08002e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e60:	787b      	ldrb	r3, [r7, #1]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e66:	887a      	ldrh	r2, [r7, #2]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e6c:	e003      	b.n	8002e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e6e:	887b      	ldrh	r3, [r7, #2]
 8002e70:	041a      	lsls	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	619a      	str	r2, [r3, #24]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e94:	887a      	ldrh	r2, [r7, #2]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	041a      	lsls	r2, r3, #16
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	43d9      	mvns	r1, r3
 8002ea0:	887b      	ldrh	r3, [r7, #2]
 8002ea2:	400b      	ands	r3, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	619a      	str	r2, [r3, #24]
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd ff15 	bl	8000d0c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002eea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eec:	b08f      	sub	sp, #60	; 0x3c
 8002eee:	af0a      	add	r7, sp, #40	; 0x28
 8002ef0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e054      	b.n	8002fa6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f009 fb54 	bl	800c5c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f006 fbbb 	bl	80096b6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	687e      	ldr	r6, [r7, #4]
 8002f48:	466d      	mov	r5, sp
 8002f4a:	f106 0410 	add.w	r4, r6, #16
 8002f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f5e:	1d33      	adds	r3, r6, #4
 8002f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f62:	6838      	ldr	r0, [r7, #0]
 8002f64:	f006 fb28 	bl	80095b8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f006 fbb2 	bl	80096d8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	687e      	ldr	r6, [r7, #4]
 8002f7c:	466d      	mov	r5, sp
 8002f7e:	f106 0410 	add.w	r4, r6, #16
 8002f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f92:	1d33      	adds	r3, r6, #4
 8002f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f96:	6838      	ldr	r0, [r7, #0]
 8002f98:	f006 fcfc 	bl	8009994 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fae <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002fae:	b590      	push	{r4, r7, lr}
 8002fb0:	b089      	sub	sp, #36	; 0x24
 8002fb2:	af04      	add	r7, sp, #16
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	4608      	mov	r0, r1
 8002fb8:	4611      	mov	r1, r2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	70fb      	strb	r3, [r7, #3]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	70bb      	strb	r3, [r7, #2]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_HCD_HC_Init+0x28>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e076      	b.n	80030c4 <HAL_HCD_HC_Init+0x116>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	333d      	adds	r3, #61	; 0x3d
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3338      	adds	r3, #56	; 0x38
 8002ffe:	787a      	ldrb	r2, [r7, #1]
 8003000:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	3340      	adds	r3, #64	; 0x40
 8003010:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003012:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	3339      	adds	r3, #57	; 0x39
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	333f      	adds	r3, #63	; 0x3f
 8003034:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003038:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	78ba      	ldrb	r2, [r7, #2]
 800303e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003042:	b2d0      	uxtb	r0, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	333a      	adds	r3, #58	; 0x3a
 8003050:	4602      	mov	r2, r0
 8003052:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003054:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003058:	2b00      	cmp	r3, #0
 800305a:	da09      	bge.n	8003070 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	212c      	movs	r1, #44	; 0x2c
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	333b      	adds	r3, #59	; 0x3b
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	e008      	b.n	8003082 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	212c      	movs	r1, #44	; 0x2c
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	4413      	add	r3, r2
 800307c:	333b      	adds	r3, #59	; 0x3b
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	333c      	adds	r3, #60	; 0x3c
 8003090:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003094:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	787c      	ldrb	r4, [r7, #1]
 800309c:	78ba      	ldrb	r2, [r7, #2]
 800309e:	78f9      	ldrb	r1, [r7, #3]
 80030a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030a2:	9302      	str	r3, [sp, #8]
 80030a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4623      	mov	r3, r4
 80030b2:	f006 fdeb 	bl	8009c8c <USB_HC_Init>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd90      	pop	{r4, r7, pc}

080030cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_HCD_HC_Halt+0x1e>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e00f      	b.n	800310a <HAL_HCD_HC_Halt+0x3e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f007 f827 	bl	800a14e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003108:	7bfb      	ldrb	r3, [r7, #15]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	461a      	mov	r2, r3
 8003122:	4603      	mov	r3, r0
 8003124:	70fb      	strb	r3, [r7, #3]
 8003126:	460b      	mov	r3, r1
 8003128:	70bb      	strb	r3, [r7, #2]
 800312a:	4613      	mov	r3, r2
 800312c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	333b      	adds	r3, #59	; 0x3b
 800313c:	78ba      	ldrb	r2, [r7, #2]
 800313e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	333f      	adds	r3, #63	; 0x3f
 800314e:	787a      	ldrb	r2, [r7, #1]
 8003150:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003152:	7c3b      	ldrb	r3, [r7, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d112      	bne.n	800317e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3342      	adds	r3, #66	; 0x42
 8003166:	2203      	movs	r2, #3
 8003168:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	333d      	adds	r3, #61	; 0x3d
 8003178:	7f3a      	ldrb	r2, [r7, #28]
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e008      	b.n	8003190 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	3342      	adds	r3, #66	; 0x42
 800318c:	2202      	movs	r2, #2
 800318e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b03      	cmp	r3, #3
 8003194:	f200 80c6 	bhi.w	8003324 <HAL_HCD_HC_SubmitRequest+0x210>
 8003198:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800319a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319e:	bf00      	nop
 80031a0:	080031b1 	.word	0x080031b1
 80031a4:	08003311 	.word	0x08003311
 80031a8:	08003215 	.word	0x08003215
 80031ac:	08003293 	.word	0x08003293
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80031b0:	7c3b      	ldrb	r3, [r7, #16]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	f040 80b8 	bne.w	8003328 <HAL_HCD_HC_SubmitRequest+0x214>
 80031b8:	78bb      	ldrb	r3, [r7, #2]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 80b4 	bne.w	8003328 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80031c0:	8b3b      	ldrh	r3, [r7, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d108      	bne.n	80031d8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	212c      	movs	r1, #44	; 0x2c
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	3355      	adds	r3, #85	; 0x55
 80031d4:	2201      	movs	r2, #1
 80031d6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	212c      	movs	r1, #44	; 0x2c
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	3355      	adds	r3, #85	; 0x55
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3342      	adds	r3, #66	; 0x42
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80031fe:	e093      	b.n	8003328 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3342      	adds	r3, #66	; 0x42
 800320e:	2202      	movs	r2, #2
 8003210:	701a      	strb	r2, [r3, #0]
      break;
 8003212:	e089      	b.n	8003328 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003214:	78bb      	ldrb	r3, [r7, #2]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11d      	bne.n	8003256 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	3355      	adds	r3, #85	; 0x55
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	212c      	movs	r1, #44	; 0x2c
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	4413      	add	r3, r2
 800323a:	3342      	adds	r3, #66	; 0x42
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003240:	e073      	b.n	800332a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3342      	adds	r3, #66	; 0x42
 8003250:	2202      	movs	r2, #2
 8003252:	701a      	strb	r2, [r3, #0]
      break;
 8003254:	e069      	b.n	800332a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3354      	adds	r3, #84	; 0x54
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	212c      	movs	r1, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3342      	adds	r3, #66	; 0x42
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
      break;
 800327c:	e055      	b.n	800332a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	3342      	adds	r3, #66	; 0x42
 800328c:	2202      	movs	r2, #2
 800328e:	701a      	strb	r2, [r3, #0]
      break;
 8003290:	e04b      	b.n	800332a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003292:	78bb      	ldrb	r3, [r7, #2]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11d      	bne.n	80032d4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3355      	adds	r3, #85	; 0x55
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3342      	adds	r3, #66	; 0x42
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80032be:	e034      	b.n	800332a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3342      	adds	r3, #66	; 0x42
 80032ce:	2202      	movs	r2, #2
 80032d0:	701a      	strb	r2, [r3, #0]
      break;
 80032d2:	e02a      	b.n	800332a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3354      	adds	r3, #84	; 0x54
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3342      	adds	r3, #66	; 0x42
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
      break;
 80032fa:	e016      	b.n	800332a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	3342      	adds	r3, #66	; 0x42
 800330a:	2202      	movs	r2, #2
 800330c:	701a      	strb	r2, [r3, #0]
      break;
 800330e:	e00c      	b.n	800332a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	212c      	movs	r1, #44	; 0x2c
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	4413      	add	r3, r2
 800331c:	3342      	adds	r3, #66	; 0x42
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
      break;
 8003322:	e002      	b.n	800332a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003324:	bf00      	nop
 8003326:	e000      	b.n	800332a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003328:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	3344      	adds	r3, #68	; 0x44
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	8b3a      	ldrh	r2, [r7, #24]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	202c      	movs	r0, #44	; 0x2c
 8003344:	fb00 f303 	mul.w	r3, r0, r3
 8003348:	440b      	add	r3, r1
 800334a:	334c      	adds	r3, #76	; 0x4c
 800334c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	3360      	adds	r3, #96	; 0x60
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	212c      	movs	r1, #44	; 0x2c
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	3350      	adds	r3, #80	; 0x50
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	3339      	adds	r3, #57	; 0x39
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3361      	adds	r3, #97	; 0x61
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	222c      	movs	r2, #44	; 0x2c
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	3338      	adds	r3, #56	; 0x38
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	18d1      	adds	r1, r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	f006 fd7a 	bl	8009ea8 <USB_HC_StartXfer>
 80033b4:	4603      	mov	r3, r0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop

080033c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f006 fa99 	bl	800990e <USB_GetMode>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	f040 80ef 	bne.w	80035c2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f006 fa7d 	bl	80098e8 <USB_ReadInterrupts>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80e5 	beq.w	80035c0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f006 fa74 	bl	80098e8 <USB_ReadInterrupts>
 8003400:	4603      	mov	r3, r0
 8003402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003406:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800340a:	d104      	bne.n	8003416 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003414:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f006 fa64 	bl	80098e8 <USB_ReadInterrupts>
 8003420:	4603      	mov	r3, r0
 8003422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342a:	d104      	bne.n	8003436 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003434:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f006 fa54 	bl	80098e8 <USB_ReadInterrupts>
 8003440:	4603      	mov	r3, r0
 8003442:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003446:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800344a:	d104      	bne.n	8003456 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003454:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f006 fa44 	bl	80098e8 <USB_ReadInterrupts>
 8003460:	4603      	mov	r3, r0
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d103      	bne.n	8003472 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2202      	movs	r2, #2
 8003470:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f006 fa36 	bl	80098e8 <USB_ReadInterrupts>
 800347c:	4603      	mov	r3, r0
 800347e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003486:	d115      	bne.n	80034b4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003490:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f009 f93c 	bl	800c720 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2101      	movs	r1, #1
 80034ae:	4618      	mov	r0, r3
 80034b0:	f006 fb26 	bl	8009b00 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f006 fa15 	bl	80098e8 <USB_ReadInterrupts>
 80034be:	4603      	mov	r3, r0
 80034c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c8:	d102      	bne.n	80034d0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f001 f9ff 	bl	80048ce <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f006 fa07 	bl	80098e8 <USB_ReadInterrupts>
 80034da:	4603      	mov	r3, r0
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d106      	bne.n	80034f2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f009 f8ff 	bl	800c6e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2208      	movs	r2, #8
 80034f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f006 f9f6 	bl	80098e8 <USB_ReadInterrupts>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b10      	cmp	r3, #16
 8003504:	d101      	bne.n	800350a <HAL_HCD_IRQHandler+0x14a>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_HCD_IRQHandler+0x14c>
 800350a:	2300      	movs	r3, #0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d012      	beq.n	8003536 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0210 	bic.w	r2, r2, #16
 800351e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f001 f902 	bl	800472a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0210 	orr.w	r2, r2, #16
 8003534:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f006 f9d4 	bl	80098e8 <USB_ReadInterrupts>
 8003540:	4603      	mov	r3, r0
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800354a:	d13a      	bne.n	80035c2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f006 fdeb 	bl	800a12c <USB_HC_ReadInterrupt>
 8003556:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e025      	b.n	80035aa <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d018      	beq.n	80035a4 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4413      	add	r3, r2
 800357a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003588:	d106      	bne.n	8003598 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f8ab 	bl	80036ec <HCD_HC_IN_IRQHandler>
 8003596:	e005      	b.n	80035a4 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	4619      	mov	r1, r3
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fcc6 	bl	8003f30 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3301      	adds	r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d3d4      	bcc.n	800355e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035bc:	615a      	str	r2, [r3, #20]
 80035be:	e000      	b.n	80035c2 <HAL_HCD_IRQHandler+0x202>
      return;
 80035c0:	bf00      	nop
    }
  }
}
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_HCD_Start+0x16>
 80035da:	2302      	movs	r3, #2
 80035dc:	e013      	b.n	8003606 <HAL_HCD_Start+0x3e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f006 f852 	bl	8009694 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2101      	movs	r1, #1
 80035f6:	4618      	mov	r0, r3
 80035f8:	f006 fae6 	bl	8009bc8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_HCD_Stop+0x16>
 8003620:	2302      	movs	r3, #2
 8003622:	e00d      	b.n	8003640 <HAL_HCD_Stop+0x32>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f006 fee5 	bl	800a400 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f006 fa8d 	bl	8009b74 <USB_ResetPort>
 800365a:	4603      	mov	r3, r0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	212c      	movs	r1, #44	; 0x2c
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	3360      	adds	r3, #96	; 0x60
 800367e:	781b      	ldrb	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	212c      	movs	r1, #44	; 0x2c
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	3350      	adds	r3, #80	; 0x50
 80036a6:	681b      	ldr	r3, [r3, #0]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f006 fad1 	bl	8009c68 <USB_GetCurrentFrame>
 80036c6:	4603      	mov	r3, r0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f006 faac 	bl	8009c3a <USB_GetHostSpeed>
 80036e2:	4603      	mov	r3, r0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4413      	add	r3, r2
 800370e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b04      	cmp	r3, #4
 800371a:	d119      	bne.n	8003750 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	461a      	mov	r2, r3
 800372a:	2304      	movs	r3, #4
 800372c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	0151      	lsls	r1, r2, #5
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	440a      	add	r2, r1
 8003744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003748:	f043 0302 	orr.w	r3, r3, #2
 800374c:	60d3      	str	r3, [r2, #12]
 800374e:	e101      	b.n	8003954 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003766:	d12b      	bne.n	80037c0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003774:	461a      	mov	r2, r3
 8003776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800377a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3361      	adds	r3, #97	; 0x61
 800378a:	2207      	movs	r2, #7
 800378c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	0151      	lsls	r1, r2, #5
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	440a      	add	r2, r1
 80037a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037a8:	f043 0302 	orr.w	r3, r3, #2
 80037ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f006 fcc8 	bl	800a14e <USB_HC_Halt>
 80037be:	e0c9      	b.n	8003954 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d109      	bne.n	80037ea <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e2:	461a      	mov	r2, r3
 80037e4:	2320      	movs	r3, #32
 80037e6:	6093      	str	r3, [r2, #8]
 80037e8:	e0b4      	b.n	8003954 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d133      	bne.n	8003868 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	0151      	lsls	r1, r2, #5
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	440a      	add	r2, r1
 8003816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800381a:	f043 0302 	orr.w	r3, r3, #2
 800381e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	212c      	movs	r1, #44	; 0x2c
 8003826:	fb01 f303 	mul.w	r3, r1, r3
 800382a:	4413      	add	r3, r2
 800382c:	3361      	adds	r3, #97	; 0x61
 800382e:	2205      	movs	r2, #5
 8003830:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4413      	add	r3, r2
 800383a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383e:	461a      	mov	r2, r3
 8003840:	2310      	movs	r3, #16
 8003842:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003850:	461a      	mov	r2, r3
 8003852:	2308      	movs	r3, #8
 8003854:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f006 fc74 	bl	800a14e <USB_HC_Halt>
 8003866:	e075      	b.n	8003954 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4413      	add	r3, r2
 8003870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387e:	d134      	bne.n	80038ea <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	0151      	lsls	r1, r2, #5
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	440a      	add	r2, r1
 8003896:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800389a:	f043 0302 	orr.w	r3, r3, #2
 800389e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	212c      	movs	r1, #44	; 0x2c
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	4413      	add	r3, r2
 80038ac:	3361      	adds	r3, #97	; 0x61
 80038ae:	2208      	movs	r2, #8
 80038b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038be:	461a      	mov	r2, r3
 80038c0:	2310      	movs	r3, #16
 80038c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	461a      	mov	r2, r3
 80038d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f006 fc33 	bl	800a14e <USB_HC_Halt>
 80038e8:	e034      	b.n	8003954 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fc:	2b80      	cmp	r3, #128	; 0x80
 80038fe:	d129      	bne.n	8003954 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	440a      	add	r2, r1
 8003916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800391a:	f043 0302 	orr.w	r3, r3, #2
 800391e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	212c      	movs	r1, #44	; 0x2c
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	4413      	add	r3, r2
 800392c:	3361      	adds	r3, #97	; 0x61
 800392e:	2206      	movs	r2, #6
 8003930:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f006 fc06 	bl	800a14e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4413      	add	r3, r2
 800394a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394e:	461a      	mov	r2, r3
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800396a:	d122      	bne.n	80039b2 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	0151      	lsls	r1, r2, #5
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	440a      	add	r2, r1
 8003982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003986:	f043 0302 	orr.w	r3, r3, #2
 800398a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f006 fbd9 	bl	800a14e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a8:	461a      	mov	r2, r3
 80039aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039ae:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80039b0:	e2ba      	b.n	8003f28 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	f040 811b 	bne.w	8003c00 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d019      	beq.n	8003a06 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	212c      	movs	r1, #44	; 0x2c
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	4413      	add	r3, r2
 80039de:	3348      	adds	r3, #72	; 0x48
 80039e0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	0159      	lsls	r1, r3, #5
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	440b      	add	r3, r1
 80039ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80039f4:	1ad2      	subs	r2, r2, r3
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	202c      	movs	r0, #44	; 0x2c
 80039fc:	fb00 f303 	mul.w	r3, r0, r3
 8003a00:	440b      	add	r3, r1
 8003a02:	3350      	adds	r3, #80	; 0x50
 8003a04:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	3361      	adds	r3, #97	; 0x61
 8003a14:	2201      	movs	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	212c      	movs	r1, #44	; 0x2c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	335c      	adds	r3, #92	; 0x5c
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a36:	461a      	mov	r2, r3
 8003a38:	2301      	movs	r3, #1
 8003a3a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	212c      	movs	r1, #44	; 0x2c
 8003a42:	fb01 f303 	mul.w	r3, r1, r3
 8003a46:	4413      	add	r3, r2
 8003a48:	333f      	adds	r3, #63	; 0x3f
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d009      	beq.n	8003a64 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	212c      	movs	r1, #44	; 0x2c
 8003a56:	fb01 f303 	mul.w	r3, r1, r3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	333f      	adds	r3, #63	; 0x3f
 8003a5e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d121      	bne.n	8003aa8 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f006 fb5d 	bl	800a14e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	6093      	str	r3, [r2, #8]
 8003aa6:	e066      	b.n	8003b76 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	333f      	adds	r3, #63	; 0x3f
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d127      	bne.n	8003b0c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	0151      	lsls	r1, r2, #5
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	440a      	add	r2, r1
 8003ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ad6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ada:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	212c      	movs	r1, #44	; 0x2c
 8003ae2:	fb01 f303 	mul.w	r3, r1, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3360      	adds	r3, #96	; 0x60
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	b2d9      	uxtb	r1, r3
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	202c      	movs	r0, #44	; 0x2c
 8003af8:	fb00 f303 	mul.w	r3, r0, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	3360      	adds	r3, #96	; 0x60
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f008 fe19 	bl	800c73c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b0a:	e034      	b.n	8003b76 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	333f      	adds	r3, #63	; 0x3f
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d12a      	bne.n	8003b76 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	212c      	movs	r1, #44	; 0x2c
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3360      	adds	r3, #96	; 0x60
 8003b2e:	2201      	movs	r2, #1
 8003b30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	212c      	movs	r1, #44	; 0x2c
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3354      	adds	r3, #84	; 0x54
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	f083 0301 	eor.w	r3, r3, #1
 8003b46:	b2d8      	uxtb	r0, r3
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	212c      	movs	r1, #44	; 0x2c
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	4413      	add	r3, r2
 8003b54:	3354      	adds	r3, #84	; 0x54
 8003b56:	4602      	mov	r2, r0
 8003b58:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	b2d9      	uxtb	r1, r3
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	202c      	movs	r0, #44	; 0x2c
 8003b64:	fb00 f303 	mul.w	r3, r0, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3360      	adds	r3, #96	; 0x60
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f008 fde3 	bl	800c73c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d12b      	bne.n	8003bd6 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	212c      	movs	r1, #44	; 0x2c
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	4413      	add	r3, r2
 8003b8a:	3348      	adds	r3, #72	; 0x48
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	202c      	movs	r0, #44	; 0x2c
 8003b94:	fb00 f202 	mul.w	r2, r0, r2
 8003b98:	440a      	add	r2, r1
 8003b9a:	3240      	adds	r2, #64	; 0x40
 8003b9c:	8812      	ldrh	r2, [r2, #0]
 8003b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 81be 	beq.w	8003f28 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3354      	adds	r3, #84	; 0x54
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	f083 0301 	eor.w	r3, r3, #1
 8003bc0:	b2d8      	uxtb	r0, r3
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	212c      	movs	r1, #44	; 0x2c
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	3354      	adds	r3, #84	; 0x54
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	701a      	strb	r2, [r3, #0]
}
 8003bd4:	e1a8      	b.n	8003f28 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	212c      	movs	r1, #44	; 0x2c
 8003bdc:	fb01 f303 	mul.w	r3, r1, r3
 8003be0:	4413      	add	r3, r2
 8003be2:	3354      	adds	r3, #84	; 0x54
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	f083 0301 	eor.w	r3, r3, #1
 8003bea:	b2d8      	uxtb	r0, r3
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3354      	adds	r3, #84	; 0x54
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	701a      	strb	r2, [r3, #0]
}
 8003bfe:	e193      	b.n	8003f28 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	f040 8106 	bne.w	8003e24 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	0151      	lsls	r1, r2, #5
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c32:	f023 0302 	bic.w	r3, r3, #2
 8003c36:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	3361      	adds	r3, #97	; 0x61
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d109      	bne.n	8003c60 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	3360      	adds	r3, #96	; 0x60
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e0c9      	b.n	8003df4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3361      	adds	r3, #97	; 0x61
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b05      	cmp	r3, #5
 8003c72:	d109      	bne.n	8003c88 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3360      	adds	r3, #96	; 0x60
 8003c82:	2205      	movs	r2, #5
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	e0b5      	b.n	8003df4 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	3361      	adds	r3, #97	; 0x61
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b06      	cmp	r3, #6
 8003c9a:	d009      	beq.n	8003cb0 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	212c      	movs	r1, #44	; 0x2c
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3361      	adds	r3, #97	; 0x61
 8003caa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d150      	bne.n	8003d52 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	335c      	adds	r3, #92	; 0x5c
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	202c      	movs	r0, #44	; 0x2c
 8003cc8:	fb00 f303 	mul.w	r3, r0, r3
 8003ccc:	440b      	add	r3, r1
 8003cce:	335c      	adds	r3, #92	; 0x5c
 8003cd0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	212c      	movs	r1, #44	; 0x2c
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	335c      	adds	r3, #92	; 0x5c
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d912      	bls.n	8003d0c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	212c      	movs	r1, #44	; 0x2c
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	335c      	adds	r3, #92	; 0x5c
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	212c      	movs	r1, #44	; 0x2c
 8003cfe:	fb01 f303 	mul.w	r3, r1, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	3360      	adds	r3, #96	; 0x60
 8003d06:	2204      	movs	r2, #4
 8003d08:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d0a:	e073      	b.n	8003df4 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	212c      	movs	r1, #44	; 0x2c
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	4413      	add	r3, r2
 8003d18:	3360      	adds	r3, #96	; 0x60
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d34:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d3c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d50:	e050      	b.n	8003df4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	212c      	movs	r1, #44	; 0x2c
 8003d58:	fb01 f303 	mul.w	r3, r1, r3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3361      	adds	r3, #97	; 0x61
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d122      	bne.n	8003dac <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	212c      	movs	r1, #44	; 0x2c
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
 8003d70:	4413      	add	r3, r2
 8003d72:	3360      	adds	r3, #96	; 0x60
 8003d74:	2202      	movs	r2, #2
 8003d76:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d8e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d96:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da4:	461a      	mov	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e023      	b.n	8003df4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	212c      	movs	r1, #44	; 0x2c
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	3361      	adds	r3, #97	; 0x61
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b07      	cmp	r3, #7
 8003dbe:	d119      	bne.n	8003df4 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	212c      	movs	r1, #44	; 0x2c
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	335c      	adds	r3, #92	; 0x5c
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	202c      	movs	r0, #44	; 0x2c
 8003dd8:	fb00 f303 	mul.w	r3, r0, r3
 8003ddc:	440b      	add	r3, r1
 8003dde:	335c      	adds	r3, #92	; 0x5c
 8003de0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	212c      	movs	r1, #44	; 0x2c
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	3360      	adds	r3, #96	; 0x60
 8003df0:	2204      	movs	r2, #4
 8003df2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e00:	461a      	mov	r2, r3
 8003e02:	2302      	movs	r3, #2
 8003e04:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	b2d9      	uxtb	r1, r3
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	202c      	movs	r0, #44	; 0x2c
 8003e10:	fb00 f303 	mul.w	r3, r0, r3
 8003e14:	4413      	add	r3, r2
 8003e16:	3360      	adds	r3, #96	; 0x60
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f008 fc8d 	bl	800c73c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e22:	e081      	b.n	8003f28 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b10      	cmp	r3, #16
 8003e38:	d176      	bne.n	8003f28 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	212c      	movs	r1, #44	; 0x2c
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	4413      	add	r3, r2
 8003e46:	333f      	adds	r3, #63	; 0x3f
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d121      	bne.n	8003e92 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	212c      	movs	r1, #44	; 0x2c
 8003e54:	fb01 f303 	mul.w	r3, r1, r3
 8003e58:	4413      	add	r3, r2
 8003e5a:	335c      	adds	r3, #92	; 0x5c
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	0151      	lsls	r1, r2, #5
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	440a      	add	r2, r1
 8003e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e7a:	f043 0302 	orr.w	r3, r3, #2
 8003e7e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	4611      	mov	r1, r2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f006 f95f 	bl	800a14e <USB_HC_Halt>
 8003e90:	e041      	b.n	8003f16 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	212c      	movs	r1, #44	; 0x2c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	333f      	adds	r3, #63	; 0x3f
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	212c      	movs	r1, #44	; 0x2c
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	333f      	adds	r3, #63	; 0x3f
 8003eb4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d12d      	bne.n	8003f16 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	212c      	movs	r1, #44	; 0x2c
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	335c      	adds	r3, #92	; 0x5c
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d120      	bne.n	8003f16 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	212c      	movs	r1, #44	; 0x2c
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	4413      	add	r3, r2
 8003ee0:	3361      	adds	r3, #97	; 0x61
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f00:	f043 0302 	orr.w	r3, r3, #2
 8003f04:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f006 f91c 	bl	800a14e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f22:	461a      	mov	r2, r3
 8003f24:	2310      	movs	r3, #16
 8003f26:	6093      	str	r3, [r2, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d119      	bne.n	8003f94 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2304      	movs	r3, #4
 8003f70:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	0151      	lsls	r1, r2, #5
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	440a      	add	r2, r1
 8003f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f8c:	f043 0302 	orr.w	r3, r3, #2
 8003f90:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003f92:	e3c6      	b.n	8004722 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d13e      	bne.n	8004028 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2320      	movs	r3, #32
 8003fba:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	212c      	movs	r1, #44	; 0x2c
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	333d      	adds	r3, #61	; 0x3d
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	f040 83a8 	bne.w	8004722 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	212c      	movs	r1, #44	; 0x2c
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	333d      	adds	r3, #61	; 0x3d
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	212c      	movs	r1, #44	; 0x2c
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	3360      	adds	r3, #96	; 0x60
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	0151      	lsls	r1, r2, #5
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	440a      	add	r2, r1
 800400c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004010:	f043 0302 	orr.w	r3, r3, #2
 8004014:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f006 f894 	bl	800a14e <USB_HC_Halt>
}
 8004026:	e37c      	b.n	8004722 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403e:	d122      	bne.n	8004086 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	4413      	add	r3, r2
 8004048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	0151      	lsls	r1, r2, #5
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	440a      	add	r2, r1
 8004056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800405a:	f043 0302 	orr.w	r3, r3, #2
 800405e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	4611      	mov	r1, r2
 800406a:	4618      	mov	r0, r3
 800406c:	f006 f86f 	bl	800a14e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	4413      	add	r3, r2
 8004078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407c:	461a      	mov	r2, r3
 800407e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004082:	6093      	str	r3, [r2, #8]
}
 8004084:	e34d      	b.n	8004722 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	4413      	add	r3, r2
 800408e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d150      	bne.n	800413e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	212c      	movs	r1, #44	; 0x2c
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	335c      	adds	r3, #92	; 0x5c
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c0:	2b40      	cmp	r3, #64	; 0x40
 80040c2:	d111      	bne.n	80040e8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	333d      	adds	r3, #61	; 0x3d
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e2:	461a      	mov	r2, r3
 80040e4:	2340      	movs	r3, #64	; 0x40
 80040e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	0151      	lsls	r1, r2, #5
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	440a      	add	r2, r1
 80040fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004102:	f043 0302 	orr.w	r3, r3, #2
 8004106:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	4611      	mov	r1, r2
 8004112:	4618      	mov	r0, r3
 8004114:	f006 f81b 	bl	800a14e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	4413      	add	r3, r2
 8004120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004124:	461a      	mov	r2, r3
 8004126:	2301      	movs	r3, #1
 8004128:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	212c      	movs	r1, #44	; 0x2c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	3361      	adds	r3, #97	; 0x61
 8004138:	2201      	movs	r2, #1
 800413a:	701a      	strb	r2, [r3, #0]
}
 800413c:	e2f1      	b.n	8004722 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d13c      	bne.n	80041ce <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	212c      	movs	r1, #44	; 0x2c
 800415a:	fb01 f303 	mul.w	r3, r1, r3
 800415e:	4413      	add	r3, r2
 8004160:	3361      	adds	r3, #97	; 0x61
 8004162:	2204      	movs	r2, #4
 8004164:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	212c      	movs	r1, #44	; 0x2c
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	4413      	add	r3, r2
 8004172:	333d      	adds	r3, #61	; 0x3d
 8004174:	2201      	movs	r2, #1
 8004176:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	212c      	movs	r1, #44	; 0x2c
 800417e:	fb01 f303 	mul.w	r3, r1, r3
 8004182:	4413      	add	r3, r2
 8004184:	335c      	adds	r3, #92	; 0x5c
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	4413      	add	r3, r2
 8004192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041a4:	f043 0302 	orr.w	r3, r3, #2
 80041a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f005 ffca 	bl	800a14e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	461a      	mov	r2, r3
 80041c8:	2340      	movs	r3, #64	; 0x40
 80041ca:	6093      	str	r3, [r2, #8]
}
 80041cc:	e2a9      	b.n	8004722 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d12a      	bne.n	800423a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f0:	461a      	mov	r2, r3
 80041f2:	2308      	movs	r3, #8
 80041f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	0151      	lsls	r1, r2, #5
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	440a      	add	r2, r1
 800420c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004210:	f043 0302 	orr.w	r3, r3, #2
 8004214:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f005 ff94 	bl	800a14e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	212c      	movs	r1, #44	; 0x2c
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	3361      	adds	r3, #97	; 0x61
 8004234:	2205      	movs	r2, #5
 8004236:	701a      	strb	r2, [r3, #0]
}
 8004238:	e273      	b.n	8004722 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4413      	add	r3, r2
 8004242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b10      	cmp	r3, #16
 800424e:	d150      	bne.n	80042f2 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	212c      	movs	r1, #44	; 0x2c
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	4413      	add	r3, r2
 800425c:	335c      	adds	r3, #92	; 0x5c
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	212c      	movs	r1, #44	; 0x2c
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	4413      	add	r3, r2
 800426e:	3361      	adds	r3, #97	; 0x61
 8004270:	2203      	movs	r2, #3
 8004272:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	212c      	movs	r1, #44	; 0x2c
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	4413      	add	r3, r2
 8004280:	333d      	adds	r3, #61	; 0x3d
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d112      	bne.n	80042ae <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	212c      	movs	r1, #44	; 0x2c
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	333c      	adds	r3, #60	; 0x3c
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d108      	bne.n	80042ae <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	212c      	movs	r1, #44	; 0x2c
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	333d      	adds	r3, #61	; 0x3d
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	0151      	lsls	r1, r2, #5
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	440a      	add	r2, r1
 80042c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042c8:	f043 0302 	orr.w	r3, r3, #2
 80042cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f005 ff38 	bl	800a14e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ea:	461a      	mov	r2, r3
 80042ec:	2310      	movs	r3, #16
 80042ee:	6093      	str	r3, [r2, #8]
}
 80042f0:	e217      	b.n	8004722 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004304:	2b80      	cmp	r3, #128	; 0x80
 8004306:	d174      	bne.n	80043f2 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d121      	bne.n	8004354 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	212c      	movs	r1, #44	; 0x2c
 8004316:	fb01 f303 	mul.w	r3, r1, r3
 800431a:	4413      	add	r3, r2
 800431c:	3361      	adds	r3, #97	; 0x61
 800431e:	2206      	movs	r2, #6
 8004320:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	4413      	add	r3, r2
 800432a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	440a      	add	r2, r1
 8004338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f005 fefe 	bl	800a14e <USB_HC_Halt>
 8004352:	e044      	b.n	80043de <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	212c      	movs	r1, #44	; 0x2c
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	4413      	add	r3, r2
 8004360:	335c      	adds	r3, #92	; 0x5c
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	202c      	movs	r0, #44	; 0x2c
 800436c:	fb00 f303 	mul.w	r3, r0, r3
 8004370:	440b      	add	r3, r1
 8004372:	335c      	adds	r3, #92	; 0x5c
 8004374:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	212c      	movs	r1, #44	; 0x2c
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	4413      	add	r3, r2
 8004382:	335c      	adds	r3, #92	; 0x5c
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d920      	bls.n	80043cc <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	212c      	movs	r1, #44	; 0x2c
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	4413      	add	r3, r2
 8004396:	335c      	adds	r3, #92	; 0x5c
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	212c      	movs	r1, #44	; 0x2c
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	3360      	adds	r3, #96	; 0x60
 80043aa:	2204      	movs	r2, #4
 80043ac:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	b2d9      	uxtb	r1, r3
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	202c      	movs	r0, #44	; 0x2c
 80043b8:	fb00 f303 	mul.w	r3, r0, r3
 80043bc:	4413      	add	r3, r2
 80043be:	3360      	adds	r3, #96	; 0x60
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f008 f9b9 	bl	800c73c <HAL_HCD_HC_NotifyURBChange_Callback>
 80043ca:	e008      	b.n	80043de <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3360      	adds	r3, #96	; 0x60
 80043da:	2202      	movs	r2, #2
 80043dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ea:	461a      	mov	r2, r3
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	6093      	str	r3, [r2, #8]
}
 80043f0:	e197      	b.n	8004722 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004408:	d134      	bne.n	8004474 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	4413      	add	r3, r2
 8004412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	440a      	add	r2, r1
 8004420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004424:	f043 0302 	orr.w	r3, r3, #2
 8004428:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	4611      	mov	r1, r2
 8004434:	4618      	mov	r0, r3
 8004436:	f005 fe8a 	bl	800a14e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	4413      	add	r3, r2
 8004442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004446:	461a      	mov	r2, r3
 8004448:	2310      	movs	r3, #16
 800444a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	4413      	add	r3, r2
 8004454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004458:	461a      	mov	r2, r3
 800445a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800445e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	212c      	movs	r1, #44	; 0x2c
 8004466:	fb01 f303 	mul.w	r3, r1, r3
 800446a:	4413      	add	r3, r2
 800446c:	3361      	adds	r3, #97	; 0x61
 800446e:	2208      	movs	r2, #8
 8004470:	701a      	strb	r2, [r3, #0]
}
 8004472:	e156      	b.n	8004722 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	4413      	add	r3, r2
 800447c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b02      	cmp	r3, #2
 8004488:	f040 814b 	bne.w	8004722 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	4413      	add	r3, r2
 8004494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044a6:	f023 0302 	bic.w	r3, r3, #2
 80044aa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	212c      	movs	r1, #44	; 0x2c
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	3361      	adds	r3, #97	; 0x61
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d179      	bne.n	80045b4 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	212c      	movs	r1, #44	; 0x2c
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	3360      	adds	r3, #96	; 0x60
 80044ce:	2201      	movs	r2, #1
 80044d0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	212c      	movs	r1, #44	; 0x2c
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	4413      	add	r3, r2
 80044de:	333f      	adds	r3, #63	; 0x3f
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d00a      	beq.n	80044fc <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	212c      	movs	r1, #44	; 0x2c
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	333f      	adds	r3, #63	; 0x3f
 80044f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	f040 80fc 	bne.w	80046f4 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d142      	bne.n	800458a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	212c      	movs	r1, #44	; 0x2c
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	4413      	add	r3, r2
 8004510:	334c      	adds	r3, #76	; 0x4c
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80ed 	beq.w	80046f4 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	212c      	movs	r1, #44	; 0x2c
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	334c      	adds	r3, #76	; 0x4c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	202c      	movs	r0, #44	; 0x2c
 8004530:	fb00 f202 	mul.w	r2, r0, r2
 8004534:	440a      	add	r2, r1
 8004536:	3240      	adds	r2, #64	; 0x40
 8004538:	8812      	ldrh	r2, [r2, #0]
 800453a:	4413      	add	r3, r2
 800453c:	3b01      	subs	r3, #1
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	202c      	movs	r0, #44	; 0x2c
 8004544:	fb00 f202 	mul.w	r2, r0, r2
 8004548:	440a      	add	r2, r1
 800454a:	3240      	adds	r2, #64	; 0x40
 800454c:	8812      	ldrh	r2, [r2, #0]
 800454e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 80ca 	beq.w	80046f4 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	3355      	adds	r3, #85	; 0x55
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	f083 0301 	eor.w	r3, r3, #1
 8004574:	b2d8      	uxtb	r0, r3
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	212c      	movs	r1, #44	; 0x2c
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	4413      	add	r3, r2
 8004582:	3355      	adds	r3, #85	; 0x55
 8004584:	4602      	mov	r2, r0
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	e0b4      	b.n	80046f4 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	212c      	movs	r1, #44	; 0x2c
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	4413      	add	r3, r2
 8004596:	3355      	adds	r3, #85	; 0x55
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	f083 0301 	eor.w	r3, r3, #1
 800459e:	b2d8      	uxtb	r0, r3
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	212c      	movs	r1, #44	; 0x2c
 80045a6:	fb01 f303 	mul.w	r3, r1, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	3355      	adds	r3, #85	; 0x55
 80045ae:	4602      	mov	r2, r0
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e09f      	b.n	80046f4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	212c      	movs	r1, #44	; 0x2c
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	4413      	add	r3, r2
 80045c0:	3361      	adds	r3, #97	; 0x61
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d109      	bne.n	80045dc <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	212c      	movs	r1, #44	; 0x2c
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	3360      	adds	r3, #96	; 0x60
 80045d6:	2202      	movs	r2, #2
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	e08b      	b.n	80046f4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	3361      	adds	r3, #97	; 0x61
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d109      	bne.n	8004604 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	212c      	movs	r1, #44	; 0x2c
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	4413      	add	r3, r2
 80045fc:	3360      	adds	r3, #96	; 0x60
 80045fe:	2202      	movs	r2, #2
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	e077      	b.n	80046f4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	212c      	movs	r1, #44	; 0x2c
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	4413      	add	r3, r2
 8004610:	3361      	adds	r3, #97	; 0x61
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b05      	cmp	r3, #5
 8004616:	d109      	bne.n	800462c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	212c      	movs	r1, #44	; 0x2c
 800461e:	fb01 f303 	mul.w	r3, r1, r3
 8004622:	4413      	add	r3, r2
 8004624:	3360      	adds	r3, #96	; 0x60
 8004626:	2205      	movs	r2, #5
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	e063      	b.n	80046f4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	212c      	movs	r1, #44	; 0x2c
 8004632:	fb01 f303 	mul.w	r3, r1, r3
 8004636:	4413      	add	r3, r2
 8004638:	3361      	adds	r3, #97	; 0x61
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b06      	cmp	r3, #6
 800463e:	d009      	beq.n	8004654 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	212c      	movs	r1, #44	; 0x2c
 8004646:	fb01 f303 	mul.w	r3, r1, r3
 800464a:	4413      	add	r3, r2
 800464c:	3361      	adds	r3, #97	; 0x61
 800464e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004650:	2b08      	cmp	r3, #8
 8004652:	d14f      	bne.n	80046f4 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	212c      	movs	r1, #44	; 0x2c
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	4413      	add	r3, r2
 8004660:	335c      	adds	r3, #92	; 0x5c
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	202c      	movs	r0, #44	; 0x2c
 800466c:	fb00 f303 	mul.w	r3, r0, r3
 8004670:	440b      	add	r3, r1
 8004672:	335c      	adds	r3, #92	; 0x5c
 8004674:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	212c      	movs	r1, #44	; 0x2c
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	335c      	adds	r3, #92	; 0x5c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d912      	bls.n	80046b0 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	212c      	movs	r1, #44	; 0x2c
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	4413      	add	r3, r2
 8004696:	335c      	adds	r3, #92	; 0x5c
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	212c      	movs	r1, #44	; 0x2c
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	3360      	adds	r3, #96	; 0x60
 80046aa:	2204      	movs	r2, #4
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	e021      	b.n	80046f4 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	212c      	movs	r1, #44	; 0x2c
 80046b6:	fb01 f303 	mul.w	r3, r1, r3
 80046ba:	4413      	add	r3, r2
 80046bc:	3360      	adds	r3, #96	; 0x60
 80046be:	2202      	movs	r2, #2
 80046c0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046d8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046e0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ee:	461a      	mov	r2, r3
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004700:	461a      	mov	r2, r3
 8004702:	2302      	movs	r3, #2
 8004704:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	b2d9      	uxtb	r1, r3
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	202c      	movs	r0, #44	; 0x2c
 8004710:	fb00 f303 	mul.w	r3, r0, r3
 8004714:	4413      	add	r3, r2
 8004716:	3360      	adds	r3, #96	; 0x60
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f008 f80d 	bl	800c73c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004722:	bf00      	nop
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b08a      	sub	sp, #40	; 0x28
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	0c5b      	lsrs	r3, r3, #17
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800475e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d004      	beq.n	8004770 <HCD_RXQLVL_IRQHandler+0x46>
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b05      	cmp	r3, #5
 800476a:	f000 80a9 	beq.w	80048c0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800476e:	e0aa      	b.n	80048c6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80a6 	beq.w	80048c4 <HCD_RXQLVL_IRQHandler+0x19a>
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	212c      	movs	r1, #44	; 0x2c
 800477e:	fb01 f303 	mul.w	r3, r1, r3
 8004782:	4413      	add	r3, r2
 8004784:	3344      	adds	r3, #68	; 0x44
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 809b 	beq.w	80048c4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	212c      	movs	r1, #44	; 0x2c
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	4413      	add	r3, r2
 800479a:	3350      	adds	r3, #80	; 0x50
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	441a      	add	r2, r3
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	202c      	movs	r0, #44	; 0x2c
 80047a8:	fb00 f303 	mul.w	r3, r0, r3
 80047ac:	440b      	add	r3, r1
 80047ae:	334c      	adds	r3, #76	; 0x4c
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d87a      	bhi.n	80048ac <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	212c      	movs	r1, #44	; 0x2c
 80047c0:	fb01 f303 	mul.w	r3, r1, r3
 80047c4:	4413      	add	r3, r2
 80047c6:	3344      	adds	r3, #68	; 0x44
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	b292      	uxth	r2, r2
 80047ce:	4619      	mov	r1, r3
 80047d0:	f005 f832 	bl	8009838 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	212c      	movs	r1, #44	; 0x2c
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	4413      	add	r3, r2
 80047e0:	3344      	adds	r3, #68	; 0x44
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	441a      	add	r2, r3
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	202c      	movs	r0, #44	; 0x2c
 80047ee:	fb00 f303 	mul.w	r3, r0, r3
 80047f2:	440b      	add	r3, r1
 80047f4:	3344      	adds	r3, #68	; 0x44
 80047f6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	212c      	movs	r1, #44	; 0x2c
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	3350      	adds	r3, #80	; 0x50
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	441a      	add	r2, r3
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	202c      	movs	r0, #44	; 0x2c
 8004812:	fb00 f303 	mul.w	r3, r0, r3
 8004816:	440b      	add	r3, r1
 8004818:	3350      	adds	r3, #80	; 0x50
 800481a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	4413      	add	r3, r2
 8004824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	0cdb      	lsrs	r3, r3, #19
 800482c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004830:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	212c      	movs	r1, #44	; 0x2c
 8004838:	fb01 f303 	mul.w	r3, r1, r3
 800483c:	4413      	add	r3, r2
 800483e:	3340      	adds	r3, #64	; 0x40
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4293      	cmp	r3, r2
 8004848:	d13c      	bne.n	80048c4 <HCD_RXQLVL_IRQHandler+0x19a>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d039      	beq.n	80048c4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	4413      	add	r3, r2
 8004858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004866:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800486e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	4413      	add	r3, r2
 8004878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487c:	461a      	mov	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	212c      	movs	r1, #44	; 0x2c
 8004888:	fb01 f303 	mul.w	r3, r1, r3
 800488c:	4413      	add	r3, r2
 800488e:	3354      	adds	r3, #84	; 0x54
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	f083 0301 	eor.w	r3, r3, #1
 8004896:	b2d8      	uxtb	r0, r3
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	212c      	movs	r1, #44	; 0x2c
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	4413      	add	r3, r2
 80048a4:	3354      	adds	r3, #84	; 0x54
 80048a6:	4602      	mov	r2, r0
 80048a8:	701a      	strb	r2, [r3, #0]
      break;
 80048aa:	e00b      	b.n	80048c4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	212c      	movs	r1, #44	; 0x2c
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	3360      	adds	r3, #96	; 0x60
 80048ba:	2204      	movs	r2, #4
 80048bc:	701a      	strb	r2, [r3, #0]
      break;
 80048be:	e001      	b.n	80048c4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80048c0:	bf00      	nop
 80048c2:	e000      	b.n	80048c6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80048c4:	bf00      	nop
  }
}
 80048c6:	bf00      	nop
 80048c8:	3728      	adds	r7, #40	; 0x28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b086      	sub	sp, #24
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048fa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d10b      	bne.n	800491e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b01      	cmp	r3, #1
 800490e:	d102      	bne.n	8004916 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f007 fef7 	bl	800c704 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f043 0302 	orr.w	r3, r3, #2
 800491c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b08      	cmp	r3, #8
 8004926:	d132      	bne.n	800498e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f043 0308 	orr.w	r3, r3, #8
 800492e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b04      	cmp	r3, #4
 8004938:	d126      	bne.n	8004988 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d113      	bne.n	800496a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004948:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800494c:	d106      	bne.n	800495c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2102      	movs	r1, #2
 8004954:	4618      	mov	r0, r3
 8004956:	f005 f8d3 	bl	8009b00 <USB_InitFSLSPClkSel>
 800495a:	e011      	b.n	8004980 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2101      	movs	r1, #1
 8004962:	4618      	mov	r0, r3
 8004964:	f005 f8cc 	bl	8009b00 <USB_InitFSLSPClkSel>
 8004968:	e00a      	b.n	8004980 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d106      	bne.n	8004980 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004978:	461a      	mov	r2, r3
 800497a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800497e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f007 fee9 	bl	800c758 <HAL_HCD_PortEnabled_Callback>
 8004986:	e002      	b.n	800498e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f007 fef3 	bl	800c774 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b20      	cmp	r3, #32
 8004996:	d103      	bne.n	80049a0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f043 0320 	orr.w	r3, r3, #32
 800499e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049a6:	461a      	mov	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	6013      	str	r3, [r2, #0]
}
 80049ac:	bf00      	nop
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80049bc:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_PWREx_ConfigSupply+0x70>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d00a      	beq.n	80049de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049c8:	4b16      	ldr	r3, [pc, #88]	; (8004a24 <HAL_PWREx_ConfigSupply+0x70>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d001      	beq.n	80049da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e01f      	b.n	8004a1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	e01d      	b.n	8004a1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049de:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <HAL_PWREx_ConfigSupply+0x70>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f023 0207 	bic.w	r2, r3, #7
 80049e6:	490f      	ldr	r1, [pc, #60]	; (8004a24 <HAL_PWREx_ConfigSupply+0x70>)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049ee:	f7fc fda7 	bl	8001540 <HAL_GetTick>
 80049f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049f4:	e009      	b.n	8004a0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049f6:	f7fc fda3 	bl	8001540 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a04:	d901      	bls.n	8004a0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e007      	b.n	8004a1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <HAL_PWREx_ConfigSupply+0x70>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a16:	d1ee      	bne.n	80049f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	58024800 	.word	0x58024800

08004a28 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4a04      	ldr	r2, [pc, #16]	; (8004a44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a36:	60d3      	str	r3, [r2, #12]
}
 8004a38:	bf00      	nop
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	58024800 	.word	0x58024800

08004a48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08c      	sub	sp, #48	; 0x30
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e3ff      	b.n	800525a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8087 	beq.w	8004b76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a68:	4b99      	ldr	r3, [pc, #612]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a72:	4b97      	ldr	r3, [pc, #604]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	2b10      	cmp	r3, #16
 8004a7c:	d007      	beq.n	8004a8e <HAL_RCC_OscConfig+0x46>
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	2b18      	cmp	r3, #24
 8004a82:	d110      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x5e>
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d10b      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8e:	4b90      	ldr	r3, [pc, #576]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d06c      	beq.n	8004b74 <HAL_RCC_OscConfig+0x12c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d168      	bne.n	8004b74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e3d9      	b.n	800525a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aae:	d106      	bne.n	8004abe <HAL_RCC_OscConfig+0x76>
 8004ab0:	4b87      	ldr	r3, [pc, #540]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a86      	ldr	r2, [pc, #536]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	e02e      	b.n	8004b1c <HAL_RCC_OscConfig+0xd4>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x98>
 8004ac6:	4b82      	ldr	r3, [pc, #520]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a81      	ldr	r2, [pc, #516]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	4b7f      	ldr	r3, [pc, #508]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a7e      	ldr	r2, [pc, #504]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e01d      	b.n	8004b1c <HAL_RCC_OscConfig+0xd4>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ae8:	d10c      	bne.n	8004b04 <HAL_RCC_OscConfig+0xbc>
 8004aea:	4b79      	ldr	r3, [pc, #484]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a78      	ldr	r2, [pc, #480]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	4b76      	ldr	r3, [pc, #472]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a75      	ldr	r2, [pc, #468]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e00b      	b.n	8004b1c <HAL_RCC_OscConfig+0xd4>
 8004b04:	4b72      	ldr	r3, [pc, #456]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a71      	ldr	r2, [pc, #452]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	4b6f      	ldr	r3, [pc, #444]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a6e      	ldr	r2, [pc, #440]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d013      	beq.n	8004b4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b24:	f7fc fd0c 	bl	8001540 <HAL_GetTick>
 8004b28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b2c:	f7fc fd08 	bl	8001540 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b64      	cmp	r3, #100	; 0x64
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e38d      	b.n	800525a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b3e:	4b64      	ldr	r3, [pc, #400]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0xe4>
 8004b4a:	e014      	b.n	8004b76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fc fcf8 	bl	8001540 <HAL_GetTick>
 8004b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b54:	f7fc fcf4 	bl	8001540 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b64      	cmp	r3, #100	; 0x64
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e379      	b.n	800525a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b66:	4b5a      	ldr	r3, [pc, #360]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x10c>
 8004b72:	e000      	b.n	8004b76 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80ae 	beq.w	8004ce0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b84:	4b52      	ldr	r3, [pc, #328]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b8e:	4b50      	ldr	r3, [pc, #320]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <HAL_RCC_OscConfig+0x162>
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	2b18      	cmp	r3, #24
 8004b9e:	d13a      	bne.n	8004c16 <HAL_RCC_OscConfig+0x1ce>
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d135      	bne.n	8004c16 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004baa:	4b49      	ldr	r3, [pc, #292]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x17a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e34b      	b.n	800525a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc2:	f7fc fced 	bl	80015a0 <HAL_GetREVID>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d817      	bhi.n	8004c00 <HAL_RCC_OscConfig+0x1b8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d108      	bne.n	8004bea <HAL_RCC_OscConfig+0x1a2>
 8004bd8:	4b3d      	ldr	r3, [pc, #244]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004be0:	4a3b      	ldr	r2, [pc, #236]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004be8:	e07a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bea:	4b39      	ldr	r3, [pc, #228]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	031b      	lsls	r3, r3, #12
 8004bf8:	4935      	ldr	r1, [pc, #212]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bfe:	e06f      	b.n	8004ce0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c00:	4b33      	ldr	r3, [pc, #204]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	061b      	lsls	r3, r3, #24
 8004c0e:	4930      	ldr	r1, [pc, #192]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c14:	e064      	b.n	8004ce0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d045      	beq.n	8004caa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c1e:	4b2c      	ldr	r3, [pc, #176]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 0219 	bic.w	r2, r3, #25
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	4929      	ldr	r1, [pc, #164]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c30:	f7fc fc86 	bl	8001540 <HAL_GetTick>
 8004c34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c38:	f7fc fc82 	bl	8001540 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e307      	b.n	800525a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c4a:	4b21      	ldr	r3, [pc, #132]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c56:	f7fc fca3 	bl	80015a0 <HAL_GetREVID>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d817      	bhi.n	8004c94 <HAL_RCC_OscConfig+0x24c>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d108      	bne.n	8004c7e <HAL_RCC_OscConfig+0x236>
 8004c6c:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c74:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c7a:	6053      	str	r3, [r2, #4]
 8004c7c:	e030      	b.n	8004ce0 <HAL_RCC_OscConfig+0x298>
 8004c7e:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	031b      	lsls	r3, r3, #12
 8004c8c:	4910      	ldr	r1, [pc, #64]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	604b      	str	r3, [r1, #4]
 8004c92:	e025      	b.n	8004ce0 <HAL_RCC_OscConfig+0x298>
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	061b      	lsls	r3, r3, #24
 8004ca2:	490b      	ldr	r1, [pc, #44]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
 8004ca8:	e01a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004caa:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <HAL_RCC_OscConfig+0x288>)
 8004cb0:	f023 0301 	bic.w	r3, r3, #1
 8004cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb6:	f7fc fc43 	bl	8001540 <HAL_GetTick>
 8004cba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cbe:	f7fc fc3f 	bl	8001540 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d903      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e2c4      	b.n	800525a <HAL_RCC_OscConfig+0x812>
 8004cd0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cd4:	4ba4      	ldr	r3, [pc, #656]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1ee      	bne.n	8004cbe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80a9 	beq.w	8004e40 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cee:	4b9e      	ldr	r3, [pc, #632]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cf6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cf8:	4b9b      	ldr	r3, [pc, #620]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d007      	beq.n	8004d14 <HAL_RCC_OscConfig+0x2cc>
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	2b18      	cmp	r3, #24
 8004d08:	d13a      	bne.n	8004d80 <HAL_RCC_OscConfig+0x338>
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f003 0303 	and.w	r3, r3, #3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d135      	bne.n	8004d80 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d14:	4b94      	ldr	r3, [pc, #592]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_OscConfig+0x2e4>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	2b80      	cmp	r3, #128	; 0x80
 8004d26:	d001      	beq.n	8004d2c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e296      	b.n	800525a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d2c:	f7fc fc38 	bl	80015a0 <HAL_GetREVID>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d817      	bhi.n	8004d6a <HAL_RCC_OscConfig+0x322>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d108      	bne.n	8004d54 <HAL_RCC_OscConfig+0x30c>
 8004d42:	4b89      	ldr	r3, [pc, #548]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d4a:	4a87      	ldr	r2, [pc, #540]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d50:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d52:	e075      	b.n	8004e40 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d54:	4b84      	ldr	r3, [pc, #528]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	069b      	lsls	r3, r3, #26
 8004d62:	4981      	ldr	r1, [pc, #516]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d68:	e06a      	b.n	8004e40 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d6a:	4b7f      	ldr	r3, [pc, #508]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	061b      	lsls	r3, r3, #24
 8004d78:	497b      	ldr	r1, [pc, #492]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d7e:	e05f      	b.n	8004e40 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d042      	beq.n	8004e0e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d88:	4b77      	ldr	r3, [pc, #476]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a76      	ldr	r2, [pc, #472]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fc fbd4 	bl	8001540 <HAL_GetTick>
 8004d98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d9c:	f7fc fbd0 	bl	8001540 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e255      	b.n	800525a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dae:	4b6e      	ldr	r3, [pc, #440]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dba:	f7fc fbf1 	bl	80015a0 <HAL_GetREVID>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d817      	bhi.n	8004df8 <HAL_RCC_OscConfig+0x3b0>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d108      	bne.n	8004de2 <HAL_RCC_OscConfig+0x39a>
 8004dd0:	4b65      	ldr	r3, [pc, #404]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004dd8:	4a63      	ldr	r2, [pc, #396]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004dda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dde:	6053      	str	r3, [r2, #4]
 8004de0:	e02e      	b.n	8004e40 <HAL_RCC_OscConfig+0x3f8>
 8004de2:	4b61      	ldr	r3, [pc, #388]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	069b      	lsls	r3, r3, #26
 8004df0:	495d      	ldr	r1, [pc, #372]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	604b      	str	r3, [r1, #4]
 8004df6:	e023      	b.n	8004e40 <HAL_RCC_OscConfig+0x3f8>
 8004df8:	4b5b      	ldr	r3, [pc, #364]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	061b      	lsls	r3, r3, #24
 8004e06:	4958      	ldr	r1, [pc, #352]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60cb      	str	r3, [r1, #12]
 8004e0c:	e018      	b.n	8004e40 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e0e:	4b56      	ldr	r3, [pc, #344]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a55      	ldr	r2, [pc, #340]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1a:	f7fc fb91 	bl	8001540 <HAL_GetTick>
 8004e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e22:	f7fc fb8d 	bl	8001540 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e212      	b.n	800525a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e34:	4b4c      	ldr	r3, [pc, #304]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1f0      	bne.n	8004e22 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d036      	beq.n	8004eba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d019      	beq.n	8004e88 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e54:	4b44      	ldr	r3, [pc, #272]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e58:	4a43      	ldr	r2, [pc, #268]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e60:	f7fc fb6e 	bl	8001540 <HAL_GetTick>
 8004e64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e68:	f7fc fb6a 	bl	8001540 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e1ef      	b.n	800525a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e7a:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x420>
 8004e86:	e018      	b.n	8004eba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e88:	4b37      	ldr	r3, [pc, #220]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8c:	4a36      	ldr	r2, [pc, #216]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004e8e:	f023 0301 	bic.w	r3, r3, #1
 8004e92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e94:	f7fc fb54 	bl	8001540 <HAL_GetTick>
 8004e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e9c:	f7fc fb50 	bl	8001540 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e1d5      	b.n	800525a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004eae:	4b2e      	ldr	r3, [pc, #184]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d036      	beq.n	8004f34 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d019      	beq.n	8004f02 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ece:	4b26      	ldr	r3, [pc, #152]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a25      	ldr	r2, [pc, #148]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004ed4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ed8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004eda:	f7fc fb31 	bl	8001540 <HAL_GetTick>
 8004ede:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004ee2:	f7fc fb2d 	bl	8001540 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e1b2      	b.n	800525a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ef4:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x49a>
 8004f00:	e018      	b.n	8004f34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f02:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004f08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f0e:	f7fc fb17 	bl	8001540 <HAL_GetTick>
 8004f12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f16:	f7fc fb13 	bl	8001540 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e198      	b.n	800525a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f28:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <HAL_RCC_OscConfig+0x520>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1f0      	bne.n	8004f16 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8085 	beq.w	800504c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f42:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <HAL_RCC_OscConfig+0x524>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <HAL_RCC_OscConfig+0x524>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f4e:	f7fc faf7 	bl	8001540 <HAL_GetTick>
 8004f52:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f54:	e00c      	b.n	8004f70 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f56:	f7fc faf3 	bl	8001540 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b64      	cmp	r3, #100	; 0x64
 8004f62:	d905      	bls.n	8004f70 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e178      	b.n	800525a <HAL_RCC_OscConfig+0x812>
 8004f68:	58024400 	.word	0x58024400
 8004f6c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f70:	4b96      	ldr	r3, [pc, #600]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0ec      	beq.n	8004f56 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d106      	bne.n	8004f92 <HAL_RCC_OscConfig+0x54a>
 8004f84:	4b92      	ldr	r3, [pc, #584]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	4a91      	ldr	r2, [pc, #580]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f90:	e02d      	b.n	8004fee <HAL_RCC_OscConfig+0x5a6>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x56c>
 8004f9a:	4b8d      	ldr	r3, [pc, #564]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	4a8c      	ldr	r2, [pc, #560]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa6:	4b8a      	ldr	r3, [pc, #552]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	4a89      	ldr	r2, [pc, #548]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb2:	e01c      	b.n	8004fee <HAL_RCC_OscConfig+0x5a6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b05      	cmp	r3, #5
 8004fba:	d10c      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x58e>
 8004fbc:	4b84      	ldr	r3, [pc, #528]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc0:	4a83      	ldr	r2, [pc, #524]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004fc2:	f043 0304 	orr.w	r3, r3, #4
 8004fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc8:	4b81      	ldr	r3, [pc, #516]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fcc:	4a80      	ldr	r2, [pc, #512]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd4:	e00b      	b.n	8004fee <HAL_RCC_OscConfig+0x5a6>
 8004fd6:	4b7e      	ldr	r3, [pc, #504]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fda:	4a7d      	ldr	r2, [pc, #500]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe2:	4b7b      	ldr	r3, [pc, #492]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe6:	4a7a      	ldr	r2, [pc, #488]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8004fe8:	f023 0304 	bic.w	r3, r3, #4
 8004fec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d015      	beq.n	8005022 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff6:	f7fc faa3 	bl	8001540 <HAL_GetTick>
 8004ffa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ffc:	e00a      	b.n	8005014 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ffe:	f7fc fa9f 	bl	8001540 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	f241 3288 	movw	r2, #5000	; 0x1388
 800500c:	4293      	cmp	r3, r2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e122      	b.n	800525a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005014:	4b6e      	ldr	r3, [pc, #440]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0ee      	beq.n	8004ffe <HAL_RCC_OscConfig+0x5b6>
 8005020:	e014      	b.n	800504c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005022:	f7fc fa8d 	bl	8001540 <HAL_GetTick>
 8005026:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005028:	e00a      	b.n	8005040 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502a:	f7fc fa89 	bl	8001540 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	f241 3288 	movw	r2, #5000	; 0x1388
 8005038:	4293      	cmp	r3, r2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e10c      	b.n	800525a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005040:	4b63      	ldr	r3, [pc, #396]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1ee      	bne.n	800502a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8101 	beq.w	8005258 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005056:	4b5e      	ldr	r3, [pc, #376]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800505e:	2b18      	cmp	r3, #24
 8005060:	f000 80bc 	beq.w	80051dc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	2b02      	cmp	r3, #2
 800506a:	f040 8095 	bne.w	8005198 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506e:	4b58      	ldr	r3, [pc, #352]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a57      	ldr	r2, [pc, #348]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507a:	f7fc fa61 	bl	8001540 <HAL_GetTick>
 800507e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005082:	f7fc fa5d 	bl	8001540 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e0e2      	b.n	800525a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005094:	4b4e      	ldr	r3, [pc, #312]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f0      	bne.n	8005082 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050a0:	4b4b      	ldr	r3, [pc, #300]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 80050a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050a4:	4b4b      	ldr	r3, [pc, #300]	; (80051d4 <HAL_RCC_OscConfig+0x78c>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80050b0:	0112      	lsls	r2, r2, #4
 80050b2:	430a      	orrs	r2, r1
 80050b4:	4946      	ldr	r1, [pc, #280]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	628b      	str	r3, [r1, #40]	; 0x28
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	3b01      	subs	r3, #1
 80050c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c8:	3b01      	subs	r3, #1
 80050ca:	025b      	lsls	r3, r3, #9
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	3b01      	subs	r3, #1
 80050d6:	041b      	lsls	r3, r3, #16
 80050d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e2:	3b01      	subs	r3, #1
 80050e4:	061b      	lsls	r3, r3, #24
 80050e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050ea:	4939      	ldr	r1, [pc, #228]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80050f0:	4b37      	ldr	r3, [pc, #220]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	4a36      	ldr	r2, [pc, #216]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050fc:	4b34      	ldr	r3, [pc, #208]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 80050fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005100:	4b35      	ldr	r3, [pc, #212]	; (80051d8 <HAL_RCC_OscConfig+0x790>)
 8005102:	4013      	ands	r3, r2
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005108:	00d2      	lsls	r2, r2, #3
 800510a:	4931      	ldr	r1, [pc, #196]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 800510c:	4313      	orrs	r3, r2
 800510e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005110:	4b2f      	ldr	r3, [pc, #188]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	f023 020c 	bic.w	r2, r3, #12
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	492c      	ldr	r1, [pc, #176]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 800511e:	4313      	orrs	r3, r2
 8005120:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005122:	4b2b      	ldr	r3, [pc, #172]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	f023 0202 	bic.w	r2, r3, #2
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512e:	4928      	ldr	r1, [pc, #160]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005130:	4313      	orrs	r3, r2
 8005132:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005134:	4b26      	ldr	r3, [pc, #152]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	4a25      	ldr	r2, [pc, #148]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 800513a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005140:	4b23      	ldr	r3, [pc, #140]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	4a22      	ldr	r2, [pc, #136]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800514a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800514c:	4b20      	ldr	r3, [pc, #128]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005152:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005158:	4b1d      	ldr	r3, [pc, #116]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	4a1c      	ldr	r2, [pc, #112]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005164:	4b1a      	ldr	r3, [pc, #104]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a19      	ldr	r2, [pc, #100]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 800516a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800516e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005170:	f7fc f9e6 	bl	8001540 <HAL_GetTick>
 8005174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005178:	f7fc f9e2 	bl	8001540 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e067      	b.n	800525a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800518a:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x730>
 8005196:	e05f      	b.n	8005258 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005198:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a0c      	ldr	r2, [pc, #48]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 800519e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fc f9cc 	bl	8001540 <HAL_GetTick>
 80051a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ac:	f7fc f9c8 	bl	8001540 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e04d      	b.n	800525a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051be:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x764>
 80051ca:	e045      	b.n	8005258 <HAL_RCC_OscConfig+0x810>
 80051cc:	58024800 	.word	0x58024800
 80051d0:	58024400 	.word	0x58024400
 80051d4:	fffffc0c 	.word	0xfffffc0c
 80051d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051dc:	4b21      	ldr	r3, [pc, #132]	; (8005264 <HAL_RCC_OscConfig+0x81c>)
 80051de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051e2:	4b20      	ldr	r3, [pc, #128]	; (8005264 <HAL_RCC_OscConfig+0x81c>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d031      	beq.n	8005254 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f003 0203 	and.w	r2, r3, #3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d12a      	bne.n	8005254 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d122      	bne.n	8005254 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800521a:	429a      	cmp	r2, r3
 800521c:	d11a      	bne.n	8005254 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	0a5b      	lsrs	r3, r3, #9
 8005222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800522c:	429a      	cmp	r2, r3
 800522e:	d111      	bne.n	8005254 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	0c1b      	lsrs	r3, r3, #16
 8005234:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800523e:	429a      	cmp	r2, r3
 8005240:	d108      	bne.n	8005254 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	0e1b      	lsrs	r3, r3, #24
 8005246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005250:	429a      	cmp	r2, r3
 8005252:	d001      	beq.n	8005258 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3730      	adds	r7, #48	; 0x30
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	58024400 	.word	0x58024400

08005268 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e19c      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800527c:	4b8a      	ldr	r3, [pc, #552]	; (80054a8 <HAL_RCC_ClockConfig+0x240>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d910      	bls.n	80052ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528a:	4b87      	ldr	r3, [pc, #540]	; (80054a8 <HAL_RCC_ClockConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f023 020f 	bic.w	r2, r3, #15
 8005292:	4985      	ldr	r1, [pc, #532]	; (80054a8 <HAL_RCC_ClockConfig+0x240>)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	4313      	orrs	r3, r2
 8005298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800529a:	4b83      	ldr	r3, [pc, #524]	; (80054a8 <HAL_RCC_ClockConfig+0x240>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e184      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d010      	beq.n	80052da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	4b7b      	ldr	r3, [pc, #492]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d908      	bls.n	80052da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052c8:	4b78      	ldr	r3, [pc, #480]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	4975      	ldr	r1, [pc, #468]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d010      	beq.n	8005308 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	4b70      	ldr	r3, [pc, #448]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d908      	bls.n	8005308 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052f6:	4b6d      	ldr	r3, [pc, #436]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	496a      	ldr	r1, [pc, #424]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005304:	4313      	orrs	r3, r2
 8005306:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	d010      	beq.n	8005336 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699a      	ldr	r2, [r3, #24]
 8005318:	4b64      	ldr	r3, [pc, #400]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005320:	429a      	cmp	r2, r3
 8005322:	d908      	bls.n	8005336 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005324:	4b61      	ldr	r3, [pc, #388]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	495e      	ldr	r1, [pc, #376]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005332:	4313      	orrs	r3, r2
 8005334:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b00      	cmp	r3, #0
 8005340:	d010      	beq.n	8005364 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69da      	ldr	r2, [r3, #28]
 8005346:	4b59      	ldr	r3, [pc, #356]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800534e:	429a      	cmp	r2, r3
 8005350:	d908      	bls.n	8005364 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005352:	4b56      	ldr	r3, [pc, #344]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	4953      	ldr	r1, [pc, #332]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005360:	4313      	orrs	r3, r2
 8005362:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d010      	beq.n	8005392 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	4b4d      	ldr	r3, [pc, #308]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	429a      	cmp	r2, r3
 800537e:	d908      	bls.n	8005392 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005380:	4b4a      	ldr	r3, [pc, #296]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f023 020f 	bic.w	r2, r3, #15
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4947      	ldr	r1, [pc, #284]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 800538e:	4313      	orrs	r3, r2
 8005390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d055      	beq.n	800544a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800539e:	4b43      	ldr	r3, [pc, #268]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	4940      	ldr	r1, [pc, #256]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d107      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053b8:	4b3c      	ldr	r3, [pc, #240]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d121      	bne.n	8005408 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0f6      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d107      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053d0:	4b36      	ldr	r3, [pc, #216]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d115      	bne.n	8005408 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e0ea      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d107      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053e8:	4b30      	ldr	r3, [pc, #192]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d109      	bne.n	8005408 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0de      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053f8:	4b2c      	ldr	r3, [pc, #176]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e0d6      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005408:	4b28      	ldr	r3, [pc, #160]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f023 0207 	bic.w	r2, r3, #7
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4925      	ldr	r1, [pc, #148]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005416:	4313      	orrs	r3, r2
 8005418:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541a:	f7fc f891 	bl	8001540 <HAL_GetTick>
 800541e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005420:	e00a      	b.n	8005438 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005422:	f7fc f88d 	bl	8001540 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005430:	4293      	cmp	r3, r2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e0be      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005438:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	429a      	cmp	r2, r3
 8005448:	d1eb      	bne.n	8005422 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	4b14      	ldr	r3, [pc, #80]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	429a      	cmp	r2, r3
 8005464:	d208      	bcs.n	8005478 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005466:	4b11      	ldr	r3, [pc, #68]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f023 020f 	bic.w	r2, r3, #15
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	490e      	ldr	r1, [pc, #56]	; (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005474:	4313      	orrs	r3, r2
 8005476:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005478:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <HAL_RCC_ClockConfig+0x240>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d214      	bcs.n	80054b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005486:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <HAL_RCC_ClockConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f023 020f 	bic.w	r2, r3, #15
 800548e:	4906      	ldr	r1, [pc, #24]	; (80054a8 <HAL_RCC_ClockConfig+0x240>)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005496:	4b04      	ldr	r3, [pc, #16]	; (80054a8 <HAL_RCC_ClockConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e086      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
 80054a8:	52002000 	.word	0x52002000
 80054ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d010      	beq.n	80054de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d208      	bcs.n	80054de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054cc:	4b3c      	ldr	r3, [pc, #240]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	4939      	ldr	r1, [pc, #228]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d010      	beq.n	800550c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695a      	ldr	r2, [r3, #20]
 80054ee:	4b34      	ldr	r3, [pc, #208]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d208      	bcs.n	800550c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054fa:	4b31      	ldr	r3, [pc, #196]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	492e      	ldr	r1, [pc, #184]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 8005508:	4313      	orrs	r3, r2
 800550a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	d010      	beq.n	800553a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699a      	ldr	r2, [r3, #24]
 800551c:	4b28      	ldr	r3, [pc, #160]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005524:	429a      	cmp	r2, r3
 8005526:	d208      	bcs.n	800553a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005528:	4b25      	ldr	r3, [pc, #148]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	4922      	ldr	r1, [pc, #136]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 8005536:	4313      	orrs	r3, r2
 8005538:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d010      	beq.n	8005568 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69da      	ldr	r2, [r3, #28]
 800554a:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005552:	429a      	cmp	r2, r3
 8005554:	d208      	bcs.n	8005568 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005556:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	4917      	ldr	r1, [pc, #92]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 8005564:	4313      	orrs	r3, r2
 8005566:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005568:	f000 f834 	bl	80055d4 <HAL_RCC_GetSysClockFreq>
 800556c:	4602      	mov	r2, r0
 800556e:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	4912      	ldr	r1, [pc, #72]	; (80055c4 <HAL_RCC_ClockConfig+0x35c>)
 800557a:	5ccb      	ldrb	r3, [r1, r3]
 800557c:	f003 031f 	and.w	r3, r3, #31
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
 8005584:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005586:	4b0e      	ldr	r3, [pc, #56]	; (80055c0 <HAL_RCC_ClockConfig+0x358>)
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	4a0d      	ldr	r2, [pc, #52]	; (80055c4 <HAL_RCC_ClockConfig+0x35c>)
 8005590:	5cd3      	ldrb	r3, [r2, r3]
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
 800559c:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <HAL_RCC_ClockConfig+0x360>)
 800559e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055a0:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <HAL_RCC_ClockConfig+0x364>)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80055a6:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <HAL_RCC_ClockConfig+0x368>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fb ff7e 	bl	80014ac <HAL_InitTick>
 80055b0:	4603      	mov	r3, r0
 80055b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	58024400 	.word	0x58024400
 80055c4:	0800d634 	.word	0x0800d634
 80055c8:	24000004 	.word	0x24000004
 80055cc:	24000000 	.word	0x24000000
 80055d0:	24000008 	.word	0x24000008

080055d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b089      	sub	sp, #36	; 0x24
 80055d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055da:	4bb3      	ldr	r3, [pc, #716]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055e2:	2b18      	cmp	r3, #24
 80055e4:	f200 8155 	bhi.w	8005892 <HAL_RCC_GetSysClockFreq+0x2be>
 80055e8:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005655 	.word	0x08005655
 80055f4:	08005893 	.word	0x08005893
 80055f8:	08005893 	.word	0x08005893
 80055fc:	08005893 	.word	0x08005893
 8005600:	08005893 	.word	0x08005893
 8005604:	08005893 	.word	0x08005893
 8005608:	08005893 	.word	0x08005893
 800560c:	08005893 	.word	0x08005893
 8005610:	0800567b 	.word	0x0800567b
 8005614:	08005893 	.word	0x08005893
 8005618:	08005893 	.word	0x08005893
 800561c:	08005893 	.word	0x08005893
 8005620:	08005893 	.word	0x08005893
 8005624:	08005893 	.word	0x08005893
 8005628:	08005893 	.word	0x08005893
 800562c:	08005893 	.word	0x08005893
 8005630:	08005681 	.word	0x08005681
 8005634:	08005893 	.word	0x08005893
 8005638:	08005893 	.word	0x08005893
 800563c:	08005893 	.word	0x08005893
 8005640:	08005893 	.word	0x08005893
 8005644:	08005893 	.word	0x08005893
 8005648:	08005893 	.word	0x08005893
 800564c:	08005893 	.word	0x08005893
 8005650:	08005687 	.word	0x08005687
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005654:	4b94      	ldr	r3, [pc, #592]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d009      	beq.n	8005674 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005660:	4b91      	ldr	r3, [pc, #580]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	08db      	lsrs	r3, r3, #3
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	4a90      	ldr	r2, [pc, #576]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
 8005670:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005672:	e111      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005674:	4b8d      	ldr	r3, [pc, #564]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005676:	61bb      	str	r3, [r7, #24]
    break;
 8005678:	e10e      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800567a:	4b8d      	ldr	r3, [pc, #564]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800567c:	61bb      	str	r3, [r7, #24]
    break;
 800567e:	e10b      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005680:	4b8c      	ldr	r3, [pc, #560]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005682:	61bb      	str	r3, [r7, #24]
    break;
 8005684:	e108      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005686:	4b88      	ldr	r3, [pc, #544]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005690:	4b85      	ldr	r3, [pc, #532]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800569a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800569c:	4b82      	ldr	r3, [pc, #520]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80056a6:	4b80      	ldr	r3, [pc, #512]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056aa:	08db      	lsrs	r3, r3, #3
 80056ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	fb02 f303 	mul.w	r3, r2, r3
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80e1 	beq.w	800588c <HAL_RCC_GetSysClockFreq+0x2b8>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	f000 8083 	beq.w	80057d8 <HAL_RCC_GetSysClockFreq+0x204>
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	f200 80a1 	bhi.w	800581c <HAL_RCC_GetSysClockFreq+0x248>
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_RCC_GetSysClockFreq+0x114>
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d056      	beq.n	8005794 <HAL_RCC_GetSysClockFreq+0x1c0>
 80056e6:	e099      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056e8:	4b6f      	ldr	r3, [pc, #444]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d02d      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056f4:	4b6c      	ldr	r3, [pc, #432]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	08db      	lsrs	r3, r3, #3
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	4a6b      	ldr	r2, [pc, #428]	; (80058ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
 8005704:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	ee07 3a90 	vmov	s15, r3
 800570c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800571e:	4b62      	ldr	r3, [pc, #392]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005732:	eddf 5a61 	vldr	s11, [pc, #388]	; 80058b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800574e:	e087      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80058bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800575e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005762:	4b51      	ldr	r3, [pc, #324]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005772:	ed97 6a02 	vldr	s12, [r7, #8]
 8005776:	eddf 5a50 	vldr	s11, [pc, #320]	; 80058b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800577a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800577e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800578a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800578e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005792:	e065      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80058c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a6:	4b40      	ldr	r3, [pc, #256]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80058b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057d6:	e043      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80058c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80057e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ea:	4b2f      	ldr	r3, [pc, #188]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80057fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80058b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800580e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800581a:	e021      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005826:	eddf 6a26 	vldr	s13, [pc, #152]	; 80058c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800582a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800582e:	4b1e      	ldr	r3, [pc, #120]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005842:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80058b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800584e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800585e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005860:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	0a5b      	lsrs	r3, r3, #9
 8005866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800586a:	3301      	adds	r3, #1
 800586c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	ee07 3a90 	vmov	s15, r3
 8005874:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005878:	edd7 6a07 	vldr	s13, [r7, #28]
 800587c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005884:	ee17 3a90 	vmov	r3, s15
 8005888:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800588a:	e005      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	61bb      	str	r3, [r7, #24]
    break;
 8005890:	e002      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005894:	61bb      	str	r3, [r7, #24]
    break;
 8005896:	bf00      	nop
  }

  return sysclockfreq;
 8005898:	69bb      	ldr	r3, [r7, #24]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3724      	adds	r7, #36	; 0x24
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	58024400 	.word	0x58024400
 80058ac:	03d09000 	.word	0x03d09000
 80058b0:	003d0900 	.word	0x003d0900
 80058b4:	007a1200 	.word	0x007a1200
 80058b8:	46000000 	.word	0x46000000
 80058bc:	4c742400 	.word	0x4c742400
 80058c0:	4a742400 	.word	0x4a742400
 80058c4:	4af42400 	.word	0x4af42400

080058c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058ce:	f7ff fe81 	bl	80055d4 <HAL_RCC_GetSysClockFreq>
 80058d2:	4602      	mov	r2, r0
 80058d4:	4b10      	ldr	r3, [pc, #64]	; (8005918 <HAL_RCC_GetHCLKFreq+0x50>)
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	0a1b      	lsrs	r3, r3, #8
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	490f      	ldr	r1, [pc, #60]	; (800591c <HAL_RCC_GetHCLKFreq+0x54>)
 80058e0:	5ccb      	ldrb	r3, [r1, r3]
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <HAL_RCC_GetHCLKFreq+0x50>)
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	4a09      	ldr	r2, [pc, #36]	; (800591c <HAL_RCC_GetHCLKFreq+0x54>)
 80058f6:	5cd3      	ldrb	r3, [r2, r3]
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005902:	4a07      	ldr	r2, [pc, #28]	; (8005920 <HAL_RCC_GetHCLKFreq+0x58>)
 8005904:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005906:	4a07      	ldr	r2, [pc, #28]	; (8005924 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800590c:	4b04      	ldr	r3, [pc, #16]	; (8005920 <HAL_RCC_GetHCLKFreq+0x58>)
 800590e:	681b      	ldr	r3, [r3, #0]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	58024400 	.word	0x58024400
 800591c:	0800d634 	.word	0x0800d634
 8005920:	24000004 	.word	0x24000004
 8005924:	24000000 	.word	0x24000000

08005928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800592c:	f7ff ffcc 	bl	80058c8 <HAL_RCC_GetHCLKFreq>
 8005930:	4602      	mov	r2, r0
 8005932:	4b06      	ldr	r3, [pc, #24]	; (800594c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	091b      	lsrs	r3, r3, #4
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	4904      	ldr	r1, [pc, #16]	; (8005950 <HAL_RCC_GetPCLK1Freq+0x28>)
 800593e:	5ccb      	ldrb	r3, [r1, r3]
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005948:	4618      	mov	r0, r3
 800594a:	bd80      	pop	{r7, pc}
 800594c:	58024400 	.word	0x58024400
 8005950:	0800d634 	.word	0x0800d634

08005954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005958:	f7ff ffb6 	bl	80058c8 <HAL_RCC_GetHCLKFreq>
 800595c:	4602      	mov	r2, r0
 800595e:	4b06      	ldr	r3, [pc, #24]	; (8005978 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	0a1b      	lsrs	r3, r3, #8
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	4904      	ldr	r1, [pc, #16]	; (800597c <HAL_RCC_GetPCLK2Freq+0x28>)
 800596a:	5ccb      	ldrb	r3, [r1, r3]
 800596c:	f003 031f 	and.w	r3, r3, #31
 8005970:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005974:	4618      	mov	r0, r3
 8005976:	bd80      	pop	{r7, pc}
 8005978:	58024400 	.word	0x58024400
 800597c:	0800d634 	.word	0x0800d634

08005980 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005988:	2300      	movs	r3, #0
 800598a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800598c:	2300      	movs	r3, #0
 800598e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d03f      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059a4:	d02a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80059a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059aa:	d824      	bhi.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059b0:	d018      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059b6:	d81e      	bhi.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80059bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059c0:	d007      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80059c2:	e018      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c4:	4bab      	ldr	r3, [pc, #684]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	4aaa      	ldr	r2, [pc, #680]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059d0:	e015      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3304      	adds	r3, #4
 80059d6:	2102      	movs	r1, #2
 80059d8:	4618      	mov	r0, r3
 80059da:	f001 f9cf 	bl	8006d7c <RCCEx_PLL2_Config>
 80059de:	4603      	mov	r3, r0
 80059e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059e2:	e00c      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3324      	adds	r3, #36	; 0x24
 80059e8:	2102      	movs	r1, #2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f001 fa78 	bl	8006ee0 <RCCEx_PLL3_Config>
 80059f0:	4603      	mov	r3, r0
 80059f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059f4:	e003      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	75fb      	strb	r3, [r7, #23]
      break;
 80059fa:	e000      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80059fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d109      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a04:	4b9b      	ldr	r3, [pc, #620]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a10:	4998      	ldr	r1, [pc, #608]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	650b      	str	r3, [r1, #80]	; 0x50
 8005a16:	e001      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d03d      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d826      	bhi.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a30:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a36:	bf00      	nop
 8005a38:	08005a4d 	.word	0x08005a4d
 8005a3c:	08005a5b 	.word	0x08005a5b
 8005a40:	08005a6d 	.word	0x08005a6d
 8005a44:	08005a85 	.word	0x08005a85
 8005a48:	08005a85 	.word	0x08005a85
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a4c:	4b89      	ldr	r3, [pc, #548]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	4a88      	ldr	r2, [pc, #544]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a58:	e015      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	2100      	movs	r1, #0
 8005a60:	4618      	mov	r0, r3
 8005a62:	f001 f98b 	bl	8006d7c <RCCEx_PLL2_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a6a:	e00c      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3324      	adds	r3, #36	; 0x24
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 fa34 	bl	8006ee0 <RCCEx_PLL3_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a7c:	e003      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	75fb      	strb	r3, [r7, #23]
      break;
 8005a82:	e000      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d109      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a8c:	4b79      	ldr	r3, [pc, #484]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a90:	f023 0207 	bic.w	r2, r3, #7
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a98:	4976      	ldr	r1, [pc, #472]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	650b      	str	r3, [r1, #80]	; 0x50
 8005a9e:	e001      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d042      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab8:	d02b      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005abe:	d825      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005ac0:	2bc0      	cmp	r3, #192	; 0xc0
 8005ac2:	d028      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ac4:	2bc0      	cmp	r3, #192	; 0xc0
 8005ac6:	d821      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005ac8:	2b80      	cmp	r3, #128	; 0x80
 8005aca:	d016      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005acc:	2b80      	cmp	r3, #128	; 0x80
 8005ace:	d81d      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d007      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005ad8:	e018      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ada:	4b66      	ldr	r3, [pc, #408]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	4a65      	ldr	r2, [pc, #404]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ae6:	e017      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	2100      	movs	r1, #0
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 f944 	bl	8006d7c <RCCEx_PLL2_Config>
 8005af4:	4603      	mov	r3, r0
 8005af6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005af8:	e00e      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3324      	adds	r3, #36	; 0x24
 8005afe:	2100      	movs	r1, #0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 f9ed 	bl	8006ee0 <RCCEx_PLL3_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b0a:	e005      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b10:	e002      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b1e:	4b55      	ldr	r3, [pc, #340]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b22:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2a:	4952      	ldr	r1, [pc, #328]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	650b      	str	r3, [r1, #80]	; 0x50
 8005b30:	e001      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d049      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b4c:	d030      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005b4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b52:	d82a      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b54:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b58:	d02c      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005b5a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b5e:	d824      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b64:	d018      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b6a:	d81e      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005b70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b74:	d007      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005b76:	e018      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b78:	4b3e      	ldr	r3, [pc, #248]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	4a3d      	ldr	r2, [pc, #244]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b84:	e017      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f001 f8f5 	bl	8006d7c <RCCEx_PLL2_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b96:	e00e      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3324      	adds	r3, #36	; 0x24
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 f99e 	bl	8006ee0 <RCCEx_PLL3_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ba8:	e005      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	75fb      	strb	r3, [r7, #23]
      break;
 8005bae:	e002      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005bbc:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bca:	492a      	ldr	r1, [pc, #168]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	658b      	str	r3, [r1, #88]	; 0x58
 8005bd0:	e001      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
 8005bd4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d04c      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bec:	d030      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005bee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bf2:	d82a      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005bf4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bf8:	d02c      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005bfa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bfe:	d824      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c04:	d018      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005c06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c0a:	d81e      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c14:	d007      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005c16:	e018      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c18:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	4a15      	ldr	r2, [pc, #84]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c24:	e017      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 f8a5 	bl	8006d7c <RCCEx_PLL2_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c36:	e00e      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3324      	adds	r3, #36	; 0x24
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f001 f94e 	bl	8006ee0 <RCCEx_PLL3_Config>
 8005c44:	4603      	mov	r3, r0
 8005c46:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c48:	e005      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4e:	e002      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005c50:	bf00      	nop
 8005c52:	e000      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10d      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c6a:	4902      	ldr	r1, [pc, #8]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	658b      	str	r3, [r1, #88]	; 0x58
 8005c70:	e004      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005c72:	bf00      	nop
 8005c74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d032      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8c:	2b30      	cmp	r3, #48	; 0x30
 8005c8e:	d01c      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c90:	2b30      	cmp	r3, #48	; 0x30
 8005c92:	d817      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d00c      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d813      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d016      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d10f      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca4:	4baf      	ldr	r3, [pc, #700]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	4aae      	ldr	r2, [pc, #696]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005cb0:	e00e      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	2102      	movs	r1, #2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 f85f 	bl	8006d7c <RCCEx_PLL2_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005cc2:	e005      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc8:	e002      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005cca:	bf00      	nop
 8005ccc:	e000      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005cd6:	4ba3      	ldr	r3, [pc, #652]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cda:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce2:	49a0      	ldr	r1, [pc, #640]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ce8:	e001      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
 8005cec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d047      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d02:	d030      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d08:	d82a      	bhi.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005d0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d0e:	d02c      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005d10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d14:	d824      	bhi.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d1a:	d018      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d20:	d81e      	bhi.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2a:	d007      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005d2c:	e018      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d2e:	4b8d      	ldr	r3, [pc, #564]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	4a8c      	ldr	r2, [pc, #560]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d3a:	e017      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	2100      	movs	r1, #0
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 f81a 	bl	8006d7c <RCCEx_PLL2_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d4c:	e00e      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3324      	adds	r3, #36	; 0x24
 8005d52:	2100      	movs	r1, #0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 f8c3 	bl	8006ee0 <RCCEx_PLL3_Config>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d5e:	e005      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	75fb      	strb	r3, [r7, #23]
      break;
 8005d64:	e002      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005d66:	bf00      	nop
 8005d68:	e000      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d109      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d72:	4b7c      	ldr	r3, [pc, #496]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d76:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7e:	4979      	ldr	r1, [pc, #484]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	650b      	str	r3, [r1, #80]	; 0x50
 8005d84:	e001      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
 8005d88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d049      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d9e:	d02e      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005da4:	d828      	bhi.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005da6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005daa:	d02a      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005dac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005db0:	d822      	bhi.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005db2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005db6:	d026      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005db8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dbc:	d81c      	bhi.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005dbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dc2:	d010      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005dc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dc8:	d816      	bhi.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01d      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd2:	d111      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	2101      	movs	r1, #1
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 ffce 	bl	8006d7c <RCCEx_PLL2_Config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005de4:	e012      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3324      	adds	r3, #36	; 0x24
 8005dea:	2101      	movs	r1, #1
 8005dec:	4618      	mov	r0, r3
 8005dee:	f001 f877 	bl	8006ee0 <RCCEx_PLL3_Config>
 8005df2:	4603      	mov	r3, r0
 8005df4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005df6:	e009      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8005dfc:	e006      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005dfe:	bf00      	nop
 8005e00:	e004      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e02:	bf00      	nop
 8005e04:	e002      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e06:	bf00      	nop
 8005e08:	e000      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e12:	4b54      	ldr	r3, [pc, #336]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e16:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1e:	4951      	ldr	r1, [pc, #324]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	650b      	str	r3, [r1, #80]	; 0x50
 8005e24:	e001      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d04b      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e40:	d02e      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e46:	d828      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4c:	d02a      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e52:	d822      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005e54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e58:	d026      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005e5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e5e:	d81c      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e64:	d010      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e6a:	d816      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01d      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005e70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e74:	d111      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 ff7d 	bl	8006d7c <RCCEx_PLL2_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e86:	e012      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3324      	adds	r3, #36	; 0x24
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 f826 	bl	8006ee0 <RCCEx_PLL3_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e98:	e009      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e9e:	e006      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ea0:	bf00      	nop
 8005ea2:	e004      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ea4:	bf00      	nop
 8005ea6:	e002      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ea8:	bf00      	nop
 8005eaa:	e000      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005eb4:	4b2b      	ldr	r3, [pc, #172]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ec2:	4928      	ldr	r1, [pc, #160]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	658b      	str	r3, [r1, #88]	; 0x58
 8005ec8:	e001      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
 8005ecc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d02f      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee2:	d00e      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee8:	d814      	bhi.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d015      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ef2:	d10f      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ef4:	4b1b      	ldr	r3, [pc, #108]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	4a1a      	ldr	r2, [pc, #104]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005efe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f00:	e00c      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3304      	adds	r3, #4
 8005f06:	2101      	movs	r1, #1
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 ff37 	bl	8006d7c <RCCEx_PLL2_Config>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f12:	e003      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	75fb      	strb	r3, [r7, #23]
      break;
 8005f18:	e000      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f22:	4b10      	ldr	r3, [pc, #64]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f2e:	490d      	ldr	r1, [pc, #52]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	650b      	str	r3, [r1, #80]	; 0x50
 8005f34:	e001      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f36:	7dfb      	ldrb	r3, [r7, #23]
 8005f38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d033      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d81c      	bhi.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005f4e:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005f8f 	.word	0x08005f8f
 8005f58:	08005f69 	.word	0x08005f69
 8005f5c:	08005f77 	.word	0x08005f77
 8005f60:	08005f8f 	.word	0x08005f8f
 8005f64:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f68:	4bb8      	ldr	r3, [pc, #736]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	4ab7      	ldr	r2, [pc, #732]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f74:	e00c      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	2102      	movs	r1, #2
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fefd 	bl	8006d7c <RCCEx_PLL2_Config>
 8005f82:	4603      	mov	r3, r0
 8005f84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f86:	e003      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f8c:	e000      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f96:	4bad      	ldr	r3, [pc, #692]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9a:	f023 0203 	bic.w	r2, r3, #3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	49aa      	ldr	r1, [pc, #680]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005fa8:	e001      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 8086 	beq.w	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fbc:	4ba4      	ldr	r3, [pc, #656]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4aa3      	ldr	r2, [pc, #652]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fc8:	f7fb faba 	bl	8001540 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fce:	e009      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd0:	f7fb fab6 	bl	8001540 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b64      	cmp	r3, #100	; 0x64
 8005fdc:	d902      	bls.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	75fb      	strb	r3, [r7, #23]
        break;
 8005fe2:	e005      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fe4:	4b9a      	ldr	r3, [pc, #616]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0ef      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d166      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ff6:	4b95      	ldr	r3, [pc, #596]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ff8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006000:	4053      	eors	r3, r2
 8006002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006006:	2b00      	cmp	r3, #0
 8006008:	d013      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800600a:	4b90      	ldr	r3, [pc, #576]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006012:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006014:	4b8d      	ldr	r3, [pc, #564]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	4a8c      	ldr	r2, [pc, #560]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800601a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800601e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006020:	4b8a      	ldr	r3, [pc, #552]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	4a89      	ldr	r2, [pc, #548]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800602a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800602c:	4a87      	ldr	r2, [pc, #540]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800603c:	d115      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603e:	f7fb fa7f 	bl	8001540 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006044:	e00b      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006046:	f7fb fa7b 	bl	8001540 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	f241 3288 	movw	r2, #5000	; 0x1388
 8006054:	4293      	cmp	r3, r2
 8006056:	d902      	bls.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	75fb      	strb	r3, [r7, #23]
            break;
 800605c:	e005      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800605e:	4b7b      	ldr	r3, [pc, #492]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0ed      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d126      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800607e:	d10d      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006080:	4b72      	ldr	r3, [pc, #456]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800608e:	0919      	lsrs	r1, r3, #4
 8006090:	4b70      	ldr	r3, [pc, #448]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006092:	400b      	ands	r3, r1
 8006094:	496d      	ldr	r1, [pc, #436]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006096:	4313      	orrs	r3, r2
 8006098:	610b      	str	r3, [r1, #16]
 800609a:	e005      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800609c:	4b6b      	ldr	r3, [pc, #428]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	4a6a      	ldr	r2, [pc, #424]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060a6:	6113      	str	r3, [r2, #16]
 80060a8:	4b68      	ldr	r3, [pc, #416]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b6:	4965      	ldr	r1, [pc, #404]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	670b      	str	r3, [r1, #112]	; 0x70
 80060bc:	e004      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	75bb      	strb	r3, [r7, #22]
 80060c2:	e001      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d07e      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060d8:	2b28      	cmp	r3, #40	; 0x28
 80060da:	d867      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80060dc:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	080061b3 	.word	0x080061b3
 80060e8:	080061ad 	.word	0x080061ad
 80060ec:	080061ad 	.word	0x080061ad
 80060f0:	080061ad 	.word	0x080061ad
 80060f4:	080061ad 	.word	0x080061ad
 80060f8:	080061ad 	.word	0x080061ad
 80060fc:	080061ad 	.word	0x080061ad
 8006100:	080061ad 	.word	0x080061ad
 8006104:	08006189 	.word	0x08006189
 8006108:	080061ad 	.word	0x080061ad
 800610c:	080061ad 	.word	0x080061ad
 8006110:	080061ad 	.word	0x080061ad
 8006114:	080061ad 	.word	0x080061ad
 8006118:	080061ad 	.word	0x080061ad
 800611c:	080061ad 	.word	0x080061ad
 8006120:	080061ad 	.word	0x080061ad
 8006124:	0800619b 	.word	0x0800619b
 8006128:	080061ad 	.word	0x080061ad
 800612c:	080061ad 	.word	0x080061ad
 8006130:	080061ad 	.word	0x080061ad
 8006134:	080061ad 	.word	0x080061ad
 8006138:	080061ad 	.word	0x080061ad
 800613c:	080061ad 	.word	0x080061ad
 8006140:	080061ad 	.word	0x080061ad
 8006144:	080061b3 	.word	0x080061b3
 8006148:	080061ad 	.word	0x080061ad
 800614c:	080061ad 	.word	0x080061ad
 8006150:	080061ad 	.word	0x080061ad
 8006154:	080061ad 	.word	0x080061ad
 8006158:	080061ad 	.word	0x080061ad
 800615c:	080061ad 	.word	0x080061ad
 8006160:	080061ad 	.word	0x080061ad
 8006164:	080061b3 	.word	0x080061b3
 8006168:	080061ad 	.word	0x080061ad
 800616c:	080061ad 	.word	0x080061ad
 8006170:	080061ad 	.word	0x080061ad
 8006174:	080061ad 	.word	0x080061ad
 8006178:	080061ad 	.word	0x080061ad
 800617c:	080061ad 	.word	0x080061ad
 8006180:	080061ad 	.word	0x080061ad
 8006184:	080061b3 	.word	0x080061b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3304      	adds	r3, #4
 800618c:	2101      	movs	r1, #1
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fdf4 	bl	8006d7c <RCCEx_PLL2_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006198:	e00c      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3324      	adds	r3, #36	; 0x24
 800619e:	2101      	movs	r1, #1
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fe9d 	bl	8006ee0 <RCCEx_PLL3_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80061aa:	e003      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	75fb      	strb	r3, [r7, #23]
      break;
 80061b0:	e000      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80061b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d109      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061ba:	4b24      	ldr	r3, [pc, #144]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061c6:	4921      	ldr	r1, [pc, #132]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	654b      	str	r3, [r1, #84]	; 0x54
 80061cc:	e001      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d03e      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e2:	2b05      	cmp	r3, #5
 80061e4:	d820      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80061e6:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	0800622f 	.word	0x0800622f
 80061f0:	08006205 	.word	0x08006205
 80061f4:	08006217 	.word	0x08006217
 80061f8:	0800622f 	.word	0x0800622f
 80061fc:	0800622f 	.word	0x0800622f
 8006200:	0800622f 	.word	0x0800622f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3304      	adds	r3, #4
 8006208:	2101      	movs	r1, #1
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fdb6 	bl	8006d7c <RCCEx_PLL2_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006214:	e00c      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	3324      	adds	r3, #36	; 0x24
 800621a:	2101      	movs	r1, #1
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fe5f 	bl	8006ee0 <RCCEx_PLL3_Config>
 8006222:	4603      	mov	r3, r0
 8006224:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006226:	e003      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	75fb      	strb	r3, [r7, #23]
      break;
 800622c:	e000      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800622e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d110      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623a:	f023 0207 	bic.w	r2, r3, #7
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006242:	4902      	ldr	r1, [pc, #8]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006244:	4313      	orrs	r3, r2
 8006246:	654b      	str	r3, [r1, #84]	; 0x54
 8006248:	e008      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800624a:	bf00      	nop
 800624c:	58024400 	.word	0x58024400
 8006250:	58024800 	.word	0x58024800
 8006254:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d039      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626e:	2b05      	cmp	r3, #5
 8006270:	d820      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006272:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	080062bb 	.word	0x080062bb
 800627c:	08006291 	.word	0x08006291
 8006280:	080062a3 	.word	0x080062a3
 8006284:	080062bb 	.word	0x080062bb
 8006288:	080062bb 	.word	0x080062bb
 800628c:	080062bb 	.word	0x080062bb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3304      	adds	r3, #4
 8006294:	2101      	movs	r1, #1
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fd70 	bl	8006d7c <RCCEx_PLL2_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80062a0:	e00c      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3324      	adds	r3, #36	; 0x24
 80062a6:	2101      	movs	r1, #1
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fe19 	bl	8006ee0 <RCCEx_PLL3_Config>
 80062ae:	4603      	mov	r3, r0
 80062b0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80062b2:	e003      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	75fb      	strb	r3, [r7, #23]
      break;
 80062b8:	e000      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80062ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062c2:	4bb7      	ldr	r3, [pc, #732]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c6:	f023 0207 	bic.w	r2, r3, #7
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d0:	49b3      	ldr	r1, [pc, #716]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	658b      	str	r3, [r1, #88]	; 0x58
 80062d6:	e001      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d04b      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062f2:	d02e      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80062f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062f8:	d828      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80062fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062fe:	d02a      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006304:	d822      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006306:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800630a:	d026      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800630c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006310:	d81c      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006316:	d010      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800631c:	d816      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d01d      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006326:	d111      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3304      	adds	r3, #4
 800632c:	2100      	movs	r1, #0
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fd24 	bl	8006d7c <RCCEx_PLL2_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006338:	e012      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3324      	adds	r3, #36	; 0x24
 800633e:	2102      	movs	r1, #2
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fdcd 	bl	8006ee0 <RCCEx_PLL3_Config>
 8006346:	4603      	mov	r3, r0
 8006348:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800634a:	e009      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	75fb      	strb	r3, [r7, #23]
      break;
 8006350:	e006      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006352:	bf00      	nop
 8006354:	e004      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006356:	bf00      	nop
 8006358:	e002      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800635a:	bf00      	nop
 800635c:	e000      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800635e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006360:	7dfb      	ldrb	r3, [r7, #23]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006366:	4b8e      	ldr	r3, [pc, #568]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006374:	498a      	ldr	r1, [pc, #552]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006376:	4313      	orrs	r3, r2
 8006378:	654b      	str	r3, [r1, #84]	; 0x54
 800637a:	e001      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637c:	7dfb      	ldrb	r3, [r7, #23]
 800637e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d04b      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006392:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006396:	d02e      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006398:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800639c:	d828      	bhi.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800639e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a2:	d02a      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80063a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a8:	d822      	bhi.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80063aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063ae:	d026      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80063b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063b4:	d81c      	bhi.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80063b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ba:	d010      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80063bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c0:	d816      	bhi.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01d      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80063c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ca:	d111      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
 80063d0:	2100      	movs	r1, #0
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fcd2 	bl	8006d7c <RCCEx_PLL2_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80063dc:	e012      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3324      	adds	r3, #36	; 0x24
 80063e2:	2102      	movs	r1, #2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 fd7b 	bl	8006ee0 <RCCEx_PLL3_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80063ee:	e009      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	75fb      	strb	r3, [r7, #23]
      break;
 80063f4:	e006      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80063f6:	bf00      	nop
 80063f8:	e004      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80063fa:	bf00      	nop
 80063fc:	e002      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80063fe:	bf00      	nop
 8006400:	e000      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006404:	7dfb      	ldrb	r3, [r7, #23]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10a      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800640a:	4b65      	ldr	r3, [pc, #404]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800640c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006418:	4961      	ldr	r1, [pc, #388]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800641a:	4313      	orrs	r3, r2
 800641c:	658b      	str	r3, [r1, #88]	; 0x58
 800641e:	e001      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006420:	7dfb      	ldrb	r3, [r7, #23]
 8006422:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642c:	2b00      	cmp	r3, #0
 800642e:	d04b      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006436:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800643a:	d02e      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800643c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006440:	d828      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006446:	d02a      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800644c:	d822      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800644e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006452:	d026      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006454:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006458:	d81c      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800645a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800645e:	d010      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006464:	d816      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01d      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800646a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646e:	d111      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	2100      	movs	r1, #0
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fc80 	bl	8006d7c <RCCEx_PLL2_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006480:	e012      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3324      	adds	r3, #36	; 0x24
 8006486:	2102      	movs	r1, #2
 8006488:	4618      	mov	r0, r3
 800648a:	f000 fd29 	bl	8006ee0 <RCCEx_PLL3_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006492:	e009      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
      break;
 8006498:	e006      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800649a:	bf00      	nop
 800649c:	e004      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800649e:	bf00      	nop
 80064a0:	e002      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80064a2:	bf00      	nop
 80064a4:	e000      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80064a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80064ae:	4b3c      	ldr	r3, [pc, #240]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064bc:	4938      	ldr	r1, [pc, #224]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	658b      	str	r3, [r1, #88]	; 0x58
 80064c2:	e001      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
 80064c6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01a      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064de:	d10a      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3324      	adds	r3, #36	; 0x24
 80064e4:	2102      	movs	r1, #2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fcfa 	bl	8006ee0 <RCCEx_PLL3_Config>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80064f6:	4b2a      	ldr	r3, [pc, #168]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006504:	4926      	ldr	r1, [pc, #152]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006506:	4313      	orrs	r3, r2
 8006508:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0310 	and.w	r3, r3, #16
 8006512:	2b00      	cmp	r3, #0
 8006514:	d01a      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800651c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006520:	d10a      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3324      	adds	r3, #36	; 0x24
 8006526:	2102      	movs	r1, #2
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fcd9 	bl	8006ee0 <RCCEx_PLL3_Config>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006538:	4b19      	ldr	r3, [pc, #100]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800653a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006546:	4916      	ldr	r1, [pc, #88]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006548:	4313      	orrs	r3, r2
 800654a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d036      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800655e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006562:	d01f      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006568:	d817      	bhi.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800656e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006572:	d009      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006574:	e011      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3304      	adds	r3, #4
 800657a:	2100      	movs	r1, #0
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fbfd 	bl	8006d7c <RCCEx_PLL2_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006586:	e00e      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3324      	adds	r3, #36	; 0x24
 800658c:	2102      	movs	r1, #2
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fca6 	bl	8006ee0 <RCCEx_PLL3_Config>
 8006594:	4603      	mov	r3, r0
 8006596:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006598:	e005      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	75fb      	strb	r3, [r7, #23]
      break;
 800659e:	e002      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80065a0:	58024400 	.word	0x58024400
      break;
 80065a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065ac:	4b93      	ldr	r3, [pc, #588]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065ba:	4990      	ldr	r1, [pc, #576]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	658b      	str	r3, [r1, #88]	; 0x58
 80065c0:	e001      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d033      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065dc:	d01c      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80065de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065e2:	d816      	bhi.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80065e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065e8:	d003      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80065ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065ee:	d007      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80065f0:	e00f      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f2:	4b82      	ldr	r3, [pc, #520]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f6:	4a81      	ldr	r2, [pc, #516]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80065fe:	e00c      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3324      	adds	r3, #36	; 0x24
 8006604:	2101      	movs	r1, #1
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fc6a 	bl	8006ee0 <RCCEx_PLL3_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006610:	e003      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	75fb      	strb	r3, [r7, #23]
      break;
 8006616:	e000      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800661a:	7dfb      	ldrb	r3, [r7, #23]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006620:	4b76      	ldr	r3, [pc, #472]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006624:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800662e:	4973      	ldr	r1, [pc, #460]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006630:	4313      	orrs	r3, r2
 8006632:	654b      	str	r3, [r1, #84]	; 0x54
 8006634:	e001      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d029      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800664e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006652:	d007      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006654:	e00f      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006656:	4b69      	ldr	r3, [pc, #420]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	4a68      	ldr	r2, [pc, #416]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800665c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006660:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006662:	e00b      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3304      	adds	r3, #4
 8006668:	2102      	movs	r1, #2
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fb86 	bl	8006d7c <RCCEx_PLL2_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006674:	e002      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
      break;
 800667a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006682:	4b5e      	ldr	r3, [pc, #376]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006686:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668e:	495b      	ldr	r1, [pc, #364]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006690:	4313      	orrs	r3, r2
 8006692:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006694:	e001      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3324      	adds	r3, #36	; 0x24
 80066aa:	2102      	movs	r1, #2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fc17 	bl	8006ee0 <RCCEx_PLL3_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d030      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d0:	d017      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80066d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d6:	d811      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80066d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066dc:	d013      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80066de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e2:	d80b      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d010      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80066e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ec:	d106      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ee:	4b43      	ldr	r3, [pc, #268]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	4a42      	ldr	r2, [pc, #264]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80066fa:	e007      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006700:	e004      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006702:	bf00      	nop
 8006704:	e002      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800670a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d109      	bne.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006712:	4b3a      	ldr	r3, [pc, #232]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006716:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800671e:	4937      	ldr	r1, [pc, #220]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006720:	4313      	orrs	r3, r2
 8006722:	654b      	str	r3, [r1, #84]	; 0x54
 8006724:	e001      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006726:	7dfb      	ldrb	r3, [r7, #23]
 8006728:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d008      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006736:	4b31      	ldr	r3, [pc, #196]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006742:	492e      	ldr	r1, [pc, #184]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006744:	4313      	orrs	r3, r2
 8006746:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d009      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006754:	4b29      	ldr	r3, [pc, #164]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006762:	4926      	ldr	r1, [pc, #152]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006764:	4313      	orrs	r3, r2
 8006766:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006774:	4b21      	ldr	r3, [pc, #132]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006778:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006780:	491e      	ldr	r1, [pc, #120]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006782:	4313      	orrs	r3, r2
 8006784:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00d      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006792:	4b1a      	ldr	r3, [pc, #104]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	4a19      	ldr	r2, [pc, #100]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006798:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800679c:	6113      	str	r3, [r2, #16]
 800679e:	4b17      	ldr	r3, [pc, #92]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067a0:	691a      	ldr	r2, [r3, #16]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80067a8:	4914      	ldr	r1, [pc, #80]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	da08      	bge.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80067b6:	4b11      	ldr	r3, [pc, #68]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c2:	490e      	ldr	r1, [pc, #56]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d009      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e2:	4906      	ldr	r1, [pc, #24]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80067e8:	7dbb      	ldrb	r3, [r7, #22]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e000      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	58024400 	.word	0x58024400

08006800 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006804:	f7ff f860 	bl	80058c8 <HAL_RCC_GetHCLKFreq>
 8006808:	4602      	mov	r2, r0
 800680a:	4b06      	ldr	r3, [pc, #24]	; (8006824 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	091b      	lsrs	r3, r3, #4
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	4904      	ldr	r1, [pc, #16]	; (8006828 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006816:	5ccb      	ldrb	r3, [r1, r3]
 8006818:	f003 031f 	and.w	r3, r3, #31
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006820:	4618      	mov	r0, r3
 8006822:	bd80      	pop	{r7, pc}
 8006824:	58024400 	.word	0x58024400
 8006828:	0800d634 	.word	0x0800d634

0800682c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800682c:	b480      	push	{r7}
 800682e:	b089      	sub	sp, #36	; 0x24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006834:	4ba1      	ldr	r3, [pc, #644]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	f003 0303 	and.w	r3, r3, #3
 800683c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800683e:	4b9f      	ldr	r3, [pc, #636]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	0b1b      	lsrs	r3, r3, #12
 8006844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006848:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800684a:	4b9c      	ldr	r3, [pc, #624]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	091b      	lsrs	r3, r3, #4
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006856:	4b99      	ldr	r3, [pc, #612]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685a:	08db      	lsrs	r3, r3, #3
 800685c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	fb02 f303 	mul.w	r3, r2, r3
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 8111 	beq.w	8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	2b02      	cmp	r3, #2
 800687e:	f000 8083 	beq.w	8006988 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b02      	cmp	r3, #2
 8006886:	f200 80a1 	bhi.w	80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d056      	beq.n	8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006896:	e099      	b.n	80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006898:	4b88      	ldr	r3, [pc, #544]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d02d      	beq.n	8006900 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068a4:	4b85      	ldr	r3, [pc, #532]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	08db      	lsrs	r3, r3, #3
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	4a84      	ldr	r2, [pc, #528]	; (8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80068b0:	fa22 f303 	lsr.w	r3, r2, r3
 80068b4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ce:	4b7b      	ldr	r3, [pc, #492]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068de:	ed97 6a03 	vldr	s12, [r7, #12]
 80068e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80068fe:	e087      	b.n	8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800690e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006912:	4b6a      	ldr	r3, [pc, #424]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006922:	ed97 6a03 	vldr	s12, [r7, #12]
 8006926:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800692a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006942:	e065      	b.n	8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006956:	4b59      	ldr	r3, [pc, #356]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006966:	ed97 6a03 	vldr	s12, [r7, #12]
 800696a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800696e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800697a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006982:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006986:	e043      	b.n	8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699a:	4b48      	ldr	r3, [pc, #288]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069ca:	e021      	b.n	8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	ee07 3a90 	vmov	s15, r3
 80069d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069de:	4b37      	ldr	r3, [pc, #220]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80069f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006a10:	4b2a      	ldr	r3, [pc, #168]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	0a5b      	lsrs	r3, r3, #9
 8006a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a36:	ee17 2a90 	vmov	r2, s15
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006a3e:	4b1f      	ldr	r3, [pc, #124]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a42:	0c1b      	lsrs	r3, r3, #16
 8006a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a48:	ee07 3a90 	vmov	s15, r3
 8006a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a58:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a64:	ee17 2a90 	vmov	r2, s15
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006a6c:	4b13      	ldr	r3, [pc, #76]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	0e1b      	lsrs	r3, r3, #24
 8006a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a76:	ee07 3a90 	vmov	s15, r3
 8006a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a86:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a92:	ee17 2a90 	vmov	r2, s15
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a9a:	e008      	b.n	8006aae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	609a      	str	r2, [r3, #8]
}
 8006aae:	bf00      	nop
 8006ab0:	3724      	adds	r7, #36	; 0x24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	58024400 	.word	0x58024400
 8006ac0:	03d09000 	.word	0x03d09000
 8006ac4:	46000000 	.word	0x46000000
 8006ac8:	4c742400 	.word	0x4c742400
 8006acc:	4a742400 	.word	0x4a742400
 8006ad0:	4af42400 	.word	0x4af42400

08006ad4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b089      	sub	sp, #36	; 0x24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006adc:	4ba1      	ldr	r3, [pc, #644]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	f003 0303 	and.w	r3, r3, #3
 8006ae4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006ae6:	4b9f      	ldr	r3, [pc, #636]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aea:	0d1b      	lsrs	r3, r3, #20
 8006aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006af0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006af2:	4b9c      	ldr	r3, [pc, #624]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	0a1b      	lsrs	r3, r3, #8
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006afe:	4b99      	ldr	r3, [pc, #612]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b02:	08db      	lsrs	r3, r3, #3
 8006b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	fb02 f303 	mul.w	r3, r2, r3
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 8111 	beq.w	8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	f000 8083 	beq.w	8006c30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	f200 80a1 	bhi.w	8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d056      	beq.n	8006bec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b3e:	e099      	b.n	8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b40:	4b88      	ldr	r3, [pc, #544]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d02d      	beq.n	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b4c:	4b85      	ldr	r3, [pc, #532]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	08db      	lsrs	r3, r3, #3
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	4a84      	ldr	r2, [pc, #528]	; (8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	ee07 3a90 	vmov	s15, r3
 8006b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b76:	4b7b      	ldr	r3, [pc, #492]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006ba6:	e087      	b.n	8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bba:	4b6a      	ldr	r3, [pc, #424]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bea:	e065      	b.n	8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfe:	4b59      	ldr	r3, [pc, #356]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c2e:	e043      	b.n	8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c42:	4b48      	ldr	r3, [pc, #288]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c72:	e021      	b.n	8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c86:	4b37      	ldr	r3, [pc, #220]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006cb8:	4b2a      	ldr	r3, [pc, #168]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	0a5b      	lsrs	r3, r3, #9
 8006cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc2:	ee07 3a90 	vmov	s15, r3
 8006cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cde:	ee17 2a90 	vmov	r2, s15
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006ce6:	4b1f      	ldr	r3, [pc, #124]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	0c1b      	lsrs	r3, r3, #16
 8006cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf0:	ee07 3a90 	vmov	s15, r3
 8006cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d0c:	ee17 2a90 	vmov	r2, s15
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006d14:	4b13      	ldr	r3, [pc, #76]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d18:	0e1b      	lsrs	r3, r3, #24
 8006d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d3a:	ee17 2a90 	vmov	r2, s15
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d42:	e008      	b.n	8006d56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	609a      	str	r2, [r3, #8]
}
 8006d56:	bf00      	nop
 8006d58:	3724      	adds	r7, #36	; 0x24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	58024400 	.word	0x58024400
 8006d68:	03d09000 	.word	0x03d09000
 8006d6c:	46000000 	.word	0x46000000
 8006d70:	4c742400 	.word	0x4c742400
 8006d74:	4a742400 	.word	0x4a742400
 8006d78:	4af42400 	.word	0x4af42400

08006d7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d8a:	4b53      	ldr	r3, [pc, #332]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d101      	bne.n	8006d9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e099      	b.n	8006ece <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d9a:	4b4f      	ldr	r3, [pc, #316]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a4e      	ldr	r2, [pc, #312]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006da0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006da6:	f7fa fbcb 	bl	8001540 <HAL_GetTick>
 8006daa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dac:	e008      	b.n	8006dc0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006dae:	f7fa fbc7 	bl	8001540 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e086      	b.n	8006ece <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dc0:	4b45      	ldr	r3, [pc, #276]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f0      	bne.n	8006dae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006dcc:	4b42      	ldr	r3, [pc, #264]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	031b      	lsls	r3, r3, #12
 8006dda:	493f      	ldr	r1, [pc, #252]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	628b      	str	r3, [r1, #40]	; 0x28
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	025b      	lsls	r3, r3, #9
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	431a      	orrs	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	041b      	lsls	r3, r3, #16
 8006dfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	061b      	lsls	r3, r3, #24
 8006e0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e10:	4931      	ldr	r1, [pc, #196]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e16:	4b30      	ldr	r3, [pc, #192]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	492d      	ldr	r1, [pc, #180]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e28:	4b2b      	ldr	r3, [pc, #172]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	f023 0220 	bic.w	r2, r3, #32
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	4928      	ldr	r1, [pc, #160]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e3a:	4b27      	ldr	r3, [pc, #156]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	4a26      	ldr	r2, [pc, #152]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e40:	f023 0310 	bic.w	r3, r3, #16
 8006e44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e46:	4b24      	ldr	r3, [pc, #144]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e4a:	4b24      	ldr	r3, [pc, #144]	; (8006edc <RCCEx_PLL2_Config+0x160>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	69d2      	ldr	r2, [r2, #28]
 8006e52:	00d2      	lsls	r2, r2, #3
 8006e54:	4920      	ldr	r1, [pc, #128]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e5a:	4b1f      	ldr	r3, [pc, #124]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	4a1e      	ldr	r2, [pc, #120]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e60:	f043 0310 	orr.w	r3, r3, #16
 8006e64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d106      	bne.n	8006e7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e6c:	4b1a      	ldr	r3, [pc, #104]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	4a19      	ldr	r2, [pc, #100]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e78:	e00f      	b.n	8006e9a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d106      	bne.n	8006e8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e80:	4b15      	ldr	r3, [pc, #84]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	4a14      	ldr	r2, [pc, #80]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e8c:	e005      	b.n	8006e9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e8e:	4b12      	ldr	r3, [pc, #72]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	4a11      	ldr	r2, [pc, #68]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a0e      	ldr	r2, [pc, #56]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006ea0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ea6:	f7fa fb4b 	bl	8001540 <HAL_GetTick>
 8006eaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006eac:	e008      	b.n	8006ec0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006eae:	f7fa fb47 	bl	8001540 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d901      	bls.n	8006ec0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e006      	b.n	8006ece <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <RCCEx_PLL2_Config+0x15c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0f0      	beq.n	8006eae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	58024400 	.word	0x58024400
 8006edc:	ffff0007 	.word	0xffff0007

08006ee0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006eee:	4b53      	ldr	r3, [pc, #332]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d101      	bne.n	8006efe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e099      	b.n	8007032 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006efe:	4b4f      	ldr	r3, [pc, #316]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a4e      	ldr	r2, [pc, #312]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f0a:	f7fa fb19 	bl	8001540 <HAL_GetTick>
 8006f0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f10:	e008      	b.n	8006f24 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f12:	f7fa fb15 	bl	8001540 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d901      	bls.n	8006f24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e086      	b.n	8007032 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f24:	4b45      	ldr	r3, [pc, #276]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f0      	bne.n	8006f12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f30:	4b42      	ldr	r3, [pc, #264]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	051b      	lsls	r3, r3, #20
 8006f3e:	493f      	ldr	r1, [pc, #252]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	628b      	str	r3, [r1, #40]	; 0x28
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	025b      	lsls	r3, r3, #9
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	041b      	lsls	r3, r3, #16
 8006f62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	061b      	lsls	r3, r3, #24
 8006f70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f74:	4931      	ldr	r1, [pc, #196]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f7a:	4b30      	ldr	r3, [pc, #192]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	492d      	ldr	r1, [pc, #180]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f8c:	4b2b      	ldr	r3, [pc, #172]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	4928      	ldr	r1, [pc, #160]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f9e:	4b27      	ldr	r3, [pc, #156]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	4a26      	ldr	r2, [pc, #152]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006faa:	4b24      	ldr	r3, [pc, #144]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fae:	4b24      	ldr	r3, [pc, #144]	; (8007040 <RCCEx_PLL3_Config+0x160>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	69d2      	ldr	r2, [r2, #28]
 8006fb6:	00d2      	lsls	r2, r2, #3
 8006fb8:	4920      	ldr	r1, [pc, #128]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006fbe:	4b1f      	ldr	r3, [pc, #124]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	4a1e      	ldr	r2, [pc, #120]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d106      	bne.n	8006fde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006fd0:	4b1a      	ldr	r3, [pc, #104]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	4a19      	ldr	r2, [pc, #100]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fdc:	e00f      	b.n	8006ffe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d106      	bne.n	8006ff2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006fe4:	4b15      	ldr	r3, [pc, #84]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	4a14      	ldr	r2, [pc, #80]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006fea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ff0:	e005      	b.n	8006ffe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ff2:	4b12      	ldr	r3, [pc, #72]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff6:	4a11      	ldr	r2, [pc, #68]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8006ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ffe:	4b0f      	ldr	r3, [pc, #60]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a0e      	ldr	r2, [pc, #56]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8007004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800700a:	f7fa fa99 	bl	8001540 <HAL_GetTick>
 800700e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007010:	e008      	b.n	8007024 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007012:	f7fa fa95 	bl	8001540 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d901      	bls.n	8007024 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e006      	b.n	8007032 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <RCCEx_PLL3_Config+0x15c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0f0      	beq.n	8007012 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	58024400 	.word	0x58024400
 8007040:	ffff0007 	.word	0xffff0007

08007044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e049      	b.n	80070ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d106      	bne.n	8007070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7f9 fffc 	bl	8001068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3304      	adds	r3, #4
 8007080:	4619      	mov	r1, r3
 8007082:	4610      	mov	r0, r2
 8007084:	f000 f9ee 	bl	8007464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b01      	cmp	r3, #1
 8007106:	d001      	beq.n	800710c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e04f      	b.n	80071ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f042 0201 	orr.w	r2, r2, #1
 8007122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a23      	ldr	r2, [pc, #140]	; (80071b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d01d      	beq.n	800716a <HAL_TIM_Base_Start_IT+0x76>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007136:	d018      	beq.n	800716a <HAL_TIM_Base_Start_IT+0x76>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a1f      	ldr	r2, [pc, #124]	; (80071bc <HAL_TIM_Base_Start_IT+0xc8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d013      	beq.n	800716a <HAL_TIM_Base_Start_IT+0x76>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a1e      	ldr	r2, [pc, #120]	; (80071c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00e      	beq.n	800716a <HAL_TIM_Base_Start_IT+0x76>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1c      	ldr	r2, [pc, #112]	; (80071c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d009      	beq.n	800716a <HAL_TIM_Base_Start_IT+0x76>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a1b      	ldr	r2, [pc, #108]	; (80071c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d004      	beq.n	800716a <HAL_TIM_Base_Start_IT+0x76>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a19      	ldr	r2, [pc, #100]	; (80071cc <HAL_TIM_Base_Start_IT+0xd8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d115      	bne.n	8007196 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	4b17      	ldr	r3, [pc, #92]	; (80071d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007172:	4013      	ands	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b06      	cmp	r3, #6
 800717a:	d015      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0xb4>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007182:	d011      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007194:	e008      	b.n	80071a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f042 0201 	orr.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	e000      	b.n	80071aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	40010000 	.word	0x40010000
 80071bc:	40000400 	.word	0x40000400
 80071c0:	40000800 	.word	0x40000800
 80071c4:	40000c00 	.word	0x40000c00
 80071c8:	40010400 	.word	0x40010400
 80071cc:	40001800 	.word	0x40001800
 80071d0:	00010007 	.word	0x00010007

080071d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d122      	bne.n	8007230 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d11b      	bne.n	8007230 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f06f 0202 	mvn.w	r2, #2
 8007200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	f003 0303 	and.w	r3, r3, #3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f905 	bl	8007426 <HAL_TIM_IC_CaptureCallback>
 800721c:	e005      	b.n	800722a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f8f7 	bl	8007412 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f908 	bl	800743a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	f003 0304 	and.w	r3, r3, #4
 800723a:	2b04      	cmp	r3, #4
 800723c:	d122      	bne.n	8007284 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b04      	cmp	r3, #4
 800724a:	d11b      	bne.n	8007284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f06f 0204 	mvn.w	r2, #4
 8007254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2202      	movs	r2, #2
 800725a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f8db 	bl	8007426 <HAL_TIM_IC_CaptureCallback>
 8007270:	e005      	b.n	800727e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f8cd 	bl	8007412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f8de 	bl	800743a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	f003 0308 	and.w	r3, r3, #8
 800728e:	2b08      	cmp	r3, #8
 8007290:	d122      	bne.n	80072d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f003 0308 	and.w	r3, r3, #8
 800729c:	2b08      	cmp	r3, #8
 800729e:	d11b      	bne.n	80072d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f06f 0208 	mvn.w	r2, #8
 80072a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2204      	movs	r2, #4
 80072ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f8b1 	bl	8007426 <HAL_TIM_IC_CaptureCallback>
 80072c4:	e005      	b.n	80072d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f8a3 	bl	8007412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f8b4 	bl	800743a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f003 0310 	and.w	r3, r3, #16
 80072e2:	2b10      	cmp	r3, #16
 80072e4:	d122      	bne.n	800732c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b10      	cmp	r3, #16
 80072f2:	d11b      	bne.n	800732c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f06f 0210 	mvn.w	r2, #16
 80072fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2208      	movs	r2, #8
 8007302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f887 	bl	8007426 <HAL_TIM_IC_CaptureCallback>
 8007318:	e005      	b.n	8007326 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f879 	bl	8007412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f88a 	bl	800743a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b01      	cmp	r3, #1
 8007338:	d10e      	bne.n	8007358 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b01      	cmp	r3, #1
 8007346:	d107      	bne.n	8007358 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f06f 0201 	mvn.w	r2, #1
 8007350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7f9 fd40 	bl	8000dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007362:	2b80      	cmp	r3, #128	; 0x80
 8007364:	d10e      	bne.n	8007384 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007370:	2b80      	cmp	r3, #128	; 0x80
 8007372:	d107      	bne.n	8007384 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800737c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f914 	bl	80075ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800738e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007392:	d10e      	bne.n	80073b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739e:	2b80      	cmp	r3, #128	; 0x80
 80073a0:	d107      	bne.n	80073b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80073aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f907 	bl	80075c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073bc:	2b40      	cmp	r3, #64	; 0x40
 80073be:	d10e      	bne.n	80073de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ca:	2b40      	cmp	r3, #64	; 0x40
 80073cc:	d107      	bne.n	80073de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f838 	bl	800744e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d10e      	bne.n	800740a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d107      	bne.n	800740a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f06f 0220 	mvn.w	r2, #32
 8007402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f8c7 	bl	8007598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007442:	bf00      	nop
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
	...

08007464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a40      	ldr	r2, [pc, #256]	; (8007578 <TIM_Base_SetConfig+0x114>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d013      	beq.n	80074a4 <TIM_Base_SetConfig+0x40>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007482:	d00f      	beq.n	80074a4 <TIM_Base_SetConfig+0x40>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a3d      	ldr	r2, [pc, #244]	; (800757c <TIM_Base_SetConfig+0x118>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00b      	beq.n	80074a4 <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a3c      	ldr	r2, [pc, #240]	; (8007580 <TIM_Base_SetConfig+0x11c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d007      	beq.n	80074a4 <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a3b      	ldr	r2, [pc, #236]	; (8007584 <TIM_Base_SetConfig+0x120>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d003      	beq.n	80074a4 <TIM_Base_SetConfig+0x40>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a3a      	ldr	r2, [pc, #232]	; (8007588 <TIM_Base_SetConfig+0x124>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d108      	bne.n	80074b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a2f      	ldr	r2, [pc, #188]	; (8007578 <TIM_Base_SetConfig+0x114>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d01f      	beq.n	80074fe <TIM_Base_SetConfig+0x9a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c4:	d01b      	beq.n	80074fe <TIM_Base_SetConfig+0x9a>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a2c      	ldr	r2, [pc, #176]	; (800757c <TIM_Base_SetConfig+0x118>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d017      	beq.n	80074fe <TIM_Base_SetConfig+0x9a>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a2b      	ldr	r2, [pc, #172]	; (8007580 <TIM_Base_SetConfig+0x11c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d013      	beq.n	80074fe <TIM_Base_SetConfig+0x9a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a2a      	ldr	r2, [pc, #168]	; (8007584 <TIM_Base_SetConfig+0x120>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00f      	beq.n	80074fe <TIM_Base_SetConfig+0x9a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a29      	ldr	r2, [pc, #164]	; (8007588 <TIM_Base_SetConfig+0x124>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00b      	beq.n	80074fe <TIM_Base_SetConfig+0x9a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a28      	ldr	r2, [pc, #160]	; (800758c <TIM_Base_SetConfig+0x128>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d007      	beq.n	80074fe <TIM_Base_SetConfig+0x9a>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a27      	ldr	r2, [pc, #156]	; (8007590 <TIM_Base_SetConfig+0x12c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d003      	beq.n	80074fe <TIM_Base_SetConfig+0x9a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a26      	ldr	r2, [pc, #152]	; (8007594 <TIM_Base_SetConfig+0x130>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d108      	bne.n	8007510 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4313      	orrs	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a10      	ldr	r2, [pc, #64]	; (8007578 <TIM_Base_SetConfig+0x114>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00f      	beq.n	800755c <TIM_Base_SetConfig+0xf8>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a12      	ldr	r2, [pc, #72]	; (8007588 <TIM_Base_SetConfig+0x124>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d00b      	beq.n	800755c <TIM_Base_SetConfig+0xf8>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a11      	ldr	r2, [pc, #68]	; (800758c <TIM_Base_SetConfig+0x128>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d007      	beq.n	800755c <TIM_Base_SetConfig+0xf8>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a10      	ldr	r2, [pc, #64]	; (8007590 <TIM_Base_SetConfig+0x12c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d003      	beq.n	800755c <TIM_Base_SetConfig+0xf8>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a0f      	ldr	r2, [pc, #60]	; (8007594 <TIM_Base_SetConfig+0x130>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d103      	bne.n	8007564 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	691a      	ldr	r2, [r3, #16]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	615a      	str	r2, [r3, #20]
}
 800756a:	bf00      	nop
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	40010000 	.word	0x40010000
 800757c:	40000400 	.word	0x40000400
 8007580:	40000800 	.word	0x40000800
 8007584:	40000c00 	.word	0x40000c00
 8007588:	40010400 	.word	0x40010400
 800758c:	40014000 	.word	0x40014000
 8007590:	40014400 	.word	0x40014400
 8007594:	40014800 	.word	0x40014800

08007598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e042      	b.n	800766c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7f9 fd5d 	bl	80010b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2224      	movs	r2, #36	; 0x24
 8007602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fbe2 	bl	8007de0 <UART_SetConfig>
 800761c:	4603      	mov	r3, r0
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e022      	b.n	800766c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 f936 	bl	80088a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689a      	ldr	r2, [r3, #8]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f9bd 	bl	80089e4 <UART_CheckIdleState>
 800766a:	4603      	mov	r3, r0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	; 0x28
 8007678:	af02      	add	r7, sp, #8
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	4613      	mov	r3, r2
 8007682:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800768a:	2b20      	cmp	r3, #32
 800768c:	f040 8083 	bne.w	8007796 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <HAL_UART_Transmit+0x28>
 8007696:	88fb      	ldrh	r3, [r7, #6]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e07b      	b.n	8007798 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d101      	bne.n	80076ae <HAL_UART_Transmit+0x3a>
 80076aa:	2302      	movs	r3, #2
 80076ac:	e074      	b.n	8007798 <HAL_UART_Transmit+0x124>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2221      	movs	r2, #33	; 0x21
 80076c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076c6:	f7f9 ff3b 	bl	8001540 <HAL_GetTick>
 80076ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	88fa      	ldrh	r2, [r7, #6]
 80076d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	88fa      	ldrh	r2, [r7, #6]
 80076d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e4:	d108      	bne.n	80076f8 <HAL_UART_Transmit+0x84>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d104      	bne.n	80076f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	61bb      	str	r3, [r7, #24]
 80076f6:	e003      	b.n	8007700 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007708:	e02c      	b.n	8007764 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2200      	movs	r2, #0
 8007712:	2180      	movs	r1, #128	; 0x80
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f001 f9b0 	bl	8008a7a <UART_WaitOnFlagUntilTimeout>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e039      	b.n	8007798 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10b      	bne.n	8007742 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007738:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	3302      	adds	r3, #2
 800773e:	61bb      	str	r3, [r7, #24]
 8007740:	e007      	b.n	8007752 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	3301      	adds	r3, #1
 8007750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800776a:	b29b      	uxth	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1cc      	bne.n	800770a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2200      	movs	r2, #0
 8007778:	2140      	movs	r1, #64	; 0x40
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f001 f97d 	bl	8008a7a <UART_WaitOnFlagUntilTimeout>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e006      	b.n	8007798 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2220      	movs	r2, #32
 800778e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	e000      	b.n	8007798 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007796:	2302      	movs	r3, #2
  }
}
 8007798:	4618      	mov	r0, r3
 800779a:	3720      	adds	r7, #32
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	4613      	mov	r3, r2
 80077ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b4:	2b20      	cmp	r3, #32
 80077b6:	d131      	bne.n	800781c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <HAL_UART_Receive_IT+0x24>
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e02a      	b.n	800781e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_UART_Receive_IT+0x36>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e023      	b.n	800781e <HAL_UART_Receive_IT+0x7e>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a0f      	ldr	r2, [pc, #60]	; (8007828 <HAL_UART_Receive_IT+0x88>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00e      	beq.n	800780c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d007      	beq.n	800780c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800780a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800780c:	88fb      	ldrh	r3, [r7, #6]
 800780e:	461a      	mov	r2, r3
 8007810:	68b9      	ldr	r1, [r7, #8]
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f001 f9b2 	bl	8008b7c <UART_Start_Receive_IT>
 8007818:	4603      	mov	r3, r0
 800781a:	e000      	b.n	800781e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800781c:	2302      	movs	r3, #2
  }
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	58000c00 	.word	0x58000c00

0800782c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007852:	4013      	ands	r3, r2
 8007854:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d118      	bne.n	800788e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d013      	beq.n	800788e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b00      	cmp	r3, #0
 800786e:	d104      	bne.n	800787a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d009      	beq.n	800788e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 8282 	beq.w	8007d88 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	4798      	blx	r3
      }
      return;
 800788c:	e27c      	b.n	8007d88 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 80ef 	beq.w	8007a74 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	4b73      	ldr	r3, [pc, #460]	; (8007a68 <HAL_UART_IRQHandler+0x23c>)
 800789a:	4013      	ands	r3, r2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d105      	bne.n	80078ac <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	4b72      	ldr	r3, [pc, #456]	; (8007a6c <HAL_UART_IRQHandler+0x240>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 80e4 	beq.w	8007a74 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d010      	beq.n	80078d8 <HAL_UART_IRQHandler+0xac>
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2201      	movs	r2, #1
 80078c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078ce:	f043 0201 	orr.w	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d010      	beq.n	8007904 <HAL_UART_IRQHandler+0xd8>
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00b      	beq.n	8007904 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2202      	movs	r2, #2
 80078f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078fa:	f043 0204 	orr.w	r2, r3, #4
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b00      	cmp	r3, #0
 800790c:	d010      	beq.n	8007930 <HAL_UART_IRQHandler+0x104>
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00b      	beq.n	8007930 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2204      	movs	r2, #4
 800791e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007926:	f043 0202 	orr.w	r2, r3, #2
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d015      	beq.n	8007966 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d104      	bne.n	800794e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	4b48      	ldr	r3, [pc, #288]	; (8007a68 <HAL_UART_IRQHandler+0x23c>)
 8007948:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00b      	beq.n	8007966 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2208      	movs	r2, #8
 8007954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800795c:	f043 0208 	orr.w	r2, r3, #8
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800796c:	2b00      	cmp	r3, #0
 800796e:	d011      	beq.n	8007994 <HAL_UART_IRQHandler+0x168>
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00c      	beq.n	8007994 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800798a:	f043 0220 	orr.w	r2, r3, #32
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 81f6 	beq.w	8007d8c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	f003 0320 	and.w	r3, r3, #32
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d011      	beq.n	80079ce <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	f003 0320 	and.w	r3, r3, #32
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d104      	bne.n	80079be <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d007      	beq.n	80079ce <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d003      	beq.n	80079ce <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d004      	beq.n	80079ee <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d031      	beq.n	8007a52 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 f982 	bl	8008cf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fe:	2b40      	cmp	r3, #64	; 0x40
 8007a00:	d123      	bne.n	8007a4a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a10:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d013      	beq.n	8007a42 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a1e:	4a14      	ldr	r2, [pc, #80]	; (8007a70 <HAL_UART_IRQHandler+0x244>)
 8007a20:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fa fa08 	bl	8001e3c <HAL_DMA_Abort_IT>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d017      	beq.n	8007a62 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a40:	e00f      	b.n	8007a62 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f9b6 	bl	8007db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a48:	e00b      	b.n	8007a62 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f9b2 	bl	8007db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a50:	e007      	b.n	8007a62 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f9ae 	bl	8007db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007a60:	e194      	b.n	8007d8c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a62:	bf00      	nop
    return;
 8007a64:	e192      	b.n	8007d8c <HAL_UART_IRQHandler+0x560>
 8007a66:	bf00      	nop
 8007a68:	10000001 	.word	0x10000001
 8007a6c:	04000120 	.word	0x04000120
 8007a70:	08008d5d 	.word	0x08008d5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	f040 810f 	bne.w	8007c9c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8109 	beq.w	8007c9c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f003 0310 	and.w	r3, r3, #16
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8103 	beq.w	8007c9c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2210      	movs	r2, #16
 8007a9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa8:	2b40      	cmp	r3, #64	; 0x40
 8007aaa:	f040 80bb 	bne.w	8007c24 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a96      	ldr	r2, [pc, #600]	; (8007d10 <HAL_UART_IRQHandler+0x4e4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d059      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a94      	ldr	r2, [pc, #592]	; (8007d14 <HAL_UART_IRQHandler+0x4e8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d053      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a92      	ldr	r2, [pc, #584]	; (8007d18 <HAL_UART_IRQHandler+0x4ec>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d04d      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a90      	ldr	r2, [pc, #576]	; (8007d1c <HAL_UART_IRQHandler+0x4f0>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d047      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a8e      	ldr	r2, [pc, #568]	; (8007d20 <HAL_UART_IRQHandler+0x4f4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d041      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a8c      	ldr	r2, [pc, #560]	; (8007d24 <HAL_UART_IRQHandler+0x4f8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d03b      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a8a      	ldr	r2, [pc, #552]	; (8007d28 <HAL_UART_IRQHandler+0x4fc>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d035      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a88      	ldr	r2, [pc, #544]	; (8007d2c <HAL_UART_IRQHandler+0x500>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d02f      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a86      	ldr	r2, [pc, #536]	; (8007d30 <HAL_UART_IRQHandler+0x504>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d029      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a84      	ldr	r2, [pc, #528]	; (8007d34 <HAL_UART_IRQHandler+0x508>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d023      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a82      	ldr	r2, [pc, #520]	; (8007d38 <HAL_UART_IRQHandler+0x50c>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d01d      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a80      	ldr	r2, [pc, #512]	; (8007d3c <HAL_UART_IRQHandler+0x510>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d017      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a7e      	ldr	r2, [pc, #504]	; (8007d40 <HAL_UART_IRQHandler+0x514>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d011      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a7c      	ldr	r2, [pc, #496]	; (8007d44 <HAL_UART_IRQHandler+0x518>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d00b      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a7a      	ldr	r2, [pc, #488]	; (8007d48 <HAL_UART_IRQHandler+0x51c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d005      	beq.n	8007b6e <HAL_UART_IRQHandler+0x342>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a78      	ldr	r2, [pc, #480]	; (8007d4c <HAL_UART_IRQHandler+0x520>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d105      	bne.n	8007b7a <HAL_UART_IRQHandler+0x34e>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	e004      	b.n	8007b84 <HAL_UART_IRQHandler+0x358>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8007b86:	893b      	ldrh	r3, [r7, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 8101 	beq.w	8007d90 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b94:	893a      	ldrh	r2, [r7, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	f080 80fa 	bcs.w	8007d90 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	893a      	ldrh	r2, [r7, #8]
 8007ba0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bae:	d02b      	beq.n	8007c08 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bbe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0201 	bic.w	r2, r2, #1
 8007bce:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bde:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 0210 	bic.w	r2, r2, #16
 8007bfc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7f9 fdfc 	bl	8001800 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f8d3 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c22:	e0b5      	b.n	8007d90 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80a8 	beq.w	8007d94 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8007c44:	897b      	ldrh	r3, [r7, #10]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 80a4 	beq.w	8007d94 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c5a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6899      	ldr	r1, [r3, #8]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	4b3a      	ldr	r3, [pc, #232]	; (8007d50 <HAL_UART_IRQHandler+0x524>)
 8007c68:	400b      	ands	r3, r1
 8007c6a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0210 	bic.w	r2, r2, #16
 8007c8e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c90:	897b      	ldrh	r3, [r7, #10]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f897 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c9a:	e07b      	b.n	8007d94 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00d      	beq.n	8007cc2 <HAL_UART_IRQHandler+0x496>
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d008      	beq.n	8007cc2 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007cb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f001 fb5a 	bl	8009374 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cc0:	e06b      	b.n	8007d9a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d012      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d104      	bne.n	8007ce0 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d008      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d057      	beq.n	8007d98 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	4798      	blx	r3
    }
    return;
 8007cf0:	e052      	b.n	8007d98 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d02b      	beq.n	8007d54 <HAL_UART_IRQHandler+0x528>
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d026      	beq.n	8007d54 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f001 f83e 	bl	8008d88 <UART_EndTransmit_IT>
    return;
 8007d0c:	e045      	b.n	8007d9a <HAL_UART_IRQHandler+0x56e>
 8007d0e:	bf00      	nop
 8007d10:	40020010 	.word	0x40020010
 8007d14:	40020028 	.word	0x40020028
 8007d18:	40020040 	.word	0x40020040
 8007d1c:	40020058 	.word	0x40020058
 8007d20:	40020070 	.word	0x40020070
 8007d24:	40020088 	.word	0x40020088
 8007d28:	400200a0 	.word	0x400200a0
 8007d2c:	400200b8 	.word	0x400200b8
 8007d30:	40020410 	.word	0x40020410
 8007d34:	40020428 	.word	0x40020428
 8007d38:	40020440 	.word	0x40020440
 8007d3c:	40020458 	.word	0x40020458
 8007d40:	40020470 	.word	0x40020470
 8007d44:	40020488 	.word	0x40020488
 8007d48:	400204a0 	.word	0x400204a0
 8007d4c:	400204b8 	.word	0x400204b8
 8007d50:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d008      	beq.n	8007d70 <HAL_UART_IRQHandler+0x544>
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 fb17 	bl	800939c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d6e:	e014      	b.n	8007d9a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00f      	beq.n	8007d9a <HAL_UART_IRQHandler+0x56e>
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	da0c      	bge.n	8007d9a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f001 fb01 	bl	8009388 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d86:	e008      	b.n	8007d9a <HAL_UART_IRQHandler+0x56e>
      return;
 8007d88:	bf00      	nop
 8007d8a:	e006      	b.n	8007d9a <HAL_UART_IRQHandler+0x56e>
    return;
 8007d8c:	bf00      	nop
 8007d8e:	e004      	b.n	8007d9a <HAL_UART_IRQHandler+0x56e>
      return;
 8007d90:	bf00      	nop
 8007d92:	e002      	b.n	8007d9a <HAL_UART_IRQHandler+0x56e>
      return;
 8007d94:	bf00      	nop
 8007d96:	e000      	b.n	8007d9a <HAL_UART_IRQHandler+0x56e>
    return;
 8007d98:	bf00      	nop
  }
}
 8007d9a:	3720      	adds	r7, #32
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007de0:	b5b0      	push	{r4, r5, r7, lr}
 8007de2:	b08e      	sub	sp, #56	; 0x38
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	431a      	orrs	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	431a      	orrs	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	4bbf      	ldr	r3, [pc, #764]	; (800810c <UART_SetConfig+0x32c>)
 8007e0e:	4013      	ands	r3, r2
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	6812      	ldr	r2, [r2, #0]
 8007e14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e16:	430b      	orrs	r3, r1
 8007e18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4ab5      	ldr	r2, [pc, #724]	; (8008110 <UART_SetConfig+0x330>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d004      	beq.n	8007e4a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e46:	4313      	orrs	r3, r2
 8007e48:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	4bb0      	ldr	r3, [pc, #704]	; (8008114 <UART_SetConfig+0x334>)
 8007e52:	4013      	ands	r3, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e5a:	430b      	orrs	r3, r1
 8007e5c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	f023 010f 	bic.w	r1, r3, #15
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4aa7      	ldr	r2, [pc, #668]	; (8008118 <UART_SetConfig+0x338>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d176      	bne.n	8007f6c <UART_SetConfig+0x18c>
 8007e7e:	4ba7      	ldr	r3, [pc, #668]	; (800811c <UART_SetConfig+0x33c>)
 8007e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e86:	2b28      	cmp	r3, #40	; 0x28
 8007e88:	d86c      	bhi.n	8007f64 <UART_SetConfig+0x184>
 8007e8a:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <UART_SetConfig+0xb0>)
 8007e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e90:	08007f35 	.word	0x08007f35
 8007e94:	08007f65 	.word	0x08007f65
 8007e98:	08007f65 	.word	0x08007f65
 8007e9c:	08007f65 	.word	0x08007f65
 8007ea0:	08007f65 	.word	0x08007f65
 8007ea4:	08007f65 	.word	0x08007f65
 8007ea8:	08007f65 	.word	0x08007f65
 8007eac:	08007f65 	.word	0x08007f65
 8007eb0:	08007f3d 	.word	0x08007f3d
 8007eb4:	08007f65 	.word	0x08007f65
 8007eb8:	08007f65 	.word	0x08007f65
 8007ebc:	08007f65 	.word	0x08007f65
 8007ec0:	08007f65 	.word	0x08007f65
 8007ec4:	08007f65 	.word	0x08007f65
 8007ec8:	08007f65 	.word	0x08007f65
 8007ecc:	08007f65 	.word	0x08007f65
 8007ed0:	08007f45 	.word	0x08007f45
 8007ed4:	08007f65 	.word	0x08007f65
 8007ed8:	08007f65 	.word	0x08007f65
 8007edc:	08007f65 	.word	0x08007f65
 8007ee0:	08007f65 	.word	0x08007f65
 8007ee4:	08007f65 	.word	0x08007f65
 8007ee8:	08007f65 	.word	0x08007f65
 8007eec:	08007f65 	.word	0x08007f65
 8007ef0:	08007f4d 	.word	0x08007f4d
 8007ef4:	08007f65 	.word	0x08007f65
 8007ef8:	08007f65 	.word	0x08007f65
 8007efc:	08007f65 	.word	0x08007f65
 8007f00:	08007f65 	.word	0x08007f65
 8007f04:	08007f65 	.word	0x08007f65
 8007f08:	08007f65 	.word	0x08007f65
 8007f0c:	08007f65 	.word	0x08007f65
 8007f10:	08007f55 	.word	0x08007f55
 8007f14:	08007f65 	.word	0x08007f65
 8007f18:	08007f65 	.word	0x08007f65
 8007f1c:	08007f65 	.word	0x08007f65
 8007f20:	08007f65 	.word	0x08007f65
 8007f24:	08007f65 	.word	0x08007f65
 8007f28:	08007f65 	.word	0x08007f65
 8007f2c:	08007f65 	.word	0x08007f65
 8007f30:	08007f5d 	.word	0x08007f5d
 8007f34:	2301      	movs	r3, #1
 8007f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f3a:	e222      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f42:	e21e      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007f44:	2308      	movs	r3, #8
 8007f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f4a:	e21a      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f52:	e216      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007f54:	2320      	movs	r3, #32
 8007f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f5a:	e212      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007f5c:	2340      	movs	r3, #64	; 0x40
 8007f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f62:	e20e      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007f64:	2380      	movs	r3, #128	; 0x80
 8007f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f6a:	e20a      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a6b      	ldr	r2, [pc, #428]	; (8008120 <UART_SetConfig+0x340>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d130      	bne.n	8007fd8 <UART_SetConfig+0x1f8>
 8007f76:	4b69      	ldr	r3, [pc, #420]	; (800811c <UART_SetConfig+0x33c>)
 8007f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	d826      	bhi.n	8007fd0 <UART_SetConfig+0x1f0>
 8007f82:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0x1a8>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	08007fa1 	.word	0x08007fa1
 8007f8c:	08007fa9 	.word	0x08007fa9
 8007f90:	08007fb1 	.word	0x08007fb1
 8007f94:	08007fb9 	.word	0x08007fb9
 8007f98:	08007fc1 	.word	0x08007fc1
 8007f9c:	08007fc9 	.word	0x08007fc9
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fa6:	e1ec      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007fa8:	2304      	movs	r3, #4
 8007faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fae:	e1e8      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fb6:	e1e4      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007fb8:	2310      	movs	r3, #16
 8007fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fbe:	e1e0      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007fc0:	2320      	movs	r3, #32
 8007fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fc6:	e1dc      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007fc8:	2340      	movs	r3, #64	; 0x40
 8007fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fce:	e1d8      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007fd0:	2380      	movs	r3, #128	; 0x80
 8007fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fd6:	e1d4      	b.n	8008382 <UART_SetConfig+0x5a2>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a51      	ldr	r2, [pc, #324]	; (8008124 <UART_SetConfig+0x344>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d130      	bne.n	8008044 <UART_SetConfig+0x264>
 8007fe2:	4b4e      	ldr	r3, [pc, #312]	; (800811c <UART_SetConfig+0x33c>)
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	2b05      	cmp	r3, #5
 8007fec:	d826      	bhi.n	800803c <UART_SetConfig+0x25c>
 8007fee:	a201      	add	r2, pc, #4	; (adr r2, 8007ff4 <UART_SetConfig+0x214>)
 8007ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff4:	0800800d 	.word	0x0800800d
 8007ff8:	08008015 	.word	0x08008015
 8007ffc:	0800801d 	.word	0x0800801d
 8008000:	08008025 	.word	0x08008025
 8008004:	0800802d 	.word	0x0800802d
 8008008:	08008035 	.word	0x08008035
 800800c:	2300      	movs	r3, #0
 800800e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008012:	e1b6      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008014:	2304      	movs	r3, #4
 8008016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800801a:	e1b2      	b.n	8008382 <UART_SetConfig+0x5a2>
 800801c:	2308      	movs	r3, #8
 800801e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008022:	e1ae      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008024:	2310      	movs	r3, #16
 8008026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800802a:	e1aa      	b.n	8008382 <UART_SetConfig+0x5a2>
 800802c:	2320      	movs	r3, #32
 800802e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008032:	e1a6      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008034:	2340      	movs	r3, #64	; 0x40
 8008036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800803a:	e1a2      	b.n	8008382 <UART_SetConfig+0x5a2>
 800803c:	2380      	movs	r3, #128	; 0x80
 800803e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008042:	e19e      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a37      	ldr	r2, [pc, #220]	; (8008128 <UART_SetConfig+0x348>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d130      	bne.n	80080b0 <UART_SetConfig+0x2d0>
 800804e:	4b33      	ldr	r3, [pc, #204]	; (800811c <UART_SetConfig+0x33c>)
 8008050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	2b05      	cmp	r3, #5
 8008058:	d826      	bhi.n	80080a8 <UART_SetConfig+0x2c8>
 800805a:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <UART_SetConfig+0x280>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	08008079 	.word	0x08008079
 8008064:	08008081 	.word	0x08008081
 8008068:	08008089 	.word	0x08008089
 800806c:	08008091 	.word	0x08008091
 8008070:	08008099 	.word	0x08008099
 8008074:	080080a1 	.word	0x080080a1
 8008078:	2300      	movs	r3, #0
 800807a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800807e:	e180      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008080:	2304      	movs	r3, #4
 8008082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008086:	e17c      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008088:	2308      	movs	r3, #8
 800808a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800808e:	e178      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008090:	2310      	movs	r3, #16
 8008092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008096:	e174      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008098:	2320      	movs	r3, #32
 800809a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800809e:	e170      	b.n	8008382 <UART_SetConfig+0x5a2>
 80080a0:	2340      	movs	r3, #64	; 0x40
 80080a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a6:	e16c      	b.n	8008382 <UART_SetConfig+0x5a2>
 80080a8:	2380      	movs	r3, #128	; 0x80
 80080aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ae:	e168      	b.n	8008382 <UART_SetConfig+0x5a2>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a1d      	ldr	r2, [pc, #116]	; (800812c <UART_SetConfig+0x34c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d142      	bne.n	8008140 <UART_SetConfig+0x360>
 80080ba:	4b18      	ldr	r3, [pc, #96]	; (800811c <UART_SetConfig+0x33c>)
 80080bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080be:	f003 0307 	and.w	r3, r3, #7
 80080c2:	2b05      	cmp	r3, #5
 80080c4:	d838      	bhi.n	8008138 <UART_SetConfig+0x358>
 80080c6:	a201      	add	r2, pc, #4	; (adr r2, 80080cc <UART_SetConfig+0x2ec>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	080080e5 	.word	0x080080e5
 80080d0:	080080ed 	.word	0x080080ed
 80080d4:	080080f5 	.word	0x080080f5
 80080d8:	080080fd 	.word	0x080080fd
 80080dc:	08008105 	.word	0x08008105
 80080e0:	08008131 	.word	0x08008131
 80080e4:	2300      	movs	r3, #0
 80080e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ea:	e14a      	b.n	8008382 <UART_SetConfig+0x5a2>
 80080ec:	2304      	movs	r3, #4
 80080ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080f2:	e146      	b.n	8008382 <UART_SetConfig+0x5a2>
 80080f4:	2308      	movs	r3, #8
 80080f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080fa:	e142      	b.n	8008382 <UART_SetConfig+0x5a2>
 80080fc:	2310      	movs	r3, #16
 80080fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008102:	e13e      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008104:	2320      	movs	r3, #32
 8008106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800810a:	e13a      	b.n	8008382 <UART_SetConfig+0x5a2>
 800810c:	cfff69f3 	.word	0xcfff69f3
 8008110:	58000c00 	.word	0x58000c00
 8008114:	11fff4ff 	.word	0x11fff4ff
 8008118:	40011000 	.word	0x40011000
 800811c:	58024400 	.word	0x58024400
 8008120:	40004400 	.word	0x40004400
 8008124:	40004800 	.word	0x40004800
 8008128:	40004c00 	.word	0x40004c00
 800812c:	40005000 	.word	0x40005000
 8008130:	2340      	movs	r3, #64	; 0x40
 8008132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008136:	e124      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008138:	2380      	movs	r3, #128	; 0x80
 800813a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800813e:	e120      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4acc      	ldr	r2, [pc, #816]	; (8008478 <UART_SetConfig+0x698>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d176      	bne.n	8008238 <UART_SetConfig+0x458>
 800814a:	4bcc      	ldr	r3, [pc, #816]	; (800847c <UART_SetConfig+0x69c>)
 800814c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008152:	2b28      	cmp	r3, #40	; 0x28
 8008154:	d86c      	bhi.n	8008230 <UART_SetConfig+0x450>
 8008156:	a201      	add	r2, pc, #4	; (adr r2, 800815c <UART_SetConfig+0x37c>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	08008201 	.word	0x08008201
 8008160:	08008231 	.word	0x08008231
 8008164:	08008231 	.word	0x08008231
 8008168:	08008231 	.word	0x08008231
 800816c:	08008231 	.word	0x08008231
 8008170:	08008231 	.word	0x08008231
 8008174:	08008231 	.word	0x08008231
 8008178:	08008231 	.word	0x08008231
 800817c:	08008209 	.word	0x08008209
 8008180:	08008231 	.word	0x08008231
 8008184:	08008231 	.word	0x08008231
 8008188:	08008231 	.word	0x08008231
 800818c:	08008231 	.word	0x08008231
 8008190:	08008231 	.word	0x08008231
 8008194:	08008231 	.word	0x08008231
 8008198:	08008231 	.word	0x08008231
 800819c:	08008211 	.word	0x08008211
 80081a0:	08008231 	.word	0x08008231
 80081a4:	08008231 	.word	0x08008231
 80081a8:	08008231 	.word	0x08008231
 80081ac:	08008231 	.word	0x08008231
 80081b0:	08008231 	.word	0x08008231
 80081b4:	08008231 	.word	0x08008231
 80081b8:	08008231 	.word	0x08008231
 80081bc:	08008219 	.word	0x08008219
 80081c0:	08008231 	.word	0x08008231
 80081c4:	08008231 	.word	0x08008231
 80081c8:	08008231 	.word	0x08008231
 80081cc:	08008231 	.word	0x08008231
 80081d0:	08008231 	.word	0x08008231
 80081d4:	08008231 	.word	0x08008231
 80081d8:	08008231 	.word	0x08008231
 80081dc:	08008221 	.word	0x08008221
 80081e0:	08008231 	.word	0x08008231
 80081e4:	08008231 	.word	0x08008231
 80081e8:	08008231 	.word	0x08008231
 80081ec:	08008231 	.word	0x08008231
 80081f0:	08008231 	.word	0x08008231
 80081f4:	08008231 	.word	0x08008231
 80081f8:	08008231 	.word	0x08008231
 80081fc:	08008229 	.word	0x08008229
 8008200:	2301      	movs	r3, #1
 8008202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008206:	e0bc      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008208:	2304      	movs	r3, #4
 800820a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800820e:	e0b8      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008210:	2308      	movs	r3, #8
 8008212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008216:	e0b4      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008218:	2310      	movs	r3, #16
 800821a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800821e:	e0b0      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008220:	2320      	movs	r3, #32
 8008222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008226:	e0ac      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008228:	2340      	movs	r3, #64	; 0x40
 800822a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800822e:	e0a8      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008230:	2380      	movs	r3, #128	; 0x80
 8008232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008236:	e0a4      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a90      	ldr	r2, [pc, #576]	; (8008480 <UART_SetConfig+0x6a0>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d130      	bne.n	80082a4 <UART_SetConfig+0x4c4>
 8008242:	4b8e      	ldr	r3, [pc, #568]	; (800847c <UART_SetConfig+0x69c>)
 8008244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	2b05      	cmp	r3, #5
 800824c:	d826      	bhi.n	800829c <UART_SetConfig+0x4bc>
 800824e:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <UART_SetConfig+0x474>)
 8008250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008254:	0800826d 	.word	0x0800826d
 8008258:	08008275 	.word	0x08008275
 800825c:	0800827d 	.word	0x0800827d
 8008260:	08008285 	.word	0x08008285
 8008264:	0800828d 	.word	0x0800828d
 8008268:	08008295 	.word	0x08008295
 800826c:	2300      	movs	r3, #0
 800826e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008272:	e086      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008274:	2304      	movs	r3, #4
 8008276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800827a:	e082      	b.n	8008382 <UART_SetConfig+0x5a2>
 800827c:	2308      	movs	r3, #8
 800827e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008282:	e07e      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008284:	2310      	movs	r3, #16
 8008286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800828a:	e07a      	b.n	8008382 <UART_SetConfig+0x5a2>
 800828c:	2320      	movs	r3, #32
 800828e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008292:	e076      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008294:	2340      	movs	r3, #64	; 0x40
 8008296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800829a:	e072      	b.n	8008382 <UART_SetConfig+0x5a2>
 800829c:	2380      	movs	r3, #128	; 0x80
 800829e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082a2:	e06e      	b.n	8008382 <UART_SetConfig+0x5a2>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a76      	ldr	r2, [pc, #472]	; (8008484 <UART_SetConfig+0x6a4>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d130      	bne.n	8008310 <UART_SetConfig+0x530>
 80082ae:	4b73      	ldr	r3, [pc, #460]	; (800847c <UART_SetConfig+0x69c>)
 80082b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	2b05      	cmp	r3, #5
 80082b8:	d826      	bhi.n	8008308 <UART_SetConfig+0x528>
 80082ba:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <UART_SetConfig+0x4e0>)
 80082bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c0:	080082d9 	.word	0x080082d9
 80082c4:	080082e1 	.word	0x080082e1
 80082c8:	080082e9 	.word	0x080082e9
 80082cc:	080082f1 	.word	0x080082f1
 80082d0:	080082f9 	.word	0x080082f9
 80082d4:	08008301 	.word	0x08008301
 80082d8:	2300      	movs	r3, #0
 80082da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082de:	e050      	b.n	8008382 <UART_SetConfig+0x5a2>
 80082e0:	2304      	movs	r3, #4
 80082e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082e6:	e04c      	b.n	8008382 <UART_SetConfig+0x5a2>
 80082e8:	2308      	movs	r3, #8
 80082ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ee:	e048      	b.n	8008382 <UART_SetConfig+0x5a2>
 80082f0:	2310      	movs	r3, #16
 80082f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082f6:	e044      	b.n	8008382 <UART_SetConfig+0x5a2>
 80082f8:	2320      	movs	r3, #32
 80082fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082fe:	e040      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008300:	2340      	movs	r3, #64	; 0x40
 8008302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008306:	e03c      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008308:	2380      	movs	r3, #128	; 0x80
 800830a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800830e:	e038      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a5c      	ldr	r2, [pc, #368]	; (8008488 <UART_SetConfig+0x6a8>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d130      	bne.n	800837c <UART_SetConfig+0x59c>
 800831a:	4b58      	ldr	r3, [pc, #352]	; (800847c <UART_SetConfig+0x69c>)
 800831c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831e:	f003 0307 	and.w	r3, r3, #7
 8008322:	2b05      	cmp	r3, #5
 8008324:	d826      	bhi.n	8008374 <UART_SetConfig+0x594>
 8008326:	a201      	add	r2, pc, #4	; (adr r2, 800832c <UART_SetConfig+0x54c>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	08008345 	.word	0x08008345
 8008330:	0800834d 	.word	0x0800834d
 8008334:	08008355 	.word	0x08008355
 8008338:	0800835d 	.word	0x0800835d
 800833c:	08008365 	.word	0x08008365
 8008340:	0800836d 	.word	0x0800836d
 8008344:	2302      	movs	r3, #2
 8008346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800834a:	e01a      	b.n	8008382 <UART_SetConfig+0x5a2>
 800834c:	2304      	movs	r3, #4
 800834e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008352:	e016      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008354:	2308      	movs	r3, #8
 8008356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800835a:	e012      	b.n	8008382 <UART_SetConfig+0x5a2>
 800835c:	2310      	movs	r3, #16
 800835e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008362:	e00e      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008364:	2320      	movs	r3, #32
 8008366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800836a:	e00a      	b.n	8008382 <UART_SetConfig+0x5a2>
 800836c:	2340      	movs	r3, #64	; 0x40
 800836e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008372:	e006      	b.n	8008382 <UART_SetConfig+0x5a2>
 8008374:	2380      	movs	r3, #128	; 0x80
 8008376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800837a:	e002      	b.n	8008382 <UART_SetConfig+0x5a2>
 800837c:	2380      	movs	r3, #128	; 0x80
 800837e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a40      	ldr	r2, [pc, #256]	; (8008488 <UART_SetConfig+0x6a8>)
 8008388:	4293      	cmp	r3, r2
 800838a:	f040 80ef 	bne.w	800856c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800838e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008392:	2b20      	cmp	r3, #32
 8008394:	dc46      	bgt.n	8008424 <UART_SetConfig+0x644>
 8008396:	2b02      	cmp	r3, #2
 8008398:	f2c0 8081 	blt.w	800849e <UART_SetConfig+0x6be>
 800839c:	3b02      	subs	r3, #2
 800839e:	2b1e      	cmp	r3, #30
 80083a0:	d87d      	bhi.n	800849e <UART_SetConfig+0x6be>
 80083a2:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <UART_SetConfig+0x5c8>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	0800842b 	.word	0x0800842b
 80083ac:	0800849f 	.word	0x0800849f
 80083b0:	08008433 	.word	0x08008433
 80083b4:	0800849f 	.word	0x0800849f
 80083b8:	0800849f 	.word	0x0800849f
 80083bc:	0800849f 	.word	0x0800849f
 80083c0:	08008443 	.word	0x08008443
 80083c4:	0800849f 	.word	0x0800849f
 80083c8:	0800849f 	.word	0x0800849f
 80083cc:	0800849f 	.word	0x0800849f
 80083d0:	0800849f 	.word	0x0800849f
 80083d4:	0800849f 	.word	0x0800849f
 80083d8:	0800849f 	.word	0x0800849f
 80083dc:	0800849f 	.word	0x0800849f
 80083e0:	08008453 	.word	0x08008453
 80083e4:	0800849f 	.word	0x0800849f
 80083e8:	0800849f 	.word	0x0800849f
 80083ec:	0800849f 	.word	0x0800849f
 80083f0:	0800849f 	.word	0x0800849f
 80083f4:	0800849f 	.word	0x0800849f
 80083f8:	0800849f 	.word	0x0800849f
 80083fc:	0800849f 	.word	0x0800849f
 8008400:	0800849f 	.word	0x0800849f
 8008404:	0800849f 	.word	0x0800849f
 8008408:	0800849f 	.word	0x0800849f
 800840c:	0800849f 	.word	0x0800849f
 8008410:	0800849f 	.word	0x0800849f
 8008414:	0800849f 	.word	0x0800849f
 8008418:	0800849f 	.word	0x0800849f
 800841c:	0800849f 	.word	0x0800849f
 8008420:	08008491 	.word	0x08008491
 8008424:	2b40      	cmp	r3, #64	; 0x40
 8008426:	d036      	beq.n	8008496 <UART_SetConfig+0x6b6>
 8008428:	e039      	b.n	800849e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800842a:	f7fe f9e9 	bl	8006800 <HAL_RCCEx_GetD3PCLK1Freq>
 800842e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008430:	e03b      	b.n	80084aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008432:	f107 0314 	add.w	r3, r7, #20
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe f9f8 	bl	800682c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008440:	e033      	b.n	80084aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008442:	f107 0308 	add.w	r3, r7, #8
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fb44 	bl	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008450:	e02b      	b.n	80084aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008452:	4b0a      	ldr	r3, [pc, #40]	; (800847c <UART_SetConfig+0x69c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b00      	cmp	r3, #0
 800845c:	d009      	beq.n	8008472 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800845e:	4b07      	ldr	r3, [pc, #28]	; (800847c <UART_SetConfig+0x69c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	08db      	lsrs	r3, r3, #3
 8008464:	f003 0303 	and.w	r3, r3, #3
 8008468:	4a08      	ldr	r2, [pc, #32]	; (800848c <UART_SetConfig+0x6ac>)
 800846a:	fa22 f303 	lsr.w	r3, r2, r3
 800846e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008470:	e01b      	b.n	80084aa <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008472:	4b06      	ldr	r3, [pc, #24]	; (800848c <UART_SetConfig+0x6ac>)
 8008474:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008476:	e018      	b.n	80084aa <UART_SetConfig+0x6ca>
 8008478:	40011400 	.word	0x40011400
 800847c:	58024400 	.word	0x58024400
 8008480:	40007800 	.word	0x40007800
 8008484:	40007c00 	.word	0x40007c00
 8008488:	58000c00 	.word	0x58000c00
 800848c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008490:	4bc4      	ldr	r3, [pc, #784]	; (80087a4 <UART_SetConfig+0x9c4>)
 8008492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008494:	e009      	b.n	80084aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800849a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800849c:	e005      	b.n	80084aa <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80084a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 81da 	beq.w	8008866 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	4abc      	ldr	r2, [pc, #752]	; (80087a8 <UART_SetConfig+0x9c8>)
 80084b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084bc:	461a      	mov	r2, r3
 80084be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80084c4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	4613      	mov	r3, r2
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	4413      	add	r3, r2
 80084d0:	6a3a      	ldr	r2, [r7, #32]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d305      	bcc.n	80084e2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084dc:	6a3a      	ldr	r2, [r7, #32]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d903      	bls.n	80084ea <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80084e8:	e1bd      	b.n	8008866 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	4618      	mov	r0, r3
 80084ee:	f04f 0100 	mov.w	r1, #0
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	4aac      	ldr	r2, [pc, #688]	; (80087a8 <UART_SetConfig+0x9c8>)
 80084f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	f04f 0300 	mov.w	r3, #0
 8008502:	f7f7 ff45 	bl	8000390 <__aeabi_uldivmod>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4610      	mov	r0, r2
 800850c:	4619      	mov	r1, r3
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	020b      	lsls	r3, r1, #8
 8008518:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800851c:	0202      	lsls	r2, r0, #8
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	6849      	ldr	r1, [r1, #4]
 8008522:	0849      	lsrs	r1, r1, #1
 8008524:	4608      	mov	r0, r1
 8008526:	f04f 0100 	mov.w	r1, #0
 800852a:	1814      	adds	r4, r2, r0
 800852c:	eb43 0501 	adc.w	r5, r3, r1
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	461a      	mov	r2, r3
 8008536:	f04f 0300 	mov.w	r3, #0
 800853a:	4620      	mov	r0, r4
 800853c:	4629      	mov	r1, r5
 800853e:	f7f7 ff27 	bl	8000390 <__aeabi_uldivmod>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	4613      	mov	r3, r2
 8008548:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008550:	d308      	bcc.n	8008564 <UART_SetConfig+0x784>
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008558:	d204      	bcs.n	8008564 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008560:	60da      	str	r2, [r3, #12]
 8008562:	e180      	b.n	8008866 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800856a:	e17c      	b.n	8008866 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008574:	f040 80bf 	bne.w	80086f6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008578:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800857c:	2b20      	cmp	r3, #32
 800857e:	dc49      	bgt.n	8008614 <UART_SetConfig+0x834>
 8008580:	2b00      	cmp	r3, #0
 8008582:	db7c      	blt.n	800867e <UART_SetConfig+0x89e>
 8008584:	2b20      	cmp	r3, #32
 8008586:	d87a      	bhi.n	800867e <UART_SetConfig+0x89e>
 8008588:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <UART_SetConfig+0x7b0>)
 800858a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858e:	bf00      	nop
 8008590:	0800861b 	.word	0x0800861b
 8008594:	08008623 	.word	0x08008623
 8008598:	0800867f 	.word	0x0800867f
 800859c:	0800867f 	.word	0x0800867f
 80085a0:	0800862b 	.word	0x0800862b
 80085a4:	0800867f 	.word	0x0800867f
 80085a8:	0800867f 	.word	0x0800867f
 80085ac:	0800867f 	.word	0x0800867f
 80085b0:	0800863b 	.word	0x0800863b
 80085b4:	0800867f 	.word	0x0800867f
 80085b8:	0800867f 	.word	0x0800867f
 80085bc:	0800867f 	.word	0x0800867f
 80085c0:	0800867f 	.word	0x0800867f
 80085c4:	0800867f 	.word	0x0800867f
 80085c8:	0800867f 	.word	0x0800867f
 80085cc:	0800867f 	.word	0x0800867f
 80085d0:	0800864b 	.word	0x0800864b
 80085d4:	0800867f 	.word	0x0800867f
 80085d8:	0800867f 	.word	0x0800867f
 80085dc:	0800867f 	.word	0x0800867f
 80085e0:	0800867f 	.word	0x0800867f
 80085e4:	0800867f 	.word	0x0800867f
 80085e8:	0800867f 	.word	0x0800867f
 80085ec:	0800867f 	.word	0x0800867f
 80085f0:	0800867f 	.word	0x0800867f
 80085f4:	0800867f 	.word	0x0800867f
 80085f8:	0800867f 	.word	0x0800867f
 80085fc:	0800867f 	.word	0x0800867f
 8008600:	0800867f 	.word	0x0800867f
 8008604:	0800867f 	.word	0x0800867f
 8008608:	0800867f 	.word	0x0800867f
 800860c:	0800867f 	.word	0x0800867f
 8008610:	08008671 	.word	0x08008671
 8008614:	2b40      	cmp	r3, #64	; 0x40
 8008616:	d02e      	beq.n	8008676 <UART_SetConfig+0x896>
 8008618:	e031      	b.n	800867e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800861a:	f7fd f985 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 800861e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008620:	e033      	b.n	800868a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008622:	f7fd f997 	bl	8005954 <HAL_RCC_GetPCLK2Freq>
 8008626:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008628:	e02f      	b.n	800868a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800862a:	f107 0314 	add.w	r3, r7, #20
 800862e:	4618      	mov	r0, r3
 8008630:	f7fe f8fc 	bl	800682c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008638:	e027      	b.n	800868a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800863a:	f107 0308 	add.w	r3, r7, #8
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe fa48 	bl	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008648:	e01f      	b.n	800868a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800864a:	4b58      	ldr	r3, [pc, #352]	; (80087ac <UART_SetConfig+0x9cc>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0320 	and.w	r3, r3, #32
 8008652:	2b00      	cmp	r3, #0
 8008654:	d009      	beq.n	800866a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008656:	4b55      	ldr	r3, [pc, #340]	; (80087ac <UART_SetConfig+0x9cc>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	08db      	lsrs	r3, r3, #3
 800865c:	f003 0303 	and.w	r3, r3, #3
 8008660:	4a53      	ldr	r2, [pc, #332]	; (80087b0 <UART_SetConfig+0x9d0>)
 8008662:	fa22 f303 	lsr.w	r3, r2, r3
 8008666:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008668:	e00f      	b.n	800868a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800866a:	4b51      	ldr	r3, [pc, #324]	; (80087b0 <UART_SetConfig+0x9d0>)
 800866c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800866e:	e00c      	b.n	800868a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008670:	4b4c      	ldr	r3, [pc, #304]	; (80087a4 <UART_SetConfig+0x9c4>)
 8008672:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008674:	e009      	b.n	800868a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800867a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800867c:	e005      	b.n	800868a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008688:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 80ea 	beq.w	8008866 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	4a44      	ldr	r2, [pc, #272]	; (80087a8 <UART_SetConfig+0x9c8>)
 8008698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800869c:	461a      	mov	r2, r3
 800869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086a4:	005a      	lsls	r2, r3, #1
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	085b      	lsrs	r3, r3, #1
 80086ac:	441a      	add	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	2b0f      	cmp	r3, #15
 80086be:	d916      	bls.n	80086ee <UART_SetConfig+0x90e>
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c6:	d212      	bcs.n	80086ee <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	f023 030f 	bic.w	r3, r3, #15
 80086d0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	085b      	lsrs	r3, r3, #1
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f003 0307 	and.w	r3, r3, #7
 80086dc:	b29a      	uxth	r2, r3
 80086de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086e0:	4313      	orrs	r3, r2
 80086e2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80086ea:	60da      	str	r2, [r3, #12]
 80086ec:	e0bb      	b.n	8008866 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80086f4:	e0b7      	b.n	8008866 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80086fa:	2b20      	cmp	r3, #32
 80086fc:	dc4a      	bgt.n	8008794 <UART_SetConfig+0x9b4>
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f2c0 8086 	blt.w	8008810 <UART_SetConfig+0xa30>
 8008704:	2b20      	cmp	r3, #32
 8008706:	f200 8083 	bhi.w	8008810 <UART_SetConfig+0xa30>
 800870a:	a201      	add	r2, pc, #4	; (adr r2, 8008710 <UART_SetConfig+0x930>)
 800870c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008710:	0800879b 	.word	0x0800879b
 8008714:	080087b5 	.word	0x080087b5
 8008718:	08008811 	.word	0x08008811
 800871c:	08008811 	.word	0x08008811
 8008720:	080087bd 	.word	0x080087bd
 8008724:	08008811 	.word	0x08008811
 8008728:	08008811 	.word	0x08008811
 800872c:	08008811 	.word	0x08008811
 8008730:	080087cd 	.word	0x080087cd
 8008734:	08008811 	.word	0x08008811
 8008738:	08008811 	.word	0x08008811
 800873c:	08008811 	.word	0x08008811
 8008740:	08008811 	.word	0x08008811
 8008744:	08008811 	.word	0x08008811
 8008748:	08008811 	.word	0x08008811
 800874c:	08008811 	.word	0x08008811
 8008750:	080087dd 	.word	0x080087dd
 8008754:	08008811 	.word	0x08008811
 8008758:	08008811 	.word	0x08008811
 800875c:	08008811 	.word	0x08008811
 8008760:	08008811 	.word	0x08008811
 8008764:	08008811 	.word	0x08008811
 8008768:	08008811 	.word	0x08008811
 800876c:	08008811 	.word	0x08008811
 8008770:	08008811 	.word	0x08008811
 8008774:	08008811 	.word	0x08008811
 8008778:	08008811 	.word	0x08008811
 800877c:	08008811 	.word	0x08008811
 8008780:	08008811 	.word	0x08008811
 8008784:	08008811 	.word	0x08008811
 8008788:	08008811 	.word	0x08008811
 800878c:	08008811 	.word	0x08008811
 8008790:	08008803 	.word	0x08008803
 8008794:	2b40      	cmp	r3, #64	; 0x40
 8008796:	d037      	beq.n	8008808 <UART_SetConfig+0xa28>
 8008798:	e03a      	b.n	8008810 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800879a:	f7fd f8c5 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 800879e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80087a0:	e03c      	b.n	800881c <UART_SetConfig+0xa3c>
 80087a2:	bf00      	nop
 80087a4:	003d0900 	.word	0x003d0900
 80087a8:	0800d644 	.word	0x0800d644
 80087ac:	58024400 	.word	0x58024400
 80087b0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087b4:	f7fd f8ce 	bl	8005954 <HAL_RCC_GetPCLK2Freq>
 80087b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80087ba:	e02f      	b.n	800881c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087bc:	f107 0314 	add.w	r3, r7, #20
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fe f833 	bl	800682c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087ca:	e027      	b.n	800881c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087cc:	f107 0308 	add.w	r3, r7, #8
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fe f97f 	bl	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087da:	e01f      	b.n	800881c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087dc:	4b2c      	ldr	r3, [pc, #176]	; (8008890 <UART_SetConfig+0xab0>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0320 	and.w	r3, r3, #32
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d009      	beq.n	80087fc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087e8:	4b29      	ldr	r3, [pc, #164]	; (8008890 <UART_SetConfig+0xab0>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	08db      	lsrs	r3, r3, #3
 80087ee:	f003 0303 	and.w	r3, r3, #3
 80087f2:	4a28      	ldr	r2, [pc, #160]	; (8008894 <UART_SetConfig+0xab4>)
 80087f4:	fa22 f303 	lsr.w	r3, r2, r3
 80087f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087fa:	e00f      	b.n	800881c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80087fc:	4b25      	ldr	r3, [pc, #148]	; (8008894 <UART_SetConfig+0xab4>)
 80087fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008800:	e00c      	b.n	800881c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008802:	4b25      	ldr	r3, [pc, #148]	; (8008898 <UART_SetConfig+0xab8>)
 8008804:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008806:	e009      	b.n	800881c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800880c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800880e:	e005      	b.n	800881c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800881a:	bf00      	nop
    }

    if (pclk != 0U)
 800881c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881e:	2b00      	cmp	r3, #0
 8008820:	d021      	beq.n	8008866 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	4a1d      	ldr	r2, [pc, #116]	; (800889c <UART_SetConfig+0xabc>)
 8008828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800882c:	461a      	mov	r2, r3
 800882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008830:	fbb3 f2f2 	udiv	r2, r3, r2
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	085b      	lsrs	r3, r3, #1
 800883a:	441a      	add	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	fbb2 f3f3 	udiv	r3, r2, r3
 8008844:	b29b      	uxth	r3, r3
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	2b0f      	cmp	r3, #15
 800884c:	d908      	bls.n	8008860 <UART_SetConfig+0xa80>
 800884e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008854:	d204      	bcs.n	8008860 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800885c:	60da      	str	r2, [r3, #12]
 800885e:	e002      	b.n	8008866 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008882:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008886:	4618      	mov	r0, r3
 8008888:	3738      	adds	r7, #56	; 0x38
 800888a:	46bd      	mov	sp, r7
 800888c:	bdb0      	pop	{r4, r5, r7, pc}
 800888e:	bf00      	nop
 8008890:	58024400 	.word	0x58024400
 8008894:	03d09000 	.word	0x03d09000
 8008898:	003d0900 	.word	0x003d0900
 800889c:	0800d644 	.word	0x0800d644

080088a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00a      	beq.n	80088ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00a      	beq.n	80088ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00a      	beq.n	800890e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008912:	f003 0308 	and.w	r3, r3, #8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	f003 0310 	and.w	r3, r3, #16
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00a      	beq.n	8008952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008956:	f003 0320 	and.w	r3, r3, #32
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	430a      	orrs	r2, r1
 8008972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01a      	beq.n	80089b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800899e:	d10a      	bne.n	80089b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	430a      	orrs	r2, r1
 80089d6:	605a      	str	r2, [r3, #4]
  }
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af02      	add	r7, sp, #8
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089f4:	f7f8 fda4 	bl	8001540 <HAL_GetTick>
 80089f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0308 	and.w	r3, r3, #8
 8008a04:	2b08      	cmp	r3, #8
 8008a06:	d10e      	bne.n	8008a26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f82f 	bl	8008a7a <UART_WaitOnFlagUntilTimeout>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e025      	b.n	8008a72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b04      	cmp	r3, #4
 8008a32:	d10e      	bne.n	8008a52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f819 	bl	8008a7a <UART_WaitOnFlagUntilTimeout>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e00f      	b.n	8008a72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2220      	movs	r2, #32
 8008a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2220      	movs	r2, #32
 8008a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	603b      	str	r3, [r7, #0]
 8008a86:	4613      	mov	r3, r2
 8008a88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a8a:	e062      	b.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a92:	d05e      	beq.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a94:	f7f8 fd54 	bl	8001540 <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d302      	bcc.n	8008aaa <UART_WaitOnFlagUntilTimeout+0x30>
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d11d      	bne.n	8008ae6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ab8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f022 0201 	bic.w	r2, r2, #1
 8008ac8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2220      	movs	r2, #32
 8008ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e045      	b.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d02e      	beq.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b02:	d126      	bne.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b1c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f022 0201 	bic.w	r2, r2, #1
 8008b2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e00f      	b.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69da      	ldr	r2, [r3, #28]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	bf0c      	ite	eq
 8008b62:	2301      	moveq	r3, #1
 8008b64:	2300      	movne	r3, #0
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	461a      	mov	r2, r3
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d08d      	beq.n	8008a8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	88fa      	ldrh	r2, [r7, #6]
 8008b94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	88fa      	ldrh	r2, [r7, #6]
 8008b9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bae:	d10e      	bne.n	8008bce <UART_Start_Receive_IT+0x52>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d105      	bne.n	8008bc4 <UART_Start_Receive_IT+0x48>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008bbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bc2:	e02d      	b.n	8008c20 <UART_Start_Receive_IT+0xa4>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	22ff      	movs	r2, #255	; 0xff
 8008bc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bcc:	e028      	b.n	8008c20 <UART_Start_Receive_IT+0xa4>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10d      	bne.n	8008bf2 <UART_Start_Receive_IT+0x76>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d104      	bne.n	8008be8 <UART_Start_Receive_IT+0x6c>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	22ff      	movs	r2, #255	; 0xff
 8008be2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008be6:	e01b      	b.n	8008c20 <UART_Start_Receive_IT+0xa4>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	227f      	movs	r2, #127	; 0x7f
 8008bec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bf0:	e016      	b.n	8008c20 <UART_Start_Receive_IT+0xa4>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bfa:	d10d      	bne.n	8008c18 <UART_Start_Receive_IT+0x9c>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d104      	bne.n	8008c0e <UART_Start_Receive_IT+0x92>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	227f      	movs	r2, #127	; 0x7f
 8008c08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c0c:	e008      	b.n	8008c20 <UART_Start_Receive_IT+0xa4>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	223f      	movs	r2, #63	; 0x3f
 8008c12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c16:	e003      	b.n	8008c20 <UART_Start_Receive_IT+0xa4>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2222      	movs	r2, #34	; 0x22
 8008c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689a      	ldr	r2, [r3, #8]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f042 0201 	orr.w	r2, r2, #1
 8008c3e:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c48:	d12a      	bne.n	8008ca0 <UART_Start_Receive_IT+0x124>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c50:	88fa      	ldrh	r2, [r7, #6]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d324      	bcc.n	8008ca0 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c5e:	d107      	bne.n	8008c70 <UART_Start_Receive_IT+0xf4>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d103      	bne.n	8008c70 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4a1f      	ldr	r2, [pc, #124]	; (8008ce8 <UART_Start_Receive_IT+0x16c>)
 8008c6c:	671a      	str	r2, [r3, #112]	; 0x70
 8008c6e:	e002      	b.n	8008c76 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4a1e      	ldr	r2, [pc, #120]	; (8008cec <UART_Start_Receive_IT+0x170>)
 8008c74:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c8c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008c9c:	609a      	str	r2, [r3, #8]
 8008c9e:	e01b      	b.n	8008cd8 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ca8:	d107      	bne.n	8008cba <UART_Start_Receive_IT+0x13e>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d103      	bne.n	8008cba <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	4a0e      	ldr	r2, [pc, #56]	; (8008cf0 <UART_Start_Receive_IT+0x174>)
 8008cb6:	671a      	str	r2, [r3, #112]	; 0x70
 8008cb8:	e002      	b.n	8008cc0 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	4a0d      	ldr	r2, [pc, #52]	; (8008cf4 <UART_Start_Receive_IT+0x178>)
 8008cbe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008cd6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	08009171 	.word	0x08009171
 8008cec:	08008f6d 	.word	0x08008f6d
 8008cf0:	08008e95 	.word	0x08008e95
 8008cf4:	08008dbd 	.word	0x08008dbd

08008cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008d0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6899      	ldr	r1, [r3, #8]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <UART_EndRxTransfer+0x60>)
 8008d1c:	400b      	ands	r3, r1
 8008d1e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d107      	bne.n	8008d38 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f022 0210 	bic.w	r2, r2, #16
 8008d36:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	effffffe 	.word	0xeffffffe

08008d5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f7ff f81a 	bl	8007db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d80:	bf00      	nop
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d9e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7fe fff6 	bl	8007da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dca:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd2:	2b22      	cmp	r3, #34	; 0x22
 8008dd4:	d152      	bne.n	8008e7c <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008dde:	89bb      	ldrh	r3, [r7, #12]
 8008de0:	b2d9      	uxtb	r1, r3
 8008de2:	89fb      	ldrh	r3, [r7, #14]
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dea:	400a      	ands	r2, r1
 8008dec:	b2d2      	uxtb	r2, r2
 8008dee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df4:	1c5a      	adds	r2, r3, #1
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	3b01      	subs	r3, #1
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d139      	bne.n	8008e8c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e26:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689a      	ldr	r2, [r3, #8]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 0201 	bic.w	r2, r2, #1
 8008e36:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d10f      	bne.n	8008e6e <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f022 0210 	bic.w	r2, r2, #16
 8008e5c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7fe ffae 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
 8008e6c:	e002      	b.n	8008e74 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7f7 ff10 	bl	8000c94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e7a:	e007      	b.n	8008e8c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	699a      	ldr	r2, [r3, #24]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 0208 	orr.w	r2, r2, #8
 8008e8a:	619a      	str	r2, [r3, #24]
}
 8008e8c:	bf00      	nop
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ea2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eaa:	2b22      	cmp	r3, #34	; 0x22
 8008eac:	d152      	bne.n	8008f54 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eba:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ebc:	89ba      	ldrh	r2, [r7, #12]
 8008ebe:	89fb      	ldrh	r3, [r7, #14]
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ecc:	1c9a      	adds	r2, r3, #2
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	3b01      	subs	r3, #1
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d139      	bne.n	8008f64 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008efe:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	689a      	ldr	r2, [r3, #8]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0201 	bic.w	r2, r2, #1
 8008f0e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2220      	movs	r2, #32
 8008f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d10f      	bne.n	8008f46 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0210 	bic.w	r2, r2, #16
 8008f34:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7fe ff42 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
 8008f44:	e002      	b.n	8008f4c <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7f7 fea4 	bl	8000c94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f52:	e007      	b.n	8008f64 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699a      	ldr	r2, [r3, #24]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0208 	orr.w	r2, r2, #8
 8008f62:	619a      	str	r2, [r3, #24]
}
 8008f64:	bf00      	nop
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f7a:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f9a:	2b22      	cmp	r3, #34	; 0x22
 8008f9c:	f040 80d8 	bne.w	8009150 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fa6:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fa8:	e0a8      	b.n	80090fc <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fb2:	89bb      	ldrh	r3, [r7, #12]
 8008fb4:	b2d9      	uxtb	r1, r3
 8008fb6:	8b7b      	ldrh	r3, [r7, #26]
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fbe:	400a      	ands	r2, r1
 8008fc0:	b2d2      	uxtb	r2, r2
 8008fc2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc8:	1c5a      	adds	r2, r3, #1
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	f003 0307 	and.w	r3, r3, #7
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d04d      	beq.n	800908e <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d010      	beq.n	800901e <UART_RxISR_8BIT_FIFOEN+0xb2>
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00b      	beq.n	800901e <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2201      	movs	r2, #1
 800900c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009014:	f043 0201 	orr.w	r2, r3, #1
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b00      	cmp	r3, #0
 8009026:	d010      	beq.n	800904a <UART_RxISR_8BIT_FIFOEN+0xde>
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00b      	beq.n	800904a <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2202      	movs	r2, #2
 8009038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009040:	f043 0204 	orr.w	r2, r3, #4
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d010      	beq.n	8009076 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00b      	beq.n	8009076 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2204      	movs	r2, #4
 8009064:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800906c:	f043 0202 	orr.w	r2, r3, #2
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d006      	beq.n	800908e <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7fe fe97 	bl	8007db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009094:	b29b      	uxth	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d130      	bne.n	80090fc <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090a8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	6899      	ldr	r1, [r3, #8]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	4b2c      	ldr	r3, [pc, #176]	; (8009168 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 80090b6:	400b      	ands	r3, r1
 80090b8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d10f      	bne.n	80090f0 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f022 0210 	bic.w	r2, r2, #16
 80090de:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7fe fe6d 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
 80090ee:	e002      	b.n	80090f6 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7f7 fdcf 	bl	8000c94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090fc:	89fb      	ldrh	r3, [r7, #14]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d005      	beq.n	800910e <UART_RxISR_8BIT_FIFOEN+0x1a2>
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	f47f af4e 	bne.w	8008faa <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009114:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009116:	897b      	ldrh	r3, [r7, #10]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d021      	beq.n	8009160 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009122:	897a      	ldrh	r2, [r7, #10]
 8009124:	429a      	cmp	r2, r3
 8009126:	d21b      	bcs.n	8009160 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689a      	ldr	r2, [r3, #8]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009136:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a0c      	ldr	r2, [pc, #48]	; (800916c <UART_RxISR_8BIT_FIFOEN+0x200>)
 800913c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f042 0220 	orr.w	r2, r2, #32
 800914c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800914e:	e007      	b.n	8009160 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699a      	ldr	r2, [r3, #24]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f042 0208 	orr.w	r2, r2, #8
 800915e:	619a      	str	r2, [r3, #24]
}
 8009160:	bf00      	nop
 8009162:	3720      	adds	r7, #32
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	effffffe 	.word	0xeffffffe
 800916c:	08008dbd 	.word	0x08008dbd

08009170 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b08a      	sub	sp, #40	; 0x28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800917e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800919e:	2b22      	cmp	r3, #34	; 0x22
 80091a0:	f040 80d8 	bne.w	8009354 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091aa:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091ac:	e0a8      	b.n	8009300 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80091bc:	8aba      	ldrh	r2, [r7, #20]
 80091be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091c0:	4013      	ands	r3, r2
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091cc:	1c9a      	adds	r2, r3, #2
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091d8:	b29b      	uxth	r3, r3
 80091da:	3b01      	subs	r3, #1
 80091dc:	b29a      	uxth	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d04d      	beq.n	8009292 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d010      	beq.n	8009222 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00b      	beq.n	8009222 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2201      	movs	r2, #1
 8009210:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009218:	f043 0201 	orr.w	r2, r3, #1
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	f003 0302 	and.w	r3, r3, #2
 8009228:	2b00      	cmp	r3, #0
 800922a:	d010      	beq.n	800924e <UART_RxISR_16BIT_FIFOEN+0xde>
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00b      	beq.n	800924e <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2202      	movs	r2, #2
 800923c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009244:	f043 0204 	orr.w	r2, r3, #4
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d010      	beq.n	800927a <UART_RxISR_16BIT_FIFOEN+0x10a>
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00b      	beq.n	800927a <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2204      	movs	r2, #4
 8009268:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009270:	f043 0202 	orr.w	r2, r3, #2
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009280:	2b00      	cmp	r3, #0
 8009282:	d006      	beq.n	8009292 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7fe fd95 	bl	8007db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009298:	b29b      	uxth	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d130      	bne.n	8009300 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092ac:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6899      	ldr	r1, [r3, #8]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	4b2c      	ldr	r3, [pc, #176]	; (800936c <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 80092ba:	400b      	ands	r3, r1
 80092bc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d10f      	bne.n	80092f4 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 0210 	bic.w	r2, r2, #16
 80092e2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7fe fd6b 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
 80092f2:	e002      	b.n	80092fa <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7f7 fccd 	bl	8000c94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009300:	8afb      	ldrh	r3, [r7, #22]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d005      	beq.n	8009312 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	f003 0320 	and.w	r3, r3, #32
 800930c:	2b00      	cmp	r3, #0
 800930e:	f47f af4e 	bne.w	80091ae <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009318:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800931a:	89fb      	ldrh	r3, [r7, #14]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d021      	beq.n	8009364 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009326:	89fa      	ldrh	r2, [r7, #14]
 8009328:	429a      	cmp	r2, r3
 800932a:	d21b      	bcs.n	8009364 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689a      	ldr	r2, [r3, #8]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800933a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a0c      	ldr	r2, [pc, #48]	; (8009370 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8009340:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f042 0220 	orr.w	r2, r2, #32
 8009350:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009352:	e007      	b.n	8009364 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	699a      	ldr	r2, [r3, #24]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f042 0208 	orr.w	r2, r2, #8
 8009362:	619a      	str	r2, [r3, #24]
}
 8009364:	bf00      	nop
 8009366:	3728      	adds	r7, #40	; 0x28
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	effffffe 	.word	0xeffffffe
 8009370:	08008e95 	.word	0x08008e95

08009374 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d101      	bne.n	80093c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80093c2:	2302      	movs	r3, #2
 80093c4:	e027      	b.n	8009416 <HAL_UARTEx_DisableFifoMode+0x66>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2224      	movs	r2, #36	; 0x24
 80093d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0201 	bic.w	r2, r2, #1
 80093ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2220      	movs	r2, #32
 8009408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009432:	2b01      	cmp	r3, #1
 8009434:	d101      	bne.n	800943a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009436:	2302      	movs	r3, #2
 8009438:	e02d      	b.n	8009496 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2224      	movs	r2, #36	; 0x24
 8009446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f022 0201 	bic.w	r2, r2, #1
 8009460:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	430a      	orrs	r2, r1
 8009474:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f850 	bl	800951c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2220      	movs	r2, #32
 8009488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d101      	bne.n	80094b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094b2:	2302      	movs	r3, #2
 80094b4:	e02d      	b.n	8009512 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2224      	movs	r2, #36	; 0x24
 80094c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f022 0201 	bic.w	r2, r2, #1
 80094dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	430a      	orrs	r2, r1
 80094f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f812 	bl	800951c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2220      	movs	r2, #32
 8009504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009528:	2b00      	cmp	r3, #0
 800952a:	d108      	bne.n	800953e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800953c:	e031      	b.n	80095a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800953e:	2310      	movs	r3, #16
 8009540:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009542:	2310      	movs	r3, #16
 8009544:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	0e5b      	lsrs	r3, r3, #25
 800954e:	b2db      	uxtb	r3, r3
 8009550:	f003 0307 	and.w	r3, r3, #7
 8009554:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	0f5b      	lsrs	r3, r3, #29
 800955e:	b2db      	uxtb	r3, r3
 8009560:	f003 0307 	and.w	r3, r3, #7
 8009564:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	7b3a      	ldrb	r2, [r7, #12]
 800956a:	4911      	ldr	r1, [pc, #68]	; (80095b0 <UARTEx_SetNbDataToProcess+0x94>)
 800956c:	5c8a      	ldrb	r2, [r1, r2]
 800956e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009572:	7b3a      	ldrb	r2, [r7, #12]
 8009574:	490f      	ldr	r1, [pc, #60]	; (80095b4 <UARTEx_SetNbDataToProcess+0x98>)
 8009576:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009578:	fb93 f3f2 	sdiv	r3, r3, r2
 800957c:	b29a      	uxth	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	7b7a      	ldrb	r2, [r7, #13]
 8009588:	4909      	ldr	r1, [pc, #36]	; (80095b0 <UARTEx_SetNbDataToProcess+0x94>)
 800958a:	5c8a      	ldrb	r2, [r1, r2]
 800958c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009590:	7b7a      	ldrb	r2, [r7, #13]
 8009592:	4908      	ldr	r1, [pc, #32]	; (80095b4 <UARTEx_SetNbDataToProcess+0x98>)
 8009594:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009596:	fb93 f3f2 	sdiv	r3, r3, r2
 800959a:	b29a      	uxth	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095a2:	bf00      	nop
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	0800d65c 	.word	0x0800d65c
 80095b4:	0800d664 	.word	0x0800d664

080095b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095b8:	b084      	sub	sp, #16
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	f107 001c 	add.w	r0, r7, #28
 80095c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d120      	bne.n	8009612 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	4b2a      	ldr	r3, [pc, #168]	; (800968c <USB_CoreInit+0xd4>)
 80095e2:	4013      	ands	r3, r2
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80095f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d105      	bne.n	8009606 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f990 	bl	800992c <USB_CoreReset>
 800960c:	4603      	mov	r3, r0
 800960e:	73fb      	strb	r3, [r7, #15]
 8009610:	e01a      	b.n	8009648 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f984 	bl	800992c <USB_CoreReset>
 8009624:	4603      	mov	r3, r0
 8009626:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009632:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	639a      	str	r2, [r3, #56]	; 0x38
 800963a:	e005      	b.n	8009648 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	2b01      	cmp	r3, #1
 800964c:	d116      	bne.n	800967c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009652:	b29a      	uxth	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800965c:	4b0c      	ldr	r3, [pc, #48]	; (8009690 <USB_CoreInit+0xd8>)
 800965e:	4313      	orrs	r3, r2
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f043 0206 	orr.w	r2, r3, #6
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f043 0220 	orr.w	r2, r3, #32
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800967c:	7bfb      	ldrb	r3, [r7, #15]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009688:	b004      	add	sp, #16
 800968a:	4770      	bx	lr
 800968c:	ffbdffbf 	.word	0xffbdffbf
 8009690:	03ee0000 	.word	0x03ee0000

08009694 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f043 0201 	orr.w	r2, r3, #1
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f023 0201 	bic.w	r2, r3, #1
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096f0:	78fb      	ldrb	r3, [r7, #3]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d106      	bne.n	8009704 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	60da      	str	r2, [r3, #12]
 8009702:	e00b      	b.n	800971c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d106      	bne.n	8009718 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	60da      	str	r2, [r3, #12]
 8009716:	e001      	b.n	800971c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e003      	b.n	8009724 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800971c:	2032      	movs	r0, #50	; 0x32
 800971e:	f7f7 ff1b 	bl	8001558 <HAL_Delay>

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009736:	2300      	movs	r3, #0
 8009738:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	019b      	lsls	r3, r3, #6
 800973e:	f043 0220 	orr.w	r2, r3, #32
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3301      	adds	r3, #1
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4a09      	ldr	r2, [pc, #36]	; (8009774 <USB_FlushTxFifo+0x48>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d901      	bls.n	8009758 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	e006      	b.n	8009766 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	f003 0320 	and.w	r3, r3, #32
 8009760:	2b20      	cmp	r3, #32
 8009762:	d0f0      	beq.n	8009746 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	00030d40 	.word	0x00030d40

08009778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2210      	movs	r2, #16
 8009788:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3301      	adds	r3, #1
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4a09      	ldr	r2, [pc, #36]	; (80097b8 <USB_FlushRxFifo+0x40>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d901      	bls.n	800979c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	e006      	b.n	80097aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	f003 0310 	and.w	r3, r3, #16
 80097a4:	2b10      	cmp	r3, #16
 80097a6:	d0f0      	beq.n	800978a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	00030d40 	.word	0x00030d40

080097bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80097bc:	b480      	push	{r7}
 80097be:	b089      	sub	sp, #36	; 0x24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	4611      	mov	r1, r2
 80097c8:	461a      	mov	r2, r3
 80097ca:	460b      	mov	r3, r1
 80097cc:	71fb      	strb	r3, [r7, #7]
 80097ce:	4613      	mov	r3, r2
 80097d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80097da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d123      	bne.n	800982a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80097e2:	88bb      	ldrh	r3, [r7, #4]
 80097e4:	3303      	adds	r3, #3
 80097e6:	089b      	lsrs	r3, r3, #2
 80097e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80097ea:	2300      	movs	r3, #0
 80097ec:	61bb      	str	r3, [r7, #24]
 80097ee:	e018      	b.n	8009822 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	031a      	lsls	r2, r3, #12
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097fc:	461a      	mov	r2, r3
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	3301      	adds	r3, #1
 8009808:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	3301      	adds	r3, #1
 800980e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	3301      	adds	r3, #1
 8009814:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	3301      	adds	r3, #1
 800981a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	3301      	adds	r3, #1
 8009820:	61bb      	str	r3, [r7, #24]
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	429a      	cmp	r2, r3
 8009828:	d3e2      	bcc.n	80097f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3724      	adds	r7, #36	; 0x24
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009838:	b480      	push	{r7}
 800983a:	b08b      	sub	sp, #44	; 0x2c
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	4613      	mov	r3, r2
 8009844:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800984e:	88fb      	ldrh	r3, [r7, #6]
 8009850:	089b      	lsrs	r3, r3, #2
 8009852:	b29b      	uxth	r3, r3
 8009854:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009856:	88fb      	ldrh	r3, [r7, #6]
 8009858:	f003 0303 	and.w	r3, r3, #3
 800985c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800985e:	2300      	movs	r3, #0
 8009860:	623b      	str	r3, [r7, #32]
 8009862:	e014      	b.n	800988e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	3301      	adds	r3, #1
 8009874:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	3301      	adds	r3, #1
 800987a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	3301      	adds	r3, #1
 8009880:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	3301      	adds	r3, #1
 8009886:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009888:	6a3b      	ldr	r3, [r7, #32]
 800988a:	3301      	adds	r3, #1
 800988c:	623b      	str	r3, [r7, #32]
 800988e:	6a3a      	ldr	r2, [r7, #32]
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	429a      	cmp	r2, r3
 8009894:	d3e6      	bcc.n	8009864 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009896:	8bfb      	ldrh	r3, [r7, #30]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d01e      	beq.n	80098da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098a6:	461a      	mov	r2, r3
 80098a8:	f107 0310 	add.w	r3, r7, #16
 80098ac:	6812      	ldr	r2, [r2, #0]
 80098ae:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	6a3b      	ldr	r3, [r7, #32]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	00db      	lsls	r3, r3, #3
 80098b8:	fa22 f303 	lsr.w	r3, r2, r3
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	701a      	strb	r2, [r3, #0]
      i++;
 80098c2:	6a3b      	ldr	r3, [r7, #32]
 80098c4:	3301      	adds	r3, #1
 80098c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	3301      	adds	r3, #1
 80098cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80098ce:	8bfb      	ldrh	r3, [r7, #30]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80098d4:	8bfb      	ldrh	r3, [r7, #30]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1ea      	bne.n	80098b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098dc:	4618      	mov	r0, r3
 80098de:	372c      	adds	r7, #44	; 0x2c
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	4013      	ands	r3, r2
 80098fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009900:	68fb      	ldr	r3, [r7, #12]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800990e:	b480      	push	{r7}
 8009910:	b083      	sub	sp, #12
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	f003 0301 	and.w	r3, r3, #1
}
 800991e:	4618      	mov	r0, r3
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
	...

0800992c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3301      	adds	r3, #1
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	4a13      	ldr	r2, [pc, #76]	; (8009990 <USB_CoreReset+0x64>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d901      	bls.n	800994a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e01b      	b.n	8009982 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	2b00      	cmp	r3, #0
 8009950:	daf2      	bge.n	8009938 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009952:	2300      	movs	r3, #0
 8009954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	f043 0201 	orr.w	r2, r3, #1
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3301      	adds	r3, #1
 8009966:	60fb      	str	r3, [r7, #12]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	4a09      	ldr	r2, [pc, #36]	; (8009990 <USB_CoreReset+0x64>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d901      	bls.n	8009974 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e006      	b.n	8009982 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	2b01      	cmp	r3, #1
 800997e:	d0f0      	beq.n	8009962 <USB_CoreReset+0x36>

  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	00030d40 	.word	0x00030d40

08009994 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009994:	b084      	sub	sp, #16
 8009996:	b580      	push	{r7, lr}
 8009998:	b084      	sub	sp, #16
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	f107 001c 	add.w	r0, r7, #28
 80099a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099b0:	461a      	mov	r2, r3
 80099b2:	2300      	movs	r3, #0
 80099b4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d018      	beq.n	8009a0c <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d10a      	bne.n	80099f6 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099ee:	f043 0304 	orr.w	r3, r3, #4
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	e014      	b.n	8009a20 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a04:	f023 0304 	bic.w	r3, r3, #4
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	e009      	b.n	8009a20 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a1a:	f023 0304 	bic.w	r3, r3, #4
 8009a1e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009a20:	2110      	movs	r1, #16
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7ff fe82 	bl	800972c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff fea5 	bl	8009778 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	e015      	b.n	8009a60 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	015a      	lsls	r2, r3, #5
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a40:	461a      	mov	r2, r3
 8009a42:	f04f 33ff 	mov.w	r3, #4294967295
 8009a46:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a54:	461a      	mov	r2, r3
 8009a56:	2300      	movs	r3, #0
 8009a58:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	60fb      	str	r3, [r7, #12]
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d3e5      	bcc.n	8009a34 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009a68:	2101      	movs	r1, #1
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f8ac 	bl	8009bc8 <USB_DriveVbus>

  HAL_Delay(200U);
 8009a70:	20c8      	movs	r0, #200	; 0xc8
 8009a72:	f7f7 fd71 	bl	8001558 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a82:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00b      	beq.n	8009aa8 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a96:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a14      	ldr	r2, [pc, #80]	; (8009aec <USB_HostInit+0x158>)
 8009a9c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a13      	ldr	r2, [pc, #76]	; (8009af0 <USB_HostInit+0x15c>)
 8009aa2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009aa6:	e009      	b.n	8009abc <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2280      	movs	r2, #128	; 0x80
 8009aac:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a10      	ldr	r2, [pc, #64]	; (8009af4 <USB_HostInit+0x160>)
 8009ab2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a10      	ldr	r2, [pc, #64]	; (8009af8 <USB_HostInit+0x164>)
 8009ab8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d105      	bne.n	8009ace <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	f043 0210 	orr.w	r2, r3, #16
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	699a      	ldr	r2, [r3, #24]
 8009ad2:	4b0a      	ldr	r3, [pc, #40]	; (8009afc <USB_HostInit+0x168>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ae6:	b004      	add	sp, #16
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	01000200 	.word	0x01000200
 8009af0:	00e00300 	.word	0x00e00300
 8009af4:	00600080 	.word	0x00600080
 8009af8:	004000e0 	.word	0x004000e0
 8009afc:	a3200008 	.word	0xa3200008

08009b00 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b1e:	f023 0303 	bic.w	r3, r3, #3
 8009b22:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	78fb      	ldrb	r3, [r7, #3]
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	68f9      	ldr	r1, [r7, #12]
 8009b34:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d107      	bne.n	8009b52 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b48:	461a      	mov	r2, r3
 8009b4a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009b4e:	6053      	str	r3, [r2, #4]
 8009b50:	e009      	b.n	8009b66 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d106      	bne.n	8009b66 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f241 7370 	movw	r3, #6000	; 0x1770
 8009b64:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3714      	adds	r7, #20
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009b80:	2300      	movs	r3, #0
 8009b82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009b94:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ba2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009ba4:	2064      	movs	r0, #100	; 0x64
 8009ba6:	f7f7 fcd7 	bl	8001558 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009bb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bb6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009bb8:	200a      	movs	r0, #10
 8009bba:	f7f7 fccd 	bl	8001558 <HAL_Delay>

  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009bec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d109      	bne.n	8009c0c <USB_DriveVbus+0x44>
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d106      	bne.n	8009c0c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c0a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c16:	d109      	bne.n	8009c2c <USB_DriveVbus+0x64>
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d106      	bne.n	8009c2c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c2a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009c46:	2300      	movs	r3, #0
 8009c48:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	0c5b      	lsrs	r3, r3, #17
 8009c58:	f003 0303 	and.w	r3, r3, #3
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	b29b      	uxth	r3, r3
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3714      	adds	r7, #20
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
	...

08009c8c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b088      	sub	sp, #32
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	4608      	mov	r0, r1
 8009c96:	4611      	mov	r1, r2
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	70fb      	strb	r3, [r7, #3]
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	70bb      	strb	r3, [r7, #2]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009cae:	78fb      	ldrb	r3, [r7, #3]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cba:	461a      	mov	r2, r3
 8009cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009cc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d87e      	bhi.n	8009dc8 <USB_HC_Init+0x13c>
 8009cca:	a201      	add	r2, pc, #4	; (adr r2, 8009cd0 <USB_HC_Init+0x44>)
 8009ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd0:	08009ce1 	.word	0x08009ce1
 8009cd4:	08009d8b 	.word	0x08009d8b
 8009cd8:	08009ce1 	.word	0x08009ce1
 8009cdc:	08009d4d 	.word	0x08009d4d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009ce0:	78fb      	ldrb	r3, [r7, #3]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cec:	461a      	mov	r2, r3
 8009cee:	f240 439d 	movw	r3, #1181	; 0x49d
 8009cf2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009cf4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	da10      	bge.n	8009d1e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009cfc:	78fb      	ldrb	r3, [r7, #3]
 8009cfe:	015a      	lsls	r2, r3, #5
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	4413      	add	r3, r2
 8009d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	78fa      	ldrb	r2, [r7, #3]
 8009d0c:	0151      	lsls	r1, r2, #5
 8009d0e:	693a      	ldr	r2, [r7, #16]
 8009d10:	440a      	add	r2, r1
 8009d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d1a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009d1c:	e057      	b.n	8009dce <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d051      	beq.n	8009dce <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009d2a:	78fb      	ldrb	r3, [r7, #3]
 8009d2c:	015a      	lsls	r2, r3, #5
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	4413      	add	r3, r2
 8009d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	78fa      	ldrb	r2, [r7, #3]
 8009d3a:	0151      	lsls	r1, r2, #5
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	440a      	add	r2, r1
 8009d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009d48:	60d3      	str	r3, [r2, #12]
      break;
 8009d4a:	e040      	b.n	8009dce <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009d4c:	78fb      	ldrb	r3, [r7, #3]
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d58:	461a      	mov	r2, r3
 8009d5a:	f240 639d 	movw	r3, #1693	; 0x69d
 8009d5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009d60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	da34      	bge.n	8009dd2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009d68:	78fb      	ldrb	r3, [r7, #3]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	78fa      	ldrb	r2, [r7, #3]
 8009d78:	0151      	lsls	r1, r2, #5
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d86:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009d88:	e023      	b.n	8009dd2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009d8a:	78fb      	ldrb	r3, [r7, #3]
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d96:	461a      	mov	r2, r3
 8009d98:	f240 2325 	movw	r3, #549	; 0x225
 8009d9c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009d9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	da17      	bge.n	8009dd6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009da6:	78fb      	ldrb	r3, [r7, #3]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	78fa      	ldrb	r2, [r7, #3]
 8009db6:	0151      	lsls	r1, r2, #5
 8009db8:	693a      	ldr	r2, [r7, #16]
 8009dba:	440a      	add	r2, r1
 8009dbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dc0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009dc4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009dc6:	e006      	b.n	8009dd6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	77fb      	strb	r3, [r7, #31]
      break;
 8009dcc:	e004      	b.n	8009dd8 <USB_HC_Init+0x14c>
      break;
 8009dce:	bf00      	nop
 8009dd0:	e002      	b.n	8009dd8 <USB_HC_Init+0x14c>
      break;
 8009dd2:	bf00      	nop
 8009dd4:	e000      	b.n	8009dd8 <USB_HC_Init+0x14c>
      break;
 8009dd6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dde:	699a      	ldr	r2, [r3, #24]
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	f003 030f 	and.w	r3, r3, #15
 8009de6:	2101      	movs	r1, #1
 8009de8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dec:	6939      	ldr	r1, [r7, #16]
 8009dee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009df2:	4313      	orrs	r3, r2
 8009df4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009e02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	da03      	bge.n	8009e12 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e0e:	61bb      	str	r3, [r7, #24]
 8009e10:	e001      	b.n	8009e16 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009e12:	2300      	movs	r3, #0
 8009e14:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7ff ff0f 	bl	8009c3a <USB_GetHostSpeed>
 8009e1c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009e1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d106      	bne.n	8009e34 <USB_HC_Init+0x1a8>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d003      	beq.n	8009e34 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009e30:	617b      	str	r3, [r7, #20]
 8009e32:	e001      	b.n	8009e38 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009e34:	2300      	movs	r3, #0
 8009e36:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009e38:	787b      	ldrb	r3, [r7, #1]
 8009e3a:	059b      	lsls	r3, r3, #22
 8009e3c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009e40:	78bb      	ldrb	r3, [r7, #2]
 8009e42:	02db      	lsls	r3, r3, #11
 8009e44:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009e48:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009e4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009e4e:	049b      	lsls	r3, r3, #18
 8009e50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009e54:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009e56:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009e5c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009e62:	78fb      	ldrb	r3, [r7, #3]
 8009e64:	0159      	lsls	r1, r3, #5
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	440b      	add	r3, r1
 8009e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e6e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009e74:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009e76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d10f      	bne.n	8009e9e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009e7e:	78fb      	ldrb	r3, [r7, #3]
 8009e80:	015a      	lsls	r2, r3, #5
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	4413      	add	r3, r2
 8009e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	78fa      	ldrb	r2, [r7, #3]
 8009e8e:	0151      	lsls	r1, r2, #5
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	440a      	add	r2, r1
 8009e94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e9c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009e9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3720      	adds	r7, #32
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08c      	sub	sp, #48	; 0x30
 8009eac:	af02      	add	r7, sp, #8
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	785b      	ldrb	r3, [r3, #1]
 8009ebe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ec4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d02d      	beq.n	8009f2e <USB_HC_StartXfer+0x86>
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	791b      	ldrb	r3, [r3, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d129      	bne.n	8009f2e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009eda:	79fb      	ldrb	r3, [r7, #7]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d117      	bne.n	8009f10 <USB_HC_StartXfer+0x68>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	79db      	ldrb	r3, [r3, #7]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d003      	beq.n	8009ef0 <USB_HC_StartXfer+0x48>
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	79db      	ldrb	r3, [r3, #7]
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d10f      	bne.n	8009f10 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	6a3b      	ldr	r3, [r7, #32]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	69fa      	ldr	r2, [r7, #28]
 8009f00:	0151      	lsls	r1, r2, #5
 8009f02:	6a3a      	ldr	r2, [r7, #32]
 8009f04:	440a      	add	r2, r1
 8009f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f0e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009f10:	79fb      	ldrb	r3, [r7, #7]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10b      	bne.n	8009f2e <USB_HC_StartXfer+0x86>
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	795b      	ldrb	r3, [r3, #5]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d107      	bne.n	8009f2e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	785b      	ldrb	r3, [r3, #1]
 8009f22:	4619      	mov	r1, r3
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 fa2f 	bl	800a388 <USB_DoPing>
      return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e0f8      	b.n	800a120 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d018      	beq.n	8009f68 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	8912      	ldrh	r2, [r2, #8]
 8009f3e:	4413      	add	r3, r2
 8009f40:	3b01      	subs	r3, #1
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	8912      	ldrh	r2, [r2, #8]
 8009f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f4a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009f4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009f4e:	8b7b      	ldrh	r3, [r7, #26]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d90b      	bls.n	8009f6c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009f54:	8b7b      	ldrh	r3, [r7, #26]
 8009f56:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009f58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	8912      	ldrh	r2, [r2, #8]
 8009f5e:	fb02 f203 	mul.w	r2, r2, r3
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	611a      	str	r2, [r3, #16]
 8009f66:	e001      	b.n	8009f6c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	78db      	ldrb	r3, [r3, #3]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d007      	beq.n	8009f84 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009f74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	8912      	ldrh	r2, [r2, #8]
 8009f7a:	fb02 f203 	mul.w	r2, r2, r3
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	611a      	str	r2, [r3, #16]
 8009f82:	e003      	b.n	8009f8c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	695a      	ldr	r2, [r3, #20]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009f94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f96:	04d9      	lsls	r1, r3, #19
 8009f98:	4b63      	ldr	r3, [pc, #396]	; (800a128 <USB_HC_StartXfer+0x280>)
 8009f9a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009f9c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	7a9b      	ldrb	r3, [r3, #10]
 8009fa2:	075b      	lsls	r3, r3, #29
 8009fa4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fa8:	69f9      	ldr	r1, [r7, #28]
 8009faa:	0148      	lsls	r0, r1, #5
 8009fac:	6a39      	ldr	r1, [r7, #32]
 8009fae:	4401      	add	r1, r0
 8009fb0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009fb4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fb6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009fb8:	79fb      	ldrb	r3, [r7, #7]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d009      	beq.n	8009fd2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	68d9      	ldr	r1, [r3, #12]
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fce:	460a      	mov	r2, r1
 8009fd0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	bf0c      	ite	eq
 8009fe2:	2301      	moveq	r3, #1
 8009fe4:	2300      	movne	r3, #0
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	015a      	lsls	r2, r3, #5
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	69fa      	ldr	r2, [r7, #28]
 8009ffa:	0151      	lsls	r1, r2, #5
 8009ffc:	6a3a      	ldr	r2, [r7, #32]
 8009ffe:	440a      	add	r2, r1
 800a000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a004:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a008:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	015a      	lsls	r2, r3, #5
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	4413      	add	r3, r2
 800a012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	7e7b      	ldrb	r3, [r7, #25]
 800a01a:	075b      	lsls	r3, r3, #29
 800a01c:	69f9      	ldr	r1, [r7, #28]
 800a01e:	0148      	lsls	r0, r1, #5
 800a020:	6a39      	ldr	r1, [r7, #32]
 800a022:	4401      	add	r1, r0
 800a024:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a028:	4313      	orrs	r3, r2
 800a02a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	015a      	lsls	r2, r3, #5
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	4413      	add	r3, r2
 800a034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a042:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	78db      	ldrb	r3, [r3, #3]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d004      	beq.n	800a056 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a052:	613b      	str	r3, [r7, #16]
 800a054:	e003      	b.n	800a05e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a05c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a064:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	015a      	lsls	r2, r3, #5
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a072:	461a      	mov	r2, r3
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a078:	79fb      	ldrb	r3, [r7, #7]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	e04e      	b.n	800a120 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	78db      	ldrb	r3, [r3, #3]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d149      	bne.n	800a11e <USB_HC_StartXfer+0x276>
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d045      	beq.n	800a11e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	79db      	ldrb	r3, [r3, #7]
 800a096:	2b03      	cmp	r3, #3
 800a098:	d830      	bhi.n	800a0fc <USB_HC_StartXfer+0x254>
 800a09a:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <USB_HC_StartXfer+0x1f8>)
 800a09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a0:	0800a0b1 	.word	0x0800a0b1
 800a0a4:	0800a0d5 	.word	0x0800a0d5
 800a0a8:	0800a0b1 	.word	0x0800a0b1
 800a0ac:	0800a0d5 	.word	0x0800a0d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	695b      	ldr	r3, [r3, #20]
 800a0b4:	3303      	adds	r3, #3
 800a0b6:	089b      	lsrs	r3, r3, #2
 800a0b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a0ba:	8afa      	ldrh	r2, [r7, #22]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d91c      	bls.n	800a100 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	f043 0220 	orr.w	r2, r3, #32
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	619a      	str	r2, [r3, #24]
        }
        break;
 800a0d2:	e015      	b.n	800a100 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	3303      	adds	r3, #3
 800a0da:	089b      	lsrs	r3, r3, #2
 800a0dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a0de:	8afa      	ldrh	r2, [r7, #22]
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d90a      	bls.n	800a104 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	619a      	str	r2, [r3, #24]
        }
        break;
 800a0fa:	e003      	b.n	800a104 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a0fc:	bf00      	nop
 800a0fe:	e002      	b.n	800a106 <USB_HC_StartXfer+0x25e>
        break;
 800a100:	bf00      	nop
 800a102:	e000      	b.n	800a106 <USB_HC_StartXfer+0x25e>
        break;
 800a104:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	68d9      	ldr	r1, [r3, #12]
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	785a      	ldrb	r2, [r3, #1]
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	b29b      	uxth	r3, r3
 800a114:	2000      	movs	r0, #0
 800a116:	9000      	str	r0, [sp, #0]
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f7ff fb4f 	bl	80097bc <USB_WritePacket>
  }

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3728      	adds	r7, #40	; 0x28
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	1ff80000 	.word	0x1ff80000

0800a12c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a13e:	695b      	ldr	r3, [r3, #20]
 800a140:	b29b      	uxth	r3, r3
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a14e:	b480      	push	{r7}
 800a150:	b089      	sub	sp, #36	; 0x24
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	460b      	mov	r3, r1
 800a158:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800a15e:	78fb      	ldrb	r3, [r7, #3]
 800a160:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800a162:	2300      	movs	r3, #0
 800a164:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	015a      	lsls	r2, r3, #5
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	4413      	add	r3, r2
 800a16e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	0c9b      	lsrs	r3, r3, #18
 800a176:	f003 0303 	and.w	r3, r3, #3
 800a17a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	4413      	add	r3, r2
 800a184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	0fdb      	lsrs	r3, r3, #31
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	f003 0320 	and.w	r3, r3, #32
 800a19a:	2b20      	cmp	r3, #32
 800a19c:	d104      	bne.n	800a1a8 <USB_HC_Halt+0x5a>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	e0e8      	b.n	800a37a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <USB_HC_Halt+0x66>
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d173      	bne.n	800a29c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	015a      	lsls	r2, r3, #5
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	0151      	lsls	r1, r2, #5
 800a1c6:	69ba      	ldr	r2, [r7, #24]
 800a1c8:	440a      	add	r2, r1
 800a1ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1d2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	f003 0320 	and.w	r3, r3, #32
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f040 80cb 	bne.w	800a378 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d143      	bne.n	800a276 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	015a      	lsls	r2, r3, #5
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	0151      	lsls	r1, r2, #5
 800a200:	69ba      	ldr	r2, [r7, #24]
 800a202:	440a      	add	r2, r1
 800a204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a20c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	015a      	lsls	r2, r3, #5
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	4413      	add	r3, r2
 800a216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	697a      	ldr	r2, [r7, #20]
 800a21e:	0151      	lsls	r1, r2, #5
 800a220:	69ba      	ldr	r2, [r7, #24]
 800a222:	440a      	add	r2, r1
 800a224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a22c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	015a      	lsls	r2, r3, #5
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	4413      	add	r3, r2
 800a236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	0151      	lsls	r1, r2, #5
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	440a      	add	r2, r1
 800a244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a248:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a24c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	3301      	adds	r3, #1
 800a252:	61fb      	str	r3, [r7, #28]
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a25a:	d81d      	bhi.n	800a298 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	4413      	add	r3, r2
 800a264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a26e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a272:	d0ec      	beq.n	800a24e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a274:	e080      	b.n	800a378 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	015a      	lsls	r2, r3, #5
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	4413      	add	r3, r2
 800a27e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	697a      	ldr	r2, [r7, #20]
 800a286:	0151      	lsls	r1, r2, #5
 800a288:	69ba      	ldr	r2, [r7, #24]
 800a28a:	440a      	add	r2, r1
 800a28c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a290:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a294:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a296:	e06f      	b.n	800a378 <USB_HC_Halt+0x22a>
            break;
 800a298:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a29a:	e06d      	b.n	800a378 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	0151      	lsls	r1, r2, #5
 800a2ae:	69ba      	ldr	r2, [r7, #24]
 800a2b0:	440a      	add	r2, r1
 800a2b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2ba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d143      	bne.n	800a354 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	0151      	lsls	r1, r2, #5
 800a2de:	69ba      	ldr	r2, [r7, #24]
 800a2e0:	440a      	add	r2, r1
 800a2e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	015a      	lsls	r2, r3, #5
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	0151      	lsls	r1, r2, #5
 800a2fe:	69ba      	ldr	r2, [r7, #24]
 800a300:	440a      	add	r2, r1
 800a302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a30a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	015a      	lsls	r2, r3, #5
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	4413      	add	r3, r2
 800a314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	0151      	lsls	r1, r2, #5
 800a31e:	69ba      	ldr	r2, [r7, #24]
 800a320:	440a      	add	r2, r1
 800a322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a326:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a32a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	3301      	adds	r3, #1
 800a330:	61fb      	str	r3, [r7, #28]
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a338:	d81d      	bhi.n	800a376 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	4413      	add	r3, r2
 800a342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a34c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a350:	d0ec      	beq.n	800a32c <USB_HC_Halt+0x1de>
 800a352:	e011      	b.n	800a378 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	015a      	lsls	r2, r3, #5
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	4413      	add	r3, r2
 800a35c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	0151      	lsls	r1, r2, #5
 800a366:	69ba      	ldr	r2, [r7, #24]
 800a368:	440a      	add	r2, r1
 800a36a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a36e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	e000      	b.n	800a378 <USB_HC_Halt+0x22a>
          break;
 800a376:	bf00      	nop
    }
  }

  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3724      	adds	r7, #36	; 0x24
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
	...

0800a388 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a388:	b480      	push	{r7}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a398:	78fb      	ldrb	r3, [r7, #3]
 800a39a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a39c:	2301      	movs	r3, #1
 800a39e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	04da      	lsls	r2, r3, #19
 800a3a4:	4b15      	ldr	r3, [pc, #84]	; (800a3fc <USB_DoPing+0x74>)
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	0151      	lsls	r1, r2, #5
 800a3ac:	697a      	ldr	r2, [r7, #20]
 800a3ae:	440a      	add	r2, r1
 800a3b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3b8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	015a      	lsls	r2, r3, #5
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a3d0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3d8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	1ff80000 	.word	0x1ff80000

0800a400 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a40c:	2300      	movs	r3, #0
 800a40e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7ff f950 	bl	80096b6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a416:	2110      	movs	r1, #16
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff f987 	bl	800972c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f7ff f9aa 	bl	8009778 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a424:	2300      	movs	r3, #0
 800a426:	613b      	str	r3, [r7, #16]
 800a428:	e01f      	b.n	800a46a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	015a      	lsls	r2, r3, #5
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4413      	add	r3, r2
 800a432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a440:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a448:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a450:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a45e:	461a      	mov	r2, r3
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	3301      	adds	r3, #1
 800a468:	613b      	str	r3, [r7, #16]
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2b0f      	cmp	r3, #15
 800a46e:	d9dc      	bls.n	800a42a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a470:	2300      	movs	r3, #0
 800a472:	613b      	str	r3, [r7, #16]
 800a474:	e034      	b.n	800a4e0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a48c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a494:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a49c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	617b      	str	r3, [r7, #20]
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4bc:	d80c      	bhi.n	800a4d8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	015a      	lsls	r2, r3, #5
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4d4:	d0ec      	beq.n	800a4b0 <USB_StopHost+0xb0>
 800a4d6:	e000      	b.n	800a4da <USB_StopHost+0xda>
        break;
 800a4d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	613b      	str	r3, [r7, #16]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	2b0f      	cmp	r3, #15
 800a4e4:	d9c7      	bls.n	800a476 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7ff f8c9 	bl	8009694 <USB_EnableGlobalInt>

  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3718      	adds	r7, #24
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a50c:	b590      	push	{r4, r7, lr}
 800a50e:	b089      	sub	sp, #36	; 0x24
 800a510:	af04      	add	r7, sp, #16
 800a512:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a514:	2301      	movs	r3, #1
 800a516:	2202      	movs	r2, #2
 800a518:	2102      	movs	r1, #2
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fccc 	bl	800aeb8 <USBH_FindInterface>
 800a520:	4603      	mov	r3, r0
 800a522:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a524:	7bfb      	ldrb	r3, [r7, #15]
 800a526:	2bff      	cmp	r3, #255	; 0xff
 800a528:	d002      	beq.n	800a530 <USBH_CDC_InterfaceInit+0x24>
 800a52a:	7bfb      	ldrb	r3, [r7, #15]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d901      	bls.n	800a534 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a530:	2302      	movs	r3, #2
 800a532:	e13d      	b.n	800a7b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a534:	7bfb      	ldrb	r3, [r7, #15]
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fca1 	bl	800ae80 <USBH_SelectInterface>
 800a53e:	4603      	mov	r3, r0
 800a540:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a542:	7bbb      	ldrb	r3, [r7, #14]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a548:	2302      	movs	r3, #2
 800a54a:	e131      	b.n	800a7b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a552:	2050      	movs	r0, #80	; 0x50
 800a554:	f002 fb3a 	bl	800cbcc <malloc>
 800a558:	4603      	mov	r3, r0
 800a55a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a562:	69db      	ldr	r3, [r3, #28]
 800a564:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d101      	bne.n	800a570 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a56c:	2302      	movs	r3, #2
 800a56e:	e11f      	b.n	800a7b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a570:	2250      	movs	r2, #80	; 0x50
 800a572:	2100      	movs	r1, #0
 800a574:	68b8      	ldr	r0, [r7, #8]
 800a576:	f002 fb39 	bl	800cbec <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	211a      	movs	r1, #26
 800a580:	fb01 f303 	mul.w	r3, r1, r3
 800a584:	4413      	add	r3, r2
 800a586:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	b25b      	sxtb	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	da15      	bge.n	800a5be <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	211a      	movs	r1, #26
 800a598:	fb01 f303 	mul.w	r3, r1, r3
 800a59c:	4413      	add	r3, r2
 800a59e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a5a2:	781a      	ldrb	r2, [r3, #0]
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a5a8:	7bfb      	ldrb	r3, [r7, #15]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	211a      	movs	r1, #26
 800a5ae:	fb01 f303 	mul.w	r3, r1, r3
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a5b8:	881a      	ldrh	r2, [r3, #0]
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	785b      	ldrb	r3, [r3, #1]
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f001 fe98 	bl	800c2fa <USBH_AllocPipe>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	7819      	ldrb	r1, [r3, #0]
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	7858      	ldrb	r0, [r3, #1]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	8952      	ldrh	r2, [r2, #10]
 800a5ea:	9202      	str	r2, [sp, #8]
 800a5ec:	2203      	movs	r2, #3
 800a5ee:	9201      	str	r2, [sp, #4]
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	4623      	mov	r3, r4
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f001 fe50 	bl	800c29c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2200      	movs	r2, #0
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f002 fa33 	bl	800ca70 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a60a:	2300      	movs	r3, #0
 800a60c:	2200      	movs	r2, #0
 800a60e:	210a      	movs	r1, #10
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fc51 	bl	800aeb8 <USBH_FindInterface>
 800a616:	4603      	mov	r3, r0
 800a618:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
 800a61c:	2bff      	cmp	r3, #255	; 0xff
 800a61e:	d002      	beq.n	800a626 <USBH_CDC_InterfaceInit+0x11a>
 800a620:	7bfb      	ldrb	r3, [r7, #15]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d901      	bls.n	800a62a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a626:	2302      	movs	r3, #2
 800a628:	e0c2      	b.n	800a7b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	211a      	movs	r1, #26
 800a630:	fb01 f303 	mul.w	r3, r1, r3
 800a634:	4413      	add	r3, r2
 800a636:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	b25b      	sxtb	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	da16      	bge.n	800a670 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	211a      	movs	r1, #26
 800a648:	fb01 f303 	mul.w	r3, r1, r3
 800a64c:	4413      	add	r3, r2
 800a64e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a652:	781a      	ldrb	r2, [r3, #0]
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a658:	7bfb      	ldrb	r3, [r7, #15]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	211a      	movs	r1, #26
 800a65e:	fb01 f303 	mul.w	r3, r1, r3
 800a662:	4413      	add	r3, r2
 800a664:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a668:	881a      	ldrh	r2, [r3, #0]
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	835a      	strh	r2, [r3, #26]
 800a66e:	e015      	b.n	800a69c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a670:	7bfb      	ldrb	r3, [r7, #15]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	211a      	movs	r1, #26
 800a676:	fb01 f303 	mul.w	r3, r1, r3
 800a67a:	4413      	add	r3, r2
 800a67c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a680:	781a      	ldrb	r2, [r3, #0]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a686:	7bfb      	ldrb	r3, [r7, #15]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	211a      	movs	r1, #26
 800a68c:	fb01 f303 	mul.w	r3, r1, r3
 800a690:	4413      	add	r3, r2
 800a692:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a696:	881a      	ldrh	r2, [r3, #0]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	211a      	movs	r1, #26
 800a6a2:	fb01 f303 	mul.w	r3, r1, r3
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	b25b      	sxtb	r3, r3
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	da16      	bge.n	800a6e2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	211a      	movs	r1, #26
 800a6ba:	fb01 f303 	mul.w	r3, r1, r3
 800a6be:	4413      	add	r3, r2
 800a6c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a6c4:	781a      	ldrb	r2, [r3, #0]
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	211a      	movs	r1, #26
 800a6d0:	fb01 f303 	mul.w	r3, r1, r3
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a6da:	881a      	ldrh	r2, [r3, #0]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	835a      	strh	r2, [r3, #26]
 800a6e0:	e015      	b.n	800a70e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	211a      	movs	r1, #26
 800a6e8:	fb01 f303 	mul.w	r3, r1, r3
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a6f2:	781a      	ldrb	r2, [r3, #0]
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	211a      	movs	r1, #26
 800a6fe:	fb01 f303 	mul.w	r3, r1, r3
 800a702:	4413      	add	r3, r2
 800a704:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a708:	881a      	ldrh	r2, [r3, #0]
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	7b9b      	ldrb	r3, [r3, #14]
 800a712:	4619      	mov	r1, r3
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f001 fdf0 	bl	800c2fa <USBH_AllocPipe>
 800a71a:	4603      	mov	r3, r0
 800a71c:	461a      	mov	r2, r3
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	7bdb      	ldrb	r3, [r3, #15]
 800a726:	4619      	mov	r1, r3
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f001 fde6 	bl	800c2fa <USBH_AllocPipe>
 800a72e:	4603      	mov	r3, r0
 800a730:	461a      	mov	r2, r3
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	7b59      	ldrb	r1, [r3, #13]
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	7b98      	ldrb	r0, [r3, #14]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	8b12      	ldrh	r2, [r2, #24]
 800a74e:	9202      	str	r2, [sp, #8]
 800a750:	2202      	movs	r2, #2
 800a752:	9201      	str	r2, [sp, #4]
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	4623      	mov	r3, r4
 800a758:	4602      	mov	r2, r0
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f001 fd9e 	bl	800c29c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	7b19      	ldrb	r1, [r3, #12]
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	7bd8      	ldrb	r0, [r3, #15]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	8b52      	ldrh	r2, [r2, #26]
 800a778:	9202      	str	r2, [sp, #8]
 800a77a:	2202      	movs	r2, #2
 800a77c:	9201      	str	r2, [sp, #4]
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	4623      	mov	r3, r4
 800a782:	4602      	mov	r2, r0
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f001 fd89 	bl	800c29c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	7b5b      	ldrb	r3, [r3, #13]
 800a796:	2200      	movs	r2, #0
 800a798:	4619      	mov	r1, r3
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f002 f968 	bl	800ca70 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	7b1b      	ldrb	r3, [r3, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f002 f961 	bl	800ca70 <USBH_LL_SetToggle>

  return USBH_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd90      	pop	{r4, r7, pc}

0800a7b8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00e      	beq.n	800a7f0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 fd7e 	bl	800c2da <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f001 fda9 	bl	800c33c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	7b1b      	ldrb	r3, [r3, #12]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00e      	beq.n	800a816 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	7b1b      	ldrb	r3, [r3, #12]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f001 fd6b 	bl	800c2da <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	7b1b      	ldrb	r3, [r3, #12]
 800a808:	4619      	mov	r1, r3
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f001 fd96 	bl	800c33c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	7b5b      	ldrb	r3, [r3, #13]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00e      	beq.n	800a83c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	7b5b      	ldrb	r3, [r3, #13]
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 fd58 	bl	800c2da <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	7b5b      	ldrb	r3, [r3, #13]
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f001 fd83 	bl	800c33c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00b      	beq.n	800a860 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a84e:	69db      	ldr	r3, [r3, #28]
 800a850:	4618      	mov	r0, r3
 800a852:	f002 f9c3 	bl	800cbdc <free>
    phost->pActiveClass->pData = 0U;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a85c:	2200      	movs	r2, #0
 800a85e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b084      	sub	sp, #16
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a878:	69db      	ldr	r3, [r3, #28]
 800a87a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	3340      	adds	r3, #64	; 0x40
 800a880:	4619      	mov	r1, r3
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f8b1 	bl	800a9ea <GetLineCoding>
 800a888:	4603      	mov	r3, r0
 800a88a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a88c:	7afb      	ldrb	r3, [r7, #11]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d105      	bne.n	800a89e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a898:	2102      	movs	r1, #2
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a89e:	7afb      	ldrb	r3, [r7, #11]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8be:	69db      	ldr	r3, [r3, #28]
 800a8c0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a8c8:	2b04      	cmp	r3, #4
 800a8ca:	d877      	bhi.n	800a9bc <USBH_CDC_Process+0x114>
 800a8cc:	a201      	add	r2, pc, #4	; (adr r2, 800a8d4 <USBH_CDC_Process+0x2c>)
 800a8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d2:	bf00      	nop
 800a8d4:	0800a8e9 	.word	0x0800a8e9
 800a8d8:	0800a8ef 	.word	0x0800a8ef
 800a8dc:	0800a91f 	.word	0x0800a91f
 800a8e0:	0800a993 	.word	0x0800a993
 800a8e4:	0800a9a1 	.word	0x0800a9a1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ec:	e06d      	b.n	800a9ca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 f897 	bl	800aa28 <SetLineCoding>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a8fe:	7bbb      	ldrb	r3, [r7, #14]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d104      	bne.n	800a90e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2202      	movs	r2, #2
 800a908:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a90c:	e058      	b.n	800a9c0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a90e:	7bbb      	ldrb	r3, [r7, #14]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d055      	beq.n	800a9c0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2204      	movs	r2, #4
 800a918:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a91c:	e050      	b.n	800a9c0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	3340      	adds	r3, #64	; 0x40
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f860 	bl	800a9ea <GetLineCoding>
 800a92a:	4603      	mov	r3, r0
 800a92c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d126      	bne.n	800a982 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a946:	791b      	ldrb	r3, [r3, #4]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d13b      	bne.n	800a9c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a956:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a958:	429a      	cmp	r2, r3
 800a95a:	d133      	bne.n	800a9c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a966:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a968:	429a      	cmp	r2, r3
 800a96a:	d12b      	bne.n	800a9c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a974:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a976:	429a      	cmp	r2, r3
 800a978:	d124      	bne.n	800a9c4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f9be 	bl	800acfc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a980:	e020      	b.n	800a9c4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a982:	7bbb      	ldrb	r3, [r7, #14]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d01d      	beq.n	800a9c4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	2204      	movs	r2, #4
 800a98c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a990:	e018      	b.n	800a9c4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f8e1 	bl	800ab5a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f954 	bl	800ac46 <CDC_ProcessReception>
      break;
 800a99e:	e014      	b.n	800a9ca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f001 f849 	bl	800ba3a <USBH_ClrFeature>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a9ac:	7bbb      	ldrb	r3, [r7, #14]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10a      	bne.n	800a9c8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a9ba:	e005      	b.n	800a9c8 <USBH_CDC_Process+0x120>

    default:
      break;
 800a9bc:	bf00      	nop
 800a9be:	e004      	b.n	800a9ca <USBH_CDC_Process+0x122>
      break;
 800a9c0:	bf00      	nop
 800a9c2:	e002      	b.n	800a9ca <USBH_CDC_Process+0x122>
      break;
 800a9c4:	bf00      	nop
 800a9c6:	e000      	b.n	800a9ca <USBH_CDC_Process+0x122>
      break;
 800a9c8:	bf00      	nop

  }

  return status;
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	22a1      	movs	r2, #161	; 0xa1
 800a9f8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2221      	movs	r2, #33	; 0x21
 800a9fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2207      	movs	r2, #7
 800aa10:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2207      	movs	r2, #7
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 f9ee 	bl	800bdfa <USBH_CtlReq>
 800aa1e:	4603      	mov	r3, r0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2221      	movs	r2, #33	; 0x21
 800aa36:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2207      	movs	r2, #7
 800aa4e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2207      	movs	r2, #7
 800aa54:	4619      	mov	r1, r3
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f001 f9cf 	bl	800bdfa <USBH_CtlReq>
 800aa5c:	4603      	mov	r3, r0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <USBH_CDC_GetLastReceivedDataSize>:
  * @brief  This function return last received data size
  * @param  None
  * @retval None
  */
uint16_t USBH_CDC_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b084      	sub	sp, #16
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  uint32_t dataSize;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa74:	69db      	ldr	r3, [r3, #28]
 800aa76:	60bb      	str	r3, [r7, #8]

  if (phost->gState == HOST_CLASS)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b0b      	cmp	r3, #11
 800aa80:	d107      	bne.n	800aa92 <USBH_CDC_GetLastReceivedDataSize+0x2c>
  {
    dataSize = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	7b1b      	ldrb	r3, [r3, #12]
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f001 ff35 	bl	800c8f8 <USBH_LL_GetLastXferSize>
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	e001      	b.n	800aa96 <USBH_CDC_GetLastReceivedDataSize+0x30>
  }
  else
  {
    dataSize =  0U;
 800aa92:	2300      	movs	r3, #0
 800aa94:	60fb      	str	r3, [r7, #12]
  }

  return (uint16_t)dataSize;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	b29b      	uxth	r3, r3
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b087      	sub	sp, #28
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	60f8      	str	r0, [r7, #12]
 800aaaa:	60b9      	str	r1, [r7, #8]
 800aaac:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aaae:	2301      	movs	r3, #1
 800aab0:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aab8:	69db      	ldr	r3, [r3, #28]
 800aaba:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d004      	beq.n	800aad0 <USBH_CDC_Transmit+0x2e>
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800aacc:	2b03      	cmp	r3, #3
 800aace:	d10f      	bne.n	800aaf0 <USBH_CDC_Transmit+0x4e>
  {
    CDC_Handle->pTxData = pbuff;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	2203      	movs	r2, #3
 800aae0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	371c      	adds	r7, #28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b087      	sub	sp, #28
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	60f8      	str	r0, [r7, #12]
 800ab06:	60b9      	str	r1, [r7, #8]
 800ab08:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d004      	beq.n	800ab2c <USBH_CDC_Receive+0x2e>
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ab28:	2b03      	cmp	r3, #3
 800ab2a:	d10f      	bne.n	800ab4c <USBH_CDC_Receive+0x4e>
  {
    CDC_Handle->pRxData = pbuff;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	2203      	movs	r2, #3
 800ab3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	2203      	movs	r2, #3
 800ab44:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	371c      	adds	r7, #28
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b086      	sub	sp, #24
 800ab5e:	af02      	add	r7, sp, #8
 800ab60:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab68:	69db      	ldr	r3, [r3, #28]
 800ab6a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d002      	beq.n	800ab80 <CDC_ProcessTransmission+0x26>
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d023      	beq.n	800abc6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ab7e:	e05e      	b.n	800ac3e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	8b12      	ldrh	r2, [r2, #24]
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d90b      	bls.n	800aba4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	69d9      	ldr	r1, [r3, #28]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	8b1a      	ldrh	r2, [r3, #24]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	7b5b      	ldrb	r3, [r3, #13]
 800ab98:	2001      	movs	r0, #1
 800ab9a:	9000      	str	r0, [sp, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f001 fb3a 	bl	800c216 <USBH_BulkSendData>
 800aba2:	e00b      	b.n	800abbc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800abac:	b29a      	uxth	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	7b5b      	ldrb	r3, [r3, #13]
 800abb2:	2001      	movs	r0, #1
 800abb4:	9000      	str	r0, [sp, #0]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f001 fb2d 	bl	800c216 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2202      	movs	r2, #2
 800abc0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800abc4:	e03b      	b.n	800ac3e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	7b5b      	ldrb	r3, [r3, #13]
 800abca:	4619      	mov	r1, r3
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f001 ff25 	bl	800ca1c <USBH_LL_GetURBState>
 800abd2:	4603      	mov	r3, r0
 800abd4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800abd6:	7afb      	ldrb	r3, [r7, #11]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d128      	bne.n	800ac2e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	8b12      	ldrh	r2, [r2, #24]
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d90e      	bls.n	800ac06 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	8b12      	ldrh	r2, [r2, #24]
 800abf0:	1a9a      	subs	r2, r3, r2
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	8b12      	ldrh	r2, [r2, #24]
 800abfe:	441a      	add	r2, r3
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	61da      	str	r2, [r3, #28]
 800ac04:	e002      	b.n	800ac0c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d004      	beq.n	800ac1e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ac1c:	e00e      	b.n	800ac3c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f001 fbca 	bl	800c3c0 <USBH_CDC_TransmitCallback>
      break;
 800ac2c:	e006      	b.n	800ac3c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ac2e:	7afb      	ldrb	r3, [r7, #11]
 800ac30:	2b02      	cmp	r3, #2
 800ac32:	d103      	bne.n	800ac3c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ac3c:	bf00      	nop
  }
}
 800ac3e:	bf00      	nop
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b086      	sub	sp, #24
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	d002      	beq.n	800ac6c <CDC_ProcessReception+0x26>
 800ac66:	2b04      	cmp	r3, #4
 800ac68:	d00e      	beq.n	800ac88 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ac6a:	e043      	b.n	800acf4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	6a19      	ldr	r1, [r3, #32]
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	8b5a      	ldrh	r2, [r3, #26]
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	7b1b      	ldrb	r3, [r3, #12]
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f001 faf1 	bl	800c260 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	2204      	movs	r2, #4
 800ac82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ac86:	e035      	b.n	800acf4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	7b1b      	ldrb	r3, [r3, #12]
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f001 fec4 	bl	800ca1c <USBH_LL_GetURBState>
 800ac94:	4603      	mov	r3, r0
 800ac96:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ac98:	7cfb      	ldrb	r3, [r7, #19]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d129      	bne.n	800acf2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	7b1b      	ldrb	r3, [r3, #12]
 800aca2:	4619      	mov	r1, r3
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f001 fe27 	bl	800c8f8 <USBH_LL_GetLastXferSize>
 800acaa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d016      	beq.n	800ace4 <CDC_ProcessReception+0x9e>
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	8b5b      	ldrh	r3, [r3, #26]
 800acba:	461a      	mov	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d910      	bls.n	800ace4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	1ad2      	subs	r2, r2, r3
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	6a1a      	ldr	r2, [r3, #32]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	441a      	add	r2, r3
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2203      	movs	r2, #3
 800acde:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ace2:	e006      	b.n	800acf2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f001 fb71 	bl	800c3d4 <USBH_CDC_ReceiveCallback>
      break;
 800acf2:	bf00      	nop
  }
}
 800acf4:	bf00      	nop
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ad24:	2302      	movs	r3, #2
 800ad26:	e029      	b.n	800ad7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	79fa      	ldrb	r2, [r7, #7]
 800ad2c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f000 f81f 	bl	800ad84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d003      	beq.n	800ad74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f001 fd0b 	bl	800c790 <USBH_LL_Init>

  return USBH_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ad90:	2300      	movs	r3, #0
 800ad92:	60fb      	str	r3, [r7, #12]
 800ad94:	e009      	b.n	800adaa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	33e0      	adds	r3, #224	; 0xe0
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	4413      	add	r3, r2
 800ada0:	2200      	movs	r2, #0
 800ada2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	3301      	adds	r3, #1
 800ada8:	60fb      	str	r3, [r7, #12]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2b0e      	cmp	r3, #14
 800adae:	d9f2      	bls.n	800ad96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800adb0:	2300      	movs	r3, #0
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	e009      	b.n	800adca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	4413      	add	r3, r2
 800adbc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800adc0:	2200      	movs	r2, #0
 800adc2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	3301      	adds	r3, #1
 800adc8:	60fb      	str	r3, [r7, #12]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800add0:	d3f1      	bcc.n	800adb6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2240      	movs	r2, #64	; 0x40
 800adf6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d016      	beq.n	800ae6e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10e      	bne.n	800ae68 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ae50:	1c59      	adds	r1, r3, #1
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	33de      	adds	r3, #222	; 0xde
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73fb      	strb	r3, [r7, #15]
 800ae66:	e004      	b.n	800ae72 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ae68:	2302      	movs	r3, #2
 800ae6a:	73fb      	strb	r3, [r7, #15]
 800ae6c:	e001      	b.n	800ae72 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ae6e:	2302      	movs	r3, #2
 800ae70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ae72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ae96:	78fa      	ldrb	r2, [r7, #3]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d204      	bcs.n	800aea6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	78fa      	ldrb	r2, [r7, #3]
 800aea0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800aea4:	e001      	b.n	800aeaa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aea6:	2302      	movs	r3, #2
 800aea8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3714      	adds	r7, #20
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b087      	sub	sp, #28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	4608      	mov	r0, r1
 800aec2:	4611      	mov	r1, r2
 800aec4:	461a      	mov	r2, r3
 800aec6:	4603      	mov	r3, r0
 800aec8:	70fb      	strb	r3, [r7, #3]
 800aeca:	460b      	mov	r3, r1
 800aecc:	70bb      	strb	r3, [r7, #2]
 800aece:	4613      	mov	r3, r2
 800aed0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800aed2:	2300      	movs	r3, #0
 800aed4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800aed6:	2300      	movs	r3, #0
 800aed8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aee0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aee2:	e025      	b.n	800af30 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
 800aee6:	221a      	movs	r2, #26
 800aee8:	fb02 f303 	mul.w	r3, r2, r3
 800aeec:	3308      	adds	r3, #8
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	4413      	add	r3, r2
 800aef2:	3302      	adds	r3, #2
 800aef4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	795b      	ldrb	r3, [r3, #5]
 800aefa:	78fa      	ldrb	r2, [r7, #3]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d002      	beq.n	800af06 <USBH_FindInterface+0x4e>
 800af00:	78fb      	ldrb	r3, [r7, #3]
 800af02:	2bff      	cmp	r3, #255	; 0xff
 800af04:	d111      	bne.n	800af2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800af0a:	78ba      	ldrb	r2, [r7, #2]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d002      	beq.n	800af16 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800af10:	78bb      	ldrb	r3, [r7, #2]
 800af12:	2bff      	cmp	r3, #255	; 0xff
 800af14:	d109      	bne.n	800af2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800af1a:	787a      	ldrb	r2, [r7, #1]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d002      	beq.n	800af26 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800af20:	787b      	ldrb	r3, [r7, #1]
 800af22:	2bff      	cmp	r3, #255	; 0xff
 800af24:	d101      	bne.n	800af2a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800af26:	7dfb      	ldrb	r3, [r7, #23]
 800af28:	e006      	b.n	800af38 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800af2a:	7dfb      	ldrb	r3, [r7, #23]
 800af2c:	3301      	adds	r3, #1
 800af2e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800af30:	7dfb      	ldrb	r3, [r7, #23]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d9d6      	bls.n	800aee4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800af36:	23ff      	movs	r3, #255	; 0xff
}
 800af38:	4618      	mov	r0, r3
 800af3a:	371c      	adds	r7, #28
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f001 fc5b 	bl	800c808 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800af52:	2101      	movs	r1, #1
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f001 fd74 	bl	800ca42 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b088      	sub	sp, #32
 800af68:	af04      	add	r7, sp, #16
 800af6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800af6c:	2302      	movs	r3, #2
 800af6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800af70:	2300      	movs	r3, #0
 800af72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d102      	bne.n	800af86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2203      	movs	r2, #3
 800af84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b0b      	cmp	r3, #11
 800af8e:	f200 81b3 	bhi.w	800b2f8 <USBH_Process+0x394>
 800af92:	a201      	add	r2, pc, #4	; (adr r2, 800af98 <USBH_Process+0x34>)
 800af94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af98:	0800afc9 	.word	0x0800afc9
 800af9c:	0800affb 	.word	0x0800affb
 800afa0:	0800b063 	.word	0x0800b063
 800afa4:	0800b293 	.word	0x0800b293
 800afa8:	0800b2f9 	.word	0x0800b2f9
 800afac:	0800b107 	.word	0x0800b107
 800afb0:	0800b239 	.word	0x0800b239
 800afb4:	0800b13d 	.word	0x0800b13d
 800afb8:	0800b15d 	.word	0x0800b15d
 800afbc:	0800b17d 	.word	0x0800b17d
 800afc0:	0800b1ab 	.word	0x0800b1ab
 800afc4:	0800b27b 	.word	0x0800b27b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f000 8193 	beq.w	800b2fc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2201      	movs	r2, #1
 800afda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800afdc:	20c8      	movs	r0, #200	; 0xc8
 800afde:	f001 fd77 	bl	800cad0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f001 fc6d 	bl	800c8c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aff8:	e180      	b.n	800b2fc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b000:	2b01      	cmp	r3, #1
 800b002:	d107      	bne.n	800b014 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2202      	movs	r2, #2
 800b010:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b012:	e182      	b.n	800b31a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b01a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b01e:	d914      	bls.n	800b04a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b026:	3301      	adds	r3, #1
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b036:	2b03      	cmp	r3, #3
 800b038:	d903      	bls.n	800b042 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	220d      	movs	r2, #13
 800b03e:	701a      	strb	r2, [r3, #0]
      break;
 800b040:	e16b      	b.n	800b31a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	701a      	strb	r2, [r3, #0]
      break;
 800b048:	e167      	b.n	800b31a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b050:	f103 020a 	add.w	r2, r3, #10
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b05a:	200a      	movs	r0, #10
 800b05c:	f001 fd38 	bl	800cad0 <USBH_Delay>
      break;
 800b060:	e15b      	b.n	800b31a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d005      	beq.n	800b078 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b072:	2104      	movs	r1, #4
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b078:	2064      	movs	r0, #100	; 0x64
 800b07a:	f001 fd29 	bl	800cad0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f001 fbf8 	bl	800c874 <USBH_LL_GetSpeed>
 800b084:	4603      	mov	r3, r0
 800b086:	461a      	mov	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2205      	movs	r2, #5
 800b092:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b094:	2100      	movs	r1, #0
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f001 f92f 	bl	800c2fa <USBH_AllocPipe>
 800b09c:	4603      	mov	r3, r0
 800b09e:	461a      	mov	r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b0a4:	2180      	movs	r1, #128	; 0x80
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f001 f927 	bl	800c2fa <USBH_AllocPipe>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	7919      	ldrb	r1, [r3, #4]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b0c8:	b292      	uxth	r2, r2
 800b0ca:	9202      	str	r2, [sp, #8]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	9201      	str	r2, [sp, #4]
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2280      	movs	r2, #128	; 0x80
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f001 f8e0 	bl	800c29c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	7959      	ldrb	r1, [r3, #5]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b0f0:	b292      	uxth	r2, r2
 800b0f2:	9202      	str	r2, [sp, #8]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	9201      	str	r2, [sp, #4]
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f001 f8cc 	bl	800c29c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b104:	e109      	b.n	800b31a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f90c 	bl	800b324 <USBH_HandleEnum>
 800b10c:	4603      	mov	r3, r0
 800b10e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b110:	7bbb      	ldrb	r3, [r7, #14]
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b00      	cmp	r3, #0
 800b116:	f040 80f3 	bne.w	800b300 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d103      	bne.n	800b134 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2208      	movs	r2, #8
 800b130:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b132:	e0e5      	b.n	800b300 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2207      	movs	r2, #7
 800b138:	701a      	strb	r2, [r3, #0]
      break;
 800b13a:	e0e1      	b.n	800b300 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b142:	2b00      	cmp	r3, #0
 800b144:	f000 80de 	beq.w	800b304 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b14e:	2101      	movs	r1, #1
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2208      	movs	r2, #8
 800b158:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b15a:	e0d3      	b.n	800b304 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b162:	b29b      	uxth	r3, r3
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fc20 	bl	800b9ac <USBH_SetCfg>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f040 80ca 	bne.w	800b308 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2209      	movs	r2, #9
 800b178:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b17a:	e0c5      	b.n	800b308 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b182:	f003 0320 	and.w	r3, r3, #32
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00b      	beq.n	800b1a2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b18a:	2101      	movs	r1, #1
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fc30 	bl	800b9f2 <USBH_SetFeature>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	f040 80b9 	bne.w	800b30c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	220a      	movs	r2, #10
 800b19e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b1a0:	e0b4      	b.n	800b30c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	220a      	movs	r2, #10
 800b1a6:	701a      	strb	r2, [r3, #0]
      break;
 800b1a8:	e0b0      	b.n	800b30c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f000 80ad 	beq.w	800b310 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b1be:	2300      	movs	r3, #0
 800b1c0:	73fb      	strb	r3, [r7, #15]
 800b1c2:	e016      	b.n	800b1f2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b1c4:	7bfa      	ldrb	r2, [r7, #15]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	32de      	adds	r2, #222	; 0xde
 800b1ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ce:	791a      	ldrb	r2, [r3, #4]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d108      	bne.n	800b1ec <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b1da:	7bfa      	ldrb	r2, [r7, #15]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	32de      	adds	r2, #222	; 0xde
 800b1e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b1ea:	e005      	b.n	800b1f8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	73fb      	strb	r3, [r7, #15]
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d0e5      	beq.n	800b1c4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d016      	beq.n	800b230 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	4798      	blx	r3
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d109      	bne.n	800b228 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2206      	movs	r2, #6
 800b218:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b220:	2103      	movs	r1, #3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b226:	e073      	b.n	800b310 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	220d      	movs	r2, #13
 800b22c:	701a      	strb	r2, [r3, #0]
      break;
 800b22e:	e06f      	b.n	800b310 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	220d      	movs	r2, #13
 800b234:	701a      	strb	r2, [r3, #0]
      break;
 800b236:	e06b      	b.n	800b310 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d017      	beq.n	800b272 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	4798      	blx	r3
 800b24e:	4603      	mov	r3, r0
 800b250:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b252:	7bbb      	ldrb	r3, [r7, #14]
 800b254:	b2db      	uxtb	r3, r3
 800b256:	2b00      	cmp	r3, #0
 800b258:	d103      	bne.n	800b262 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	220b      	movs	r2, #11
 800b25e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b260:	e058      	b.n	800b314 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b262:	7bbb      	ldrb	r3, [r7, #14]
 800b264:	b2db      	uxtb	r3, r3
 800b266:	2b02      	cmp	r3, #2
 800b268:	d154      	bne.n	800b314 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	220d      	movs	r2, #13
 800b26e:	701a      	strb	r2, [r3, #0]
      break;
 800b270:	e050      	b.n	800b314 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	220d      	movs	r2, #13
 800b276:	701a      	strb	r2, [r3, #0]
      break;
 800b278:	e04c      	b.n	800b314 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b280:	2b00      	cmp	r3, #0
 800b282:	d049      	beq.n	800b318 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b28a:	695b      	ldr	r3, [r3, #20]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	4798      	blx	r3
      }
      break;
 800b290:	e042      	b.n	800b318 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7ff fd72 	bl	800ad84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d009      	beq.n	800b2be <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d005      	beq.n	800b2d4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2ce:	2105      	movs	r1, #5
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d107      	bne.n	800b2f0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f7ff fe2b 	bl	800af44 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b2ee:	e014      	b.n	800b31a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f001 fa89 	bl	800c808 <USBH_LL_Start>
      break;
 800b2f6:	e010      	b.n	800b31a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b2f8:	bf00      	nop
 800b2fa:	e00e      	b.n	800b31a <USBH_Process+0x3b6>
      break;
 800b2fc:	bf00      	nop
 800b2fe:	e00c      	b.n	800b31a <USBH_Process+0x3b6>
      break;
 800b300:	bf00      	nop
 800b302:	e00a      	b.n	800b31a <USBH_Process+0x3b6>
    break;
 800b304:	bf00      	nop
 800b306:	e008      	b.n	800b31a <USBH_Process+0x3b6>
      break;
 800b308:	bf00      	nop
 800b30a:	e006      	b.n	800b31a <USBH_Process+0x3b6>
      break;
 800b30c:	bf00      	nop
 800b30e:	e004      	b.n	800b31a <USBH_Process+0x3b6>
      break;
 800b310:	bf00      	nop
 800b312:	e002      	b.n	800b31a <USBH_Process+0x3b6>
      break;
 800b314:	bf00      	nop
 800b316:	e000      	b.n	800b31a <USBH_Process+0x3b6>
      break;
 800b318:	bf00      	nop
  }
  return USBH_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b088      	sub	sp, #32
 800b328:	af04      	add	r7, sp, #16
 800b32a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b32c:	2301      	movs	r3, #1
 800b32e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b330:	2301      	movs	r3, #1
 800b332:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	785b      	ldrb	r3, [r3, #1]
 800b338:	2b07      	cmp	r3, #7
 800b33a:	f200 81c1 	bhi.w	800b6c0 <USBH_HandleEnum+0x39c>
 800b33e:	a201      	add	r2, pc, #4	; (adr r2, 800b344 <USBH_HandleEnum+0x20>)
 800b340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b344:	0800b365 	.word	0x0800b365
 800b348:	0800b423 	.word	0x0800b423
 800b34c:	0800b48d 	.word	0x0800b48d
 800b350:	0800b51b 	.word	0x0800b51b
 800b354:	0800b585 	.word	0x0800b585
 800b358:	0800b5f5 	.word	0x0800b5f5
 800b35c:	0800b63b 	.word	0x0800b63b
 800b360:	0800b681 	.word	0x0800b681
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b364:	2108      	movs	r1, #8
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fa50 	bl	800b80c <USBH_Get_DevDesc>
 800b36c:	4603      	mov	r3, r0
 800b36e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b370:	7bbb      	ldrb	r3, [r7, #14]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d130      	bne.n	800b3d8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	7919      	ldrb	r1, [r3, #4]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b39a:	b292      	uxth	r2, r2
 800b39c:	9202      	str	r2, [sp, #8]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	9201      	str	r2, [sp, #4]
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2280      	movs	r2, #128	; 0x80
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 ff77 	bl	800c29c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	7959      	ldrb	r1, [r3, #5]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b3c2:	b292      	uxth	r2, r2
 800b3c4:	9202      	str	r2, [sp, #8]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	9201      	str	r2, [sp, #4]
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 ff63 	bl	800c29c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b3d6:	e175      	b.n	800b6c4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b3d8:	7bbb      	ldrb	r3, [r7, #14]
 800b3da:	2b03      	cmp	r3, #3
 800b3dc:	f040 8172 	bne.w	800b6c4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	b2da      	uxtb	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b3f6:	2b03      	cmp	r3, #3
 800b3f8:	d903      	bls.n	800b402 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	220d      	movs	r2, #13
 800b3fe:	701a      	strb	r2, [r3, #0]
      break;
 800b400:	e160      	b.n	800b6c4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	795b      	ldrb	r3, [r3, #5]
 800b406:	4619      	mov	r1, r3
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 ff97 	bl	800c33c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	791b      	ldrb	r3, [r3, #4]
 800b412:	4619      	mov	r1, r3
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 ff91 	bl	800c33c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	701a      	strb	r2, [r3, #0]
      break;
 800b420:	e150      	b.n	800b6c4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b422:	2112      	movs	r1, #18
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f9f1 	bl	800b80c <USBH_Get_DevDesc>
 800b42a:	4603      	mov	r3, r0
 800b42c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b42e:	7bbb      	ldrb	r3, [r7, #14]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d103      	bne.n	800b43c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2202      	movs	r2, #2
 800b438:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b43a:	e145      	b.n	800b6c8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b43c:	7bbb      	ldrb	r3, [r7, #14]
 800b43e:	2b03      	cmp	r3, #3
 800b440:	f040 8142 	bne.w	800b6c8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b44a:	3301      	adds	r3, #1
 800b44c:	b2da      	uxtb	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d903      	bls.n	800b466 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	220d      	movs	r2, #13
 800b462:	701a      	strb	r2, [r3, #0]
      break;
 800b464:	e130      	b.n	800b6c8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	795b      	ldrb	r3, [r3, #5]
 800b46a:	4619      	mov	r1, r3
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 ff65 	bl	800c33c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	791b      	ldrb	r3, [r3, #4]
 800b476:	4619      	mov	r1, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 ff5f 	bl	800c33c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	701a      	strb	r2, [r3, #0]
      break;
 800b48a:	e11d      	b.n	800b6c8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b48c:	2101      	movs	r1, #1
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fa68 	bl	800b964 <USBH_SetAddress>
 800b494:	4603      	mov	r3, r0
 800b496:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b498:	7bbb      	ldrb	r3, [r7, #14]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d132      	bne.n	800b504 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b49e:	2002      	movs	r0, #2
 800b4a0:	f001 fb16 	bl	800cad0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2203      	movs	r2, #3
 800b4b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	7919      	ldrb	r1, [r3, #4]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b4c6:	b292      	uxth	r2, r2
 800b4c8:	9202      	str	r2, [sp, #8]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	9201      	str	r2, [sp, #4]
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2280      	movs	r2, #128	; 0x80
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fee1 	bl	800c29c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	7959      	ldrb	r1, [r3, #5]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b4ee:	b292      	uxth	r2, r2
 800b4f0:	9202      	str	r2, [sp, #8]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	9201      	str	r2, [sp, #4]
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fecd 	bl	800c29c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b502:	e0e3      	b.n	800b6cc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b504:	7bbb      	ldrb	r3, [r7, #14]
 800b506:	2b03      	cmp	r3, #3
 800b508:	f040 80e0 	bne.w	800b6cc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	220d      	movs	r2, #13
 800b510:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	705a      	strb	r2, [r3, #1]
      break;
 800b518:	e0d8      	b.n	800b6cc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b51a:	2109      	movs	r1, #9
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f99d 	bl	800b85c <USBH_Get_CfgDesc>
 800b522:	4603      	mov	r3, r0
 800b524:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b526:	7bbb      	ldrb	r3, [r7, #14]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d103      	bne.n	800b534 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2204      	movs	r2, #4
 800b530:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b532:	e0cd      	b.n	800b6d0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b534:	7bbb      	ldrb	r3, [r7, #14]
 800b536:	2b03      	cmp	r3, #3
 800b538:	f040 80ca 	bne.w	800b6d0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b542:	3301      	adds	r3, #1
 800b544:	b2da      	uxtb	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b552:	2b03      	cmp	r3, #3
 800b554:	d903      	bls.n	800b55e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	220d      	movs	r2, #13
 800b55a:	701a      	strb	r2, [r3, #0]
      break;
 800b55c:	e0b8      	b.n	800b6d0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	795b      	ldrb	r3, [r3, #5]
 800b562:	4619      	mov	r1, r3
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fee9 	bl	800c33c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	791b      	ldrb	r3, [r3, #4]
 800b56e:	4619      	mov	r1, r3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fee3 	bl	800c33c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	701a      	strb	r2, [r3, #0]
      break;
 800b582:	e0a5      	b.n	800b6d0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b58a:	4619      	mov	r1, r3
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f965 	bl	800b85c <USBH_Get_CfgDesc>
 800b592:	4603      	mov	r3, r0
 800b594:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d103      	bne.n	800b5a4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2205      	movs	r2, #5
 800b5a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b5a2:	e097      	b.n	800b6d4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5a4:	7bbb      	ldrb	r3, [r7, #14]
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	f040 8094 	bne.w	800b6d4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5c2:	2b03      	cmp	r3, #3
 800b5c4:	d903      	bls.n	800b5ce <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	220d      	movs	r2, #13
 800b5ca:	701a      	strb	r2, [r3, #0]
      break;
 800b5cc:	e082      	b.n	800b6d4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	795b      	ldrb	r3, [r3, #5]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 feb1 	bl	800c33c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	791b      	ldrb	r3, [r3, #4]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 feab 	bl	800c33c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	701a      	strb	r2, [r3, #0]
      break;
 800b5f2:	e06f      	b.n	800b6d4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d019      	beq.n	800b632 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b60a:	23ff      	movs	r3, #255	; 0xff
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f949 	bl	800b8a4 <USBH_Get_StringDesc>
 800b612:	4603      	mov	r3, r0
 800b614:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b616:	7bbb      	ldrb	r3, [r7, #14]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d103      	bne.n	800b624 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2206      	movs	r2, #6
 800b620:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b622:	e059      	b.n	800b6d8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b624:	7bbb      	ldrb	r3, [r7, #14]
 800b626:	2b03      	cmp	r3, #3
 800b628:	d156      	bne.n	800b6d8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2206      	movs	r2, #6
 800b62e:	705a      	strb	r2, [r3, #1]
      break;
 800b630:	e052      	b.n	800b6d8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2206      	movs	r2, #6
 800b636:	705a      	strb	r2, [r3, #1]
      break;
 800b638:	e04e      	b.n	800b6d8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b640:	2b00      	cmp	r3, #0
 800b642:	d019      	beq.n	800b678 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b650:	23ff      	movs	r3, #255	; 0xff
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 f926 	bl	800b8a4 <USBH_Get_StringDesc>
 800b658:	4603      	mov	r3, r0
 800b65a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b65c:	7bbb      	ldrb	r3, [r7, #14]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d103      	bne.n	800b66a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2207      	movs	r2, #7
 800b666:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b668:	e038      	b.n	800b6dc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	2b03      	cmp	r3, #3
 800b66e:	d135      	bne.n	800b6dc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2207      	movs	r2, #7
 800b674:	705a      	strb	r2, [r3, #1]
      break;
 800b676:	e031      	b.n	800b6dc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2207      	movs	r2, #7
 800b67c:	705a      	strb	r2, [r3, #1]
      break;
 800b67e:	e02d      	b.n	800b6dc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b686:	2b00      	cmp	r3, #0
 800b688:	d017      	beq.n	800b6ba <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b696:	23ff      	movs	r3, #255	; 0xff
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f903 	bl	800b8a4 <USBH_Get_StringDesc>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d102      	bne.n	800b6ae <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b6ac:	e018      	b.n	800b6e0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b6ae:	7bbb      	ldrb	r3, [r7, #14]
 800b6b0:	2b03      	cmp	r3, #3
 800b6b2:	d115      	bne.n	800b6e0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6b8:	e012      	b.n	800b6e0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b6be:	e00f      	b.n	800b6e0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b6c0:	bf00      	nop
 800b6c2:	e00e      	b.n	800b6e2 <USBH_HandleEnum+0x3be>
      break;
 800b6c4:	bf00      	nop
 800b6c6:	e00c      	b.n	800b6e2 <USBH_HandleEnum+0x3be>
      break;
 800b6c8:	bf00      	nop
 800b6ca:	e00a      	b.n	800b6e2 <USBH_HandleEnum+0x3be>
      break;
 800b6cc:	bf00      	nop
 800b6ce:	e008      	b.n	800b6e2 <USBH_HandleEnum+0x3be>
      break;
 800b6d0:	bf00      	nop
 800b6d2:	e006      	b.n	800b6e2 <USBH_HandleEnum+0x3be>
      break;
 800b6d4:	bf00      	nop
 800b6d6:	e004      	b.n	800b6e2 <USBH_HandleEnum+0x3be>
      break;
 800b6d8:	bf00      	nop
 800b6da:	e002      	b.n	800b6e2 <USBH_HandleEnum+0x3be>
      break;
 800b6dc:	bf00      	nop
 800b6de:	e000      	b.n	800b6e2 <USBH_HandleEnum+0x3be>
      break;
 800b6e0:	bf00      	nop
  }
  return Status;
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	683a      	ldr	r2, [r7, #0]
 800b6fa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b6fe:	bf00      	nop
 800b700:	370c      	adds	r7, #12
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b082      	sub	sp, #8
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b718:	1c5a      	adds	r2, r3, #1
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f804 	bl	800b72e <USBH_HandleSof>
}
 800b726:	bf00      	nop
 800b728:	3708      	adds	r7, #8
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b082      	sub	sp, #8
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	2b0b      	cmp	r3, #11
 800b73e:	d10a      	bne.n	800b756 <USBH_HandleSof+0x28>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b746:	2b00      	cmp	r3, #0
 800b748:	d005      	beq.n	800b756 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	4798      	blx	r3
  }
}
 800b756:	bf00      	nop
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b75e:	b480      	push	{r7}
 800b760:	b083      	sub	sp, #12
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b76e:	bf00      	nop
}
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b77a:	b480      	push	{r7}
 800b77c:	b083      	sub	sp, #12
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b78a:	bf00      	nop
}
 800b78c:	370c      	adds	r7, #12
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b796:	b480      	push	{r7}
 800b798:	b083      	sub	sp, #12
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f001 f82a 	bl	800c83e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	791b      	ldrb	r3, [r3, #4]
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 fda3 	bl	800c33c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	795b      	ldrb	r3, [r3, #5]
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 fd9d 	bl	800c33c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3708      	adds	r7, #8
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af02      	add	r7, sp, #8
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	460b      	mov	r3, r1
 800b816:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b81e:	78fb      	ldrb	r3, [r7, #3]
 800b820:	b29b      	uxth	r3, r3
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	4613      	mov	r3, r2
 800b826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b82a:	2100      	movs	r1, #0
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 f864 	bl	800b8fa <USBH_GetDescriptor>
 800b832:	4603      	mov	r3, r0
 800b834:	73fb      	strb	r3, [r7, #15]
 800b836:	7bfb      	ldrb	r3, [r7, #15]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10a      	bne.n	800b852 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b848:	78fa      	ldrb	r2, [r7, #3]
 800b84a:	b292      	uxth	r2, r2
 800b84c:	4619      	mov	r1, r3
 800b84e:	f000 f918 	bl	800ba82 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b852:	7bfb      	ldrb	r3, [r7, #15]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af02      	add	r7, sp, #8
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	460b      	mov	r3, r1
 800b866:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	331c      	adds	r3, #28
 800b86c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b86e:	887b      	ldrh	r3, [r7, #2]
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b878:	2100      	movs	r1, #0
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f83d 	bl	800b8fa <USBH_GetDescriptor>
 800b880:	4603      	mov	r3, r0
 800b882:	72fb      	strb	r3, [r7, #11]
 800b884:	7afb      	ldrb	r3, [r7, #11]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d107      	bne.n	800b89a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b890:	887a      	ldrh	r2, [r7, #2]
 800b892:	68f9      	ldr	r1, [r7, #12]
 800b894:	4618      	mov	r0, r3
 800b896:	f000 f964 	bl	800bb62 <USBH_ParseCfgDesc>
  }

  return status;
 800b89a:	7afb      	ldrb	r3, [r7, #11]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b088      	sub	sp, #32
 800b8a8:	af02      	add	r7, sp, #8
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	607a      	str	r2, [r7, #4]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	72fb      	strb	r3, [r7, #11]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b8b8:	7afb      	ldrb	r3, [r7, #11]
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b8c0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b8c8:	893b      	ldrh	r3, [r7, #8]
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f000 f812 	bl	800b8fa <USBH_GetDescriptor>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	75fb      	strb	r3, [r7, #23]
 800b8da:	7dfb      	ldrb	r3, [r7, #23]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d107      	bne.n	800b8f0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b8e6:	893a      	ldrh	r2, [r7, #8]
 800b8e8:	6879      	ldr	r1, [r7, #4]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 fa37 	bl	800bd5e <USBH_ParseStringDesc>
  }

  return status;
 800b8f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3718      	adds	r7, #24
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	60f8      	str	r0, [r7, #12]
 800b902:	607b      	str	r3, [r7, #4]
 800b904:	460b      	mov	r3, r1
 800b906:	72fb      	strb	r3, [r7, #11]
 800b908:	4613      	mov	r3, r2
 800b90a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	789b      	ldrb	r3, [r3, #2]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d11c      	bne.n	800b94e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b914:	7afb      	ldrb	r3, [r7, #11]
 800b916:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2206      	movs	r2, #6
 800b924:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	893a      	ldrh	r2, [r7, #8]
 800b92a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b92c:	893b      	ldrh	r3, [r7, #8]
 800b92e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b936:	d104      	bne.n	800b942 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f240 4209 	movw	r2, #1033	; 0x409
 800b93e:	829a      	strh	r2, [r3, #20]
 800b940:	e002      	b.n	800b948 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2200      	movs	r2, #0
 800b946:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	8b3a      	ldrh	r2, [r7, #24]
 800b94c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b94e:	8b3b      	ldrh	r3, [r7, #24]
 800b950:	461a      	mov	r2, r3
 800b952:	6879      	ldr	r1, [r7, #4]
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 fa50 	bl	800bdfa <USBH_CtlReq>
 800b95a:	4603      	mov	r3, r0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	460b      	mov	r3, r1
 800b96e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	789b      	ldrb	r3, [r3, #2]
 800b974:	2b01      	cmp	r3, #1
 800b976:	d10f      	bne.n	800b998 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2205      	movs	r2, #5
 800b982:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b984:	78fb      	ldrb	r3, [r7, #3]
 800b986:	b29a      	uxth	r2, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b998:	2200      	movs	r2, #0
 800b99a:	2100      	movs	r1, #0
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fa2c 	bl	800bdfa <USBH_CtlReq>
 800b9a2:	4603      	mov	r3, r0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	789b      	ldrb	r3, [r3, #2]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d10e      	bne.n	800b9de <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2209      	movs	r2, #9
 800b9ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	887a      	ldrh	r2, [r7, #2]
 800b9d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b9de:	2200      	movs	r2, #0
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fa09 	bl	800bdfa <USBH_CtlReq>
 800b9e8:	4603      	mov	r3, r0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	789b      	ldrb	r3, [r3, #2]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d10f      	bne.n	800ba26 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2203      	movs	r2, #3
 800ba10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ba12:	78fb      	ldrb	r3, [r7, #3]
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ba26:	2200      	movs	r2, #0
 800ba28:	2100      	movs	r1, #0
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 f9e5 	bl	800bdfa <USBH_CtlReq>
 800ba30:	4603      	mov	r3, r0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	460b      	mov	r3, r1
 800ba44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	789b      	ldrb	r3, [r3, #2]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d10f      	bne.n	800ba6e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2202      	movs	r2, #2
 800ba52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ba60:	78fb      	ldrb	r3, [r7, #3]
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2100      	movs	r1, #0
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f9c1 	bl	800bdfa <USBH_CtlReq>
 800ba78:	4603      	mov	r3, r0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ba82:	b480      	push	{r7}
 800ba84:	b085      	sub	sp, #20
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	60f8      	str	r0, [r7, #12]
 800ba8a:	60b9      	str	r1, [r7, #8]
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	781a      	ldrb	r2, [r3, #0]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	785a      	ldrb	r2, [r3, #1]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	3302      	adds	r3, #2
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	3303      	adds	r3, #3
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	b29b      	uxth	r3, r3
 800bab0:	021b      	lsls	r3, r3, #8
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	4313      	orrs	r3, r2
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	791a      	ldrb	r2, [r3, #4]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	795a      	ldrb	r2, [r3, #5]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	799a      	ldrb	r2, [r3, #6]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	79da      	ldrb	r2, [r3, #7]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800badc:	88fb      	ldrh	r3, [r7, #6]
 800bade:	2b08      	cmp	r3, #8
 800bae0:	d939      	bls.n	800bb56 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	3308      	adds	r3, #8
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	b29a      	uxth	r2, r3
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	3309      	adds	r3, #9
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	021b      	lsls	r3, r3, #8
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	4313      	orrs	r3, r2
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	330a      	adds	r3, #10
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	330b      	adds	r3, #11
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	021b      	lsls	r3, r3, #8
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	4313      	orrs	r3, r2
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	330c      	adds	r3, #12
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	330d      	adds	r3, #13
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	021b      	lsls	r3, r3, #8
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	7b9a      	ldrb	r2, [r3, #14]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	7bda      	ldrb	r2, [r3, #15]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	7c1a      	ldrb	r2, [r3, #16]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	7c5a      	ldrb	r2, [r3, #17]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	745a      	strb	r2, [r3, #17]
  }
}
 800bb56:	bf00      	nop
 800bb58:	3714      	adds	r7, #20
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b08a      	sub	sp, #40	; 0x28
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	60f8      	str	r0, [r7, #12]
 800bb6a:	60b9      	str	r1, [r7, #8]
 800bb6c:	4613      	mov	r3, r2
 800bb6e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bb74:	2300      	movs	r3, #0
 800bb76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	781a      	ldrb	r2, [r3, #0]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	785a      	ldrb	r2, [r3, #1]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	3302      	adds	r3, #2
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	3303      	adds	r3, #3
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	021b      	lsls	r3, r3, #8
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	791a      	ldrb	r2, [r3, #4]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	795a      	ldrb	r2, [r3, #5]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	799a      	ldrb	r2, [r3, #6]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	79da      	ldrb	r2, [r3, #7]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	7a1a      	ldrb	r2, [r3, #8]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bbd8:	88fb      	ldrh	r3, [r7, #6]
 800bbda:	2b09      	cmp	r3, #9
 800bbdc:	d95f      	bls.n	800bc9e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bbde:	2309      	movs	r3, #9
 800bbe0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bbe6:	e051      	b.n	800bc8c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bbe8:	f107 0316 	add.w	r3, r7, #22
 800bbec:	4619      	mov	r1, r3
 800bbee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbf0:	f000 f8e8 	bl	800bdc4 <USBH_GetNextDesc>
 800bbf4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf8:	785b      	ldrb	r3, [r3, #1]
 800bbfa:	2b04      	cmp	r3, #4
 800bbfc:	d146      	bne.n	800bc8c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bbfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc02:	221a      	movs	r2, #26
 800bc04:	fb02 f303 	mul.w	r3, r2, r3
 800bc08:	3308      	adds	r3, #8
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	3302      	adds	r3, #2
 800bc10:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bc12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc14:	69f8      	ldr	r0, [r7, #28]
 800bc16:	f000 f846 	bl	800bca6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bc24:	e022      	b.n	800bc6c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bc26:	f107 0316 	add.w	r3, r7, #22
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc2e:	f000 f8c9 	bl	800bdc4 <USBH_GetNextDesc>
 800bc32:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800bc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc36:	785b      	ldrb	r3, [r3, #1]
 800bc38:	2b05      	cmp	r3, #5
 800bc3a:	d117      	bne.n	800bc6c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bc3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc40:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bc44:	3201      	adds	r2, #1
 800bc46:	00d2      	lsls	r2, r2, #3
 800bc48:	211a      	movs	r1, #26
 800bc4a:	fb01 f303 	mul.w	r3, r1, r3
 800bc4e:	4413      	add	r3, r2
 800bc50:	3308      	adds	r3, #8
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	4413      	add	r3, r2
 800bc56:	3304      	adds	r3, #4
 800bc58:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bc5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc5c:	69b8      	ldr	r0, [r7, #24]
 800bc5e:	f000 f851 	bl	800bd04 <USBH_ParseEPDesc>
            ep_ix++;
 800bc62:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bc66:	3301      	adds	r3, #1
 800bc68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	791b      	ldrb	r3, [r3, #4]
 800bc70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d204      	bcs.n	800bc82 <USBH_ParseCfgDesc+0x120>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	885a      	ldrh	r2, [r3, #2]
 800bc7c:	8afb      	ldrh	r3, [r7, #22]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d8d1      	bhi.n	800bc26 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800bc82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc86:	3301      	adds	r3, #1
 800bc88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bc8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d804      	bhi.n	800bc9e <USBH_ParseCfgDesc+0x13c>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	885a      	ldrh	r2, [r3, #2]
 800bc98:	8afb      	ldrh	r3, [r7, #22]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d8a4      	bhi.n	800bbe8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800bc9e:	bf00      	nop
 800bca0:	3728      	adds	r7, #40	; 0x28
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b083      	sub	sp, #12
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	781a      	ldrb	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	785a      	ldrb	r2, [r3, #1]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	789a      	ldrb	r2, [r3, #2]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	78da      	ldrb	r2, [r3, #3]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	791a      	ldrb	r2, [r3, #4]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	795a      	ldrb	r2, [r3, #5]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	799a      	ldrb	r2, [r3, #6]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	79da      	ldrb	r2, [r3, #7]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	7a1a      	ldrb	r2, [r3, #8]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	721a      	strb	r2, [r3, #8]
}
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	781a      	ldrb	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	785a      	ldrb	r2, [r3, #1]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	789a      	ldrb	r2, [r3, #2]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	78da      	ldrb	r2, [r3, #3]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	3304      	adds	r3, #4
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	3305      	adds	r3, #5
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	021b      	lsls	r3, r3, #8
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	4313      	orrs	r3, r2
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	799a      	ldrb	r2, [r3, #6]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	719a      	strb	r2, [r3, #6]
}
 800bd52:	bf00      	nop
 800bd54:	370c      	adds	r7, #12
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b087      	sub	sp, #28
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	60f8      	str	r0, [r7, #12]
 800bd66:	60b9      	str	r1, [r7, #8]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	2b03      	cmp	r3, #3
 800bd74:	d120      	bne.n	800bdb8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	1e9a      	subs	r2, r3, #2
 800bd7c:	88fb      	ldrh	r3, [r7, #6]
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	bf28      	it	cs
 800bd82:	4613      	movcs	r3, r2
 800bd84:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	3302      	adds	r3, #2
 800bd8a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	82fb      	strh	r3, [r7, #22]
 800bd90:	e00b      	b.n	800bdaa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bd92:	8afb      	ldrh	r3, [r7, #22]
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	4413      	add	r3, r2
 800bd98:	781a      	ldrb	r2, [r3, #0]
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	3301      	adds	r3, #1
 800bda2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bda4:	8afb      	ldrh	r3, [r7, #22]
 800bda6:	3302      	adds	r3, #2
 800bda8:	82fb      	strh	r3, [r7, #22]
 800bdaa:	8afa      	ldrh	r2, [r7, #22]
 800bdac:	8abb      	ldrh	r3, [r7, #20]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d3ef      	bcc.n	800bd92 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	701a      	strb	r2, [r3, #0]
  }
}
 800bdb8:	bf00      	nop
 800bdba:	371c      	adds	r7, #28
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	881a      	ldrh	r2, [r3, #0]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	4413      	add	r3, r2
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4413      	add	r3, r2
 800bdea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bdec:	68fb      	ldr	r3, [r7, #12]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3714      	adds	r7, #20
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b086      	sub	sp, #24
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	60f8      	str	r0, [r7, #12]
 800be02:	60b9      	str	r1, [r7, #8]
 800be04:	4613      	mov	r3, r2
 800be06:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800be08:	2301      	movs	r3, #1
 800be0a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	789b      	ldrb	r3, [r3, #2]
 800be10:	2b01      	cmp	r3, #1
 800be12:	d002      	beq.n	800be1a <USBH_CtlReq+0x20>
 800be14:	2b02      	cmp	r3, #2
 800be16:	d00f      	beq.n	800be38 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800be18:	e027      	b.n	800be6a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	68ba      	ldr	r2, [r7, #8]
 800be1e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	88fa      	ldrh	r2, [r7, #6]
 800be24:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2201      	movs	r2, #1
 800be2a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2202      	movs	r2, #2
 800be30:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800be32:	2301      	movs	r3, #1
 800be34:	75fb      	strb	r3, [r7, #23]
      break;
 800be36:	e018      	b.n	800be6a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f000 f81b 	bl	800be74 <USBH_HandleControl>
 800be3e:	4603      	mov	r3, r0
 800be40:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800be42:	7dfb      	ldrb	r3, [r7, #23]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <USBH_CtlReq+0x54>
 800be48:	7dfb      	ldrb	r3, [r7, #23]
 800be4a:	2b03      	cmp	r3, #3
 800be4c:	d106      	bne.n	800be5c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2201      	movs	r2, #1
 800be52:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2200      	movs	r2, #0
 800be58:	761a      	strb	r2, [r3, #24]
      break;
 800be5a:	e005      	b.n	800be68 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800be5c:	7dfb      	ldrb	r3, [r7, #23]
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d102      	bne.n	800be68 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2201      	movs	r2, #1
 800be66:	709a      	strb	r2, [r3, #2]
      break;
 800be68:	bf00      	nop
  }
  return status;
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3718      	adds	r7, #24
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af02      	add	r7, sp, #8
 800be7a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800be7c:	2301      	movs	r3, #1
 800be7e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800be80:	2300      	movs	r3, #0
 800be82:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	7e1b      	ldrb	r3, [r3, #24]
 800be88:	3b01      	subs	r3, #1
 800be8a:	2b0a      	cmp	r3, #10
 800be8c:	f200 8156 	bhi.w	800c13c <USBH_HandleControl+0x2c8>
 800be90:	a201      	add	r2, pc, #4	; (adr r2, 800be98 <USBH_HandleControl+0x24>)
 800be92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be96:	bf00      	nop
 800be98:	0800bec5 	.word	0x0800bec5
 800be9c:	0800bedf 	.word	0x0800bedf
 800bea0:	0800bf49 	.word	0x0800bf49
 800bea4:	0800bf6f 	.word	0x0800bf6f
 800bea8:	0800bfa7 	.word	0x0800bfa7
 800beac:	0800bfd1 	.word	0x0800bfd1
 800beb0:	0800c023 	.word	0x0800c023
 800beb4:	0800c045 	.word	0x0800c045
 800beb8:	0800c081 	.word	0x0800c081
 800bebc:	0800c0a7 	.word	0x0800c0a7
 800bec0:	0800c0e5 	.word	0x0800c0e5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f103 0110 	add.w	r1, r3, #16
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	795b      	ldrb	r3, [r3, #5]
 800bece:	461a      	mov	r2, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 f943 	bl	800c15c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2202      	movs	r2, #2
 800beda:	761a      	strb	r2, [r3, #24]
      break;
 800bedc:	e139      	b.n	800c152 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	795b      	ldrb	r3, [r3, #5]
 800bee2:	4619      	mov	r1, r3
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fd99 	bl	800ca1c <USBH_LL_GetURBState>
 800beea:	4603      	mov	r3, r0
 800beec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800beee:	7bbb      	ldrb	r3, [r7, #14]
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d11e      	bne.n	800bf32 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	7c1b      	ldrb	r3, [r3, #16]
 800bef8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800befc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	8adb      	ldrh	r3, [r3, #22]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00a      	beq.n	800bf1c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bf06:	7b7b      	ldrb	r3, [r7, #13]
 800bf08:	2b80      	cmp	r3, #128	; 0x80
 800bf0a:	d103      	bne.n	800bf14 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2203      	movs	r2, #3
 800bf10:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bf12:	e115      	b.n	800c140 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2205      	movs	r2, #5
 800bf18:	761a      	strb	r2, [r3, #24]
      break;
 800bf1a:	e111      	b.n	800c140 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bf1c:	7b7b      	ldrb	r3, [r7, #13]
 800bf1e:	2b80      	cmp	r3, #128	; 0x80
 800bf20:	d103      	bne.n	800bf2a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2209      	movs	r2, #9
 800bf26:	761a      	strb	r2, [r3, #24]
      break;
 800bf28:	e10a      	b.n	800c140 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2207      	movs	r2, #7
 800bf2e:	761a      	strb	r2, [r3, #24]
      break;
 800bf30:	e106      	b.n	800c140 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
 800bf34:	2b04      	cmp	r3, #4
 800bf36:	d003      	beq.n	800bf40 <USBH_HandleControl+0xcc>
 800bf38:	7bbb      	ldrb	r3, [r7, #14]
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	f040 8100 	bne.w	800c140 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	220b      	movs	r2, #11
 800bf44:	761a      	strb	r2, [r3, #24]
      break;
 800bf46:	e0fb      	b.n	800c140 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6899      	ldr	r1, [r3, #8]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	899a      	ldrh	r2, [r3, #12]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	791b      	ldrb	r3, [r3, #4]
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 f93a 	bl	800c1da <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2204      	movs	r2, #4
 800bf6a:	761a      	strb	r2, [r3, #24]
      break;
 800bf6c:	e0f1      	b.n	800c152 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	791b      	ldrb	r3, [r3, #4]
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fd51 	bl	800ca1c <USBH_LL_GetURBState>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bf7e:	7bbb      	ldrb	r3, [r7, #14]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d102      	bne.n	800bf8a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2209      	movs	r2, #9
 800bf88:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bf8a:	7bbb      	ldrb	r3, [r7, #14]
 800bf8c:	2b05      	cmp	r3, #5
 800bf8e:	d102      	bne.n	800bf96 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bf90:	2303      	movs	r3, #3
 800bf92:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bf94:	e0d6      	b.n	800c144 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bf96:	7bbb      	ldrb	r3, [r7, #14]
 800bf98:	2b04      	cmp	r3, #4
 800bf9a:	f040 80d3 	bne.w	800c144 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	220b      	movs	r2, #11
 800bfa2:	761a      	strb	r2, [r3, #24]
      break;
 800bfa4:	e0ce      	b.n	800c144 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6899      	ldr	r1, [r3, #8]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	899a      	ldrh	r2, [r3, #12]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	795b      	ldrb	r3, [r3, #5]
 800bfb2:	2001      	movs	r0, #1
 800bfb4:	9000      	str	r0, [sp, #0]
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f8ea 	bl	800c190 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2206      	movs	r2, #6
 800bfcc:	761a      	strb	r2, [r3, #24]
      break;
 800bfce:	e0c0      	b.n	800c152 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	795b      	ldrb	r3, [r3, #5]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fd20 	bl	800ca1c <USBH_LL_GetURBState>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bfe0:	7bbb      	ldrb	r3, [r7, #14]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d103      	bne.n	800bfee <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2207      	movs	r2, #7
 800bfea:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bfec:	e0ac      	b.n	800c148 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bfee:	7bbb      	ldrb	r3, [r7, #14]
 800bff0:	2b05      	cmp	r3, #5
 800bff2:	d105      	bne.n	800c000 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	220c      	movs	r2, #12
 800bff8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bffa:	2303      	movs	r3, #3
 800bffc:	73fb      	strb	r3, [r7, #15]
      break;
 800bffe:	e0a3      	b.n	800c148 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c000:	7bbb      	ldrb	r3, [r7, #14]
 800c002:	2b02      	cmp	r3, #2
 800c004:	d103      	bne.n	800c00e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2205      	movs	r2, #5
 800c00a:	761a      	strb	r2, [r3, #24]
      break;
 800c00c:	e09c      	b.n	800c148 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c00e:	7bbb      	ldrb	r3, [r7, #14]
 800c010:	2b04      	cmp	r3, #4
 800c012:	f040 8099 	bne.w	800c148 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	220b      	movs	r2, #11
 800c01a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c01c:	2302      	movs	r3, #2
 800c01e:	73fb      	strb	r3, [r7, #15]
      break;
 800c020:	e092      	b.n	800c148 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	791b      	ldrb	r3, [r3, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	2100      	movs	r1, #0
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 f8d5 	bl	800c1da <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c036:	b29a      	uxth	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2208      	movs	r2, #8
 800c040:	761a      	strb	r2, [r3, #24]

      break;
 800c042:	e086      	b.n	800c152 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	791b      	ldrb	r3, [r3, #4]
 800c048:	4619      	mov	r1, r3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fce6 	bl	800ca1c <USBH_LL_GetURBState>
 800c050:	4603      	mov	r3, r0
 800c052:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c054:	7bbb      	ldrb	r3, [r7, #14]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d105      	bne.n	800c066 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	220d      	movs	r2, #13
 800c05e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c060:	2300      	movs	r3, #0
 800c062:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c064:	e072      	b.n	800c14c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c066:	7bbb      	ldrb	r3, [r7, #14]
 800c068:	2b04      	cmp	r3, #4
 800c06a:	d103      	bne.n	800c074 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	220b      	movs	r2, #11
 800c070:	761a      	strb	r2, [r3, #24]
      break;
 800c072:	e06b      	b.n	800c14c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	2b05      	cmp	r3, #5
 800c078:	d168      	bne.n	800c14c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c07a:	2303      	movs	r3, #3
 800c07c:	73fb      	strb	r3, [r7, #15]
      break;
 800c07e:	e065      	b.n	800c14c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	795b      	ldrb	r3, [r3, #5]
 800c084:	2201      	movs	r2, #1
 800c086:	9200      	str	r2, [sp, #0]
 800c088:	2200      	movs	r2, #0
 800c08a:	2100      	movs	r1, #0
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f87f 	bl	800c190 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c098:	b29a      	uxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	220a      	movs	r2, #10
 800c0a2:	761a      	strb	r2, [r3, #24]
      break;
 800c0a4:	e055      	b.n	800c152 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	795b      	ldrb	r3, [r3, #5]
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fcb5 	bl	800ca1c <USBH_LL_GetURBState>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d105      	bne.n	800c0c8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	220d      	movs	r2, #13
 800c0c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c0c6:	e043      	b.n	800c150 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d103      	bne.n	800c0d6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2209      	movs	r2, #9
 800c0d2:	761a      	strb	r2, [r3, #24]
      break;
 800c0d4:	e03c      	b.n	800c150 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c0d6:	7bbb      	ldrb	r3, [r7, #14]
 800c0d8:	2b04      	cmp	r3, #4
 800c0da:	d139      	bne.n	800c150 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	220b      	movs	r2, #11
 800c0e0:	761a      	strb	r2, [r3, #24]
      break;
 800c0e2:	e035      	b.n	800c150 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	7e5b      	ldrb	r3, [r3, #25]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	765a      	strb	r2, [r3, #25]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	7e5b      	ldrb	r3, [r3, #25]
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d806      	bhi.n	800c106 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2201      	movs	r2, #1
 800c102:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c104:	e025      	b.n	800c152 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c10c:	2106      	movs	r1, #6
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	795b      	ldrb	r3, [r3, #5]
 800c11c:	4619      	mov	r1, r3
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 f90c 	bl	800c33c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	791b      	ldrb	r3, [r3, #4]
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f906 	bl	800c33c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c136:	2302      	movs	r3, #2
 800c138:	73fb      	strb	r3, [r7, #15]
      break;
 800c13a:	e00a      	b.n	800c152 <USBH_HandleControl+0x2de>

    default:
      break;
 800c13c:	bf00      	nop
 800c13e:	e008      	b.n	800c152 <USBH_HandleControl+0x2de>
      break;
 800c140:	bf00      	nop
 800c142:	e006      	b.n	800c152 <USBH_HandleControl+0x2de>
      break;
 800c144:	bf00      	nop
 800c146:	e004      	b.n	800c152 <USBH_HandleControl+0x2de>
      break;
 800c148:	bf00      	nop
 800c14a:	e002      	b.n	800c152 <USBH_HandleControl+0x2de>
      break;
 800c14c:	bf00      	nop
 800c14e:	e000      	b.n	800c152 <USBH_HandleControl+0x2de>
      break;
 800c150:	bf00      	nop
  }

  return status;
 800c152:	7bfb      	ldrb	r3, [r7, #15]
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b088      	sub	sp, #32
 800c160:	af04      	add	r7, sp, #16
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	4613      	mov	r3, r2
 800c168:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c16a:	79f9      	ldrb	r1, [r7, #7]
 800c16c:	2300      	movs	r3, #0
 800c16e:	9303      	str	r3, [sp, #12]
 800c170:	2308      	movs	r3, #8
 800c172:	9302      	str	r3, [sp, #8]
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	2300      	movs	r3, #0
 800c17a:	9300      	str	r3, [sp, #0]
 800c17c:	2300      	movs	r3, #0
 800c17e:	2200      	movs	r2, #0
 800c180:	68f8      	ldr	r0, [r7, #12]
 800c182:	f000 fc1a 	bl	800c9ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b088      	sub	sp, #32
 800c194:	af04      	add	r7, sp, #16
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	4611      	mov	r1, r2
 800c19c:	461a      	mov	r2, r3
 800c19e:	460b      	mov	r3, r1
 800c1a0:	80fb      	strh	r3, [r7, #6]
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d001      	beq.n	800c1b4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c1b4:	7979      	ldrb	r1, [r7, #5]
 800c1b6:	7e3b      	ldrb	r3, [r7, #24]
 800c1b8:	9303      	str	r3, [sp, #12]
 800c1ba:	88fb      	ldrh	r3, [r7, #6]
 800c1bc:	9302      	str	r3, [sp, #8]
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	9301      	str	r3, [sp, #4]
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	9300      	str	r3, [sp, #0]
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	68f8      	ldr	r0, [r7, #12]
 800c1cc:	f000 fbf5 	bl	800c9ba <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b088      	sub	sp, #32
 800c1de:	af04      	add	r7, sp, #16
 800c1e0:	60f8      	str	r0, [r7, #12]
 800c1e2:	60b9      	str	r1, [r7, #8]
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	80fb      	strh	r3, [r7, #6]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c1f0:	7979      	ldrb	r1, [r7, #5]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	9303      	str	r3, [sp, #12]
 800c1f6:	88fb      	ldrh	r3, [r7, #6]
 800c1f8:	9302      	str	r3, [sp, #8]
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	9301      	str	r3, [sp, #4]
 800c1fe:	2301      	movs	r3, #1
 800c200:	9300      	str	r3, [sp, #0]
 800c202:	2300      	movs	r3, #0
 800c204:	2201      	movs	r2, #1
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f000 fbd7 	bl	800c9ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c20c:	2300      	movs	r3, #0

}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b088      	sub	sp, #32
 800c21a:	af04      	add	r7, sp, #16
 800c21c:	60f8      	str	r0, [r7, #12]
 800c21e:	60b9      	str	r1, [r7, #8]
 800c220:	4611      	mov	r1, r2
 800c222:	461a      	mov	r2, r3
 800c224:	460b      	mov	r3, r1
 800c226:	80fb      	strh	r3, [r7, #6]
 800c228:	4613      	mov	r3, r2
 800c22a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c232:	2b00      	cmp	r3, #0
 800c234:	d001      	beq.n	800c23a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c236:	2300      	movs	r3, #0
 800c238:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c23a:	7979      	ldrb	r1, [r7, #5]
 800c23c:	7e3b      	ldrb	r3, [r7, #24]
 800c23e:	9303      	str	r3, [sp, #12]
 800c240:	88fb      	ldrh	r3, [r7, #6]
 800c242:	9302      	str	r3, [sp, #8]
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	9301      	str	r3, [sp, #4]
 800c248:	2301      	movs	r3, #1
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	2302      	movs	r3, #2
 800c24e:	2200      	movs	r2, #0
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f000 fbb2 	bl	800c9ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b088      	sub	sp, #32
 800c264:	af04      	add	r7, sp, #16
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	4611      	mov	r1, r2
 800c26c:	461a      	mov	r2, r3
 800c26e:	460b      	mov	r3, r1
 800c270:	80fb      	strh	r3, [r7, #6]
 800c272:	4613      	mov	r3, r2
 800c274:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c276:	7979      	ldrb	r1, [r7, #5]
 800c278:	2300      	movs	r3, #0
 800c27a:	9303      	str	r3, [sp, #12]
 800c27c:	88fb      	ldrh	r3, [r7, #6]
 800c27e:	9302      	str	r3, [sp, #8]
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	9301      	str	r3, [sp, #4]
 800c284:	2301      	movs	r3, #1
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	2302      	movs	r3, #2
 800c28a:	2201      	movs	r2, #1
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f000 fb94 	bl	800c9ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b086      	sub	sp, #24
 800c2a0:	af04      	add	r7, sp, #16
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	4608      	mov	r0, r1
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	70fb      	strb	r3, [r7, #3]
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	70bb      	strb	r3, [r7, #2]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c2b6:	7878      	ldrb	r0, [r7, #1]
 800c2b8:	78ba      	ldrb	r2, [r7, #2]
 800c2ba:	78f9      	ldrb	r1, [r7, #3]
 800c2bc:	8b3b      	ldrh	r3, [r7, #24]
 800c2be:	9302      	str	r3, [sp, #8]
 800c2c0:	7d3b      	ldrb	r3, [r7, #20]
 800c2c2:	9301      	str	r3, [sp, #4]
 800c2c4:	7c3b      	ldrb	r3, [r7, #16]
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 fb27 	bl	800c91e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b082      	sub	sp, #8
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c2e6:	78fb      	ldrb	r3, [r7, #3]
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 fb46 	bl	800c97c <USBH_LL_ClosePipe>

  return USBH_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b084      	sub	sp, #16
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
 800c302:	460b      	mov	r3, r1
 800c304:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f836 	bl	800c378 <USBH_GetFreePipe>
 800c30c:	4603      	mov	r3, r0
 800c30e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c310:	89fb      	ldrh	r3, [r7, #14]
 800c312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c316:	4293      	cmp	r3, r2
 800c318:	d00a      	beq.n	800c330 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c31a:	78fa      	ldrb	r2, [r7, #3]
 800c31c:	89fb      	ldrh	r3, [r7, #14]
 800c31e:	f003 030f 	and.w	r3, r3, #15
 800c322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c326:	6879      	ldr	r1, [r7, #4]
 800c328:	33e0      	adds	r3, #224	; 0xe0
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	440b      	add	r3, r1
 800c32e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c330:	89fb      	ldrh	r3, [r7, #14]
 800c332:	b2db      	uxtb	r3, r3
}
 800c334:	4618      	mov	r0, r3
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	460b      	mov	r3, r1
 800c346:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c348:	78fb      	ldrb	r3, [r7, #3]
 800c34a:	2b0a      	cmp	r3, #10
 800c34c:	d80d      	bhi.n	800c36a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c34e:	78fb      	ldrb	r3, [r7, #3]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	33e0      	adds	r3, #224	; 0xe0
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	78fb      	ldrb	r3, [r7, #3]
 800c35c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c360:	6879      	ldr	r1, [r7, #4]
 800c362:	33e0      	adds	r3, #224	; 0xe0
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	440b      	add	r3, r1
 800c368:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c36a:	2300      	movs	r3, #0
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c380:	2300      	movs	r3, #0
 800c382:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c384:	2300      	movs	r3, #0
 800c386:	73fb      	strb	r3, [r7, #15]
 800c388:	e00f      	b.n	800c3aa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	33e0      	adds	r3, #224	; 0xe0
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	4413      	add	r3, r2
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d102      	bne.n	800c3a4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c39e:	7bfb      	ldrb	r3, [r7, #15]
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	e007      	b.n	800c3b4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c3a4:	7bfb      	ldrb	r3, [r7, #15]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	73fb      	strb	r3, [r7, #15]
 800c3aa:	7bfb      	ldrb	r3, [r7, #15]
 800c3ac:	2b0a      	cmp	r3, #10
 800c3ae:	d9ec      	bls.n	800c38a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c3b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3714      	adds	r7, #20
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <USBH_CDC_TransmitCallback>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  	if(phost == &hUsbHostFS)
  	{

  	}
}
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <USBH_CDC_ReceiveCallback>:

void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  	if(phost == &hUsbHostFS)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a0f      	ldr	r2, [pc, #60]	; (800c41c <USBH_CDC_ReceiveCallback+0x48>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d117      	bne.n	800c414 <USBH_CDC_ReceiveCallback+0x40>
  	{
  		// Handles the data received from the USB CDC host, here just printing it out to UART
  		rx_size = USBH_CDC_GetLastReceivedDataSize(phost);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7fe fb3e 	bl	800aa66 <USBH_CDC_GetLastReceivedDataSize>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	4b0c      	ldr	r3, [pc, #48]	; (800c420 <USBH_CDC_ReceiveCallback+0x4c>)
 800c3f0:	601a      	str	r2, [r3, #0]

  		// Uncomment to print out the dongle output to UART
//		HAL_UART_Transmit(&huart3, CDC_RX_Buffer, rx_size, HAL_MAX_DELAY);

		// Copy buffer to external dongle_response buffer if we want to handle any responses
		strcpy((char *)dongle_response, (char *)CDC_RX_Buffer);
 800c3f2:	490c      	ldr	r1, [pc, #48]	; (800c424 <USBH_CDC_ReceiveCallback+0x50>)
 800c3f4:	480c      	ldr	r0, [pc, #48]	; (800c428 <USBH_CDC_ReceiveCallback+0x54>)
 800c3f6:	f000 fcdb 	bl	800cdb0 <strcpy>

		memset(CDC_RX_Buffer,0,RX_BUFF_SIZE);
 800c3fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c3fe:	2100      	movs	r1, #0
 800c400:	4808      	ldr	r0, [pc, #32]	; (800c424 <USBH_CDC_ReceiveCallback+0x50>)
 800c402:	f000 fbf3 	bl	800cbec <memset>
		USBH_CDC_Receive(phost, CDC_RX_Buffer, RX_BUFF_SIZE);
 800c406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c40a:	4906      	ldr	r1, [pc, #24]	; (800c424 <USBH_CDC_ReceiveCallback+0x50>)
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f7fe fb76 	bl	800aafe <USBH_CDC_Receive>
  	}

  	return;
 800c412:	bf00      	nop
 800c414:	bf00      	nop
}
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	2400053c 	.word	0x2400053c
 800c420:	24000280 	.word	0x24000280
 800c424:	24000914 	.word	0x24000914
 800c428:	24000290 	.word	0x24000290

0800c42c <writeToDongle>:
/**
  * @brief Simple function that takes a string and transmit it to the dongle
  * @retval None
  */
void writeToDongle(uint8_t * cmd)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
	USBH_CDC_Transmit(&hUsbHostFS, cmd, strlen((char *)cmd));
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f7f3 ff53 	bl	80002e0 <strlen>
 800c43a:	4603      	mov	r3, r0
 800c43c:	461a      	mov	r2, r3
 800c43e:	6879      	ldr	r1, [r7, #4]
 800c440:	4803      	ldr	r0, [pc, #12]	; (800c450 <writeToDongle+0x24>)
 800c442:	f7fe fb2e 	bl	800aaa2 <USBH_CDC_Transmit>
}
 800c446:	bf00      	nop
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	2400053c 	.word	0x2400053c

0800c454 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c458:	2201      	movs	r2, #1
 800c45a:	490e      	ldr	r1, [pc, #56]	; (800c494 <MX_USB_HOST_Init+0x40>)
 800c45c:	480e      	ldr	r0, [pc, #56]	; (800c498 <MX_USB_HOST_Init+0x44>)
 800c45e:	f7fe fc57 	bl	800ad10 <USBH_Init>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d001      	beq.n	800c46c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c468:	f7f4 fd10 	bl	8000e8c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c46c:	490b      	ldr	r1, [pc, #44]	; (800c49c <MX_USB_HOST_Init+0x48>)
 800c46e:	480a      	ldr	r0, [pc, #40]	; (800c498 <MX_USB_HOST_Init+0x44>)
 800c470:	f7fe fcdc 	bl	800ae2c <USBH_RegisterClass>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d001      	beq.n	800c47e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c47a:	f7f4 fd07 	bl	8000e8c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c47e:	4806      	ldr	r0, [pc, #24]	; (800c498 <MX_USB_HOST_Init+0x44>)
 800c480:	f7fe fd60 	bl	800af44 <USBH_Start>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d001      	beq.n	800c48e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c48a:	f7f4 fcff 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c48e:	bf00      	nop
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	0800c4b5 	.word	0x0800c4b5
 800c498:	2400053c 	.word	0x2400053c
 800c49c:	24000010 	.word	0x24000010

0800c4a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c4a4:	4802      	ldr	r0, [pc, #8]	; (800c4b0 <MX_USB_HOST_Process+0x10>)
 800c4a6:	f7fe fd5d 	bl	800af64 <USBH_Process>
}
 800c4aa:	bf00      	nop
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	2400053c 	.word	0x2400053c

0800c4b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	460b      	mov	r3, r1
 800c4be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c4c0:	78fb      	ldrb	r3, [r7, #3]
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	2b04      	cmp	r3, #4
 800c4c6:	d866      	bhi.n	800c596 <USBH_UserProcess+0xe2>
 800c4c8:	a201      	add	r2, pc, #4	; (adr r2, 800c4d0 <USBH_UserProcess+0x1c>)
 800c4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ce:	bf00      	nop
 800c4d0:	0800c597 	.word	0x0800c597
 800c4d4:	0800c513 	.word	0x0800c513
 800c4d8:	0800c597 	.word	0x0800c597
 800c4dc:	0800c569 	.word	0x0800c569
 800c4e0:	0800c4e5 	.word	0x0800c4e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c4e4:	4b2f      	ldr	r3, [pc, #188]	; (800c5a4 <USBH_UserProcess+0xf0>)
 800c4e6:	2203      	movs	r2, #3
 800c4e8:	701a      	strb	r2, [r3, #0]
  isBleuIOReady = false;
 800c4ea:	4b2f      	ldr	r3, [pc, #188]	; (800c5a8 <USBH_UserProcess+0xf4>)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	701a      	strb	r2, [r3, #0]

  // Turn on Red LED, turn off Green and Yellow LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	2101      	movs	r1, #1
 800c4f4:	482d      	ldr	r0, [pc, #180]	; (800c5ac <USBH_UserProcess+0xf8>)
 800c4f6:	f7f6 fcab 	bl	8002e50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	2102      	movs	r1, #2
 800c4fe:	482c      	ldr	r0, [pc, #176]	; (800c5b0 <USBH_UserProcess+0xfc>)
 800c500:	f7f6 fca6 	bl	8002e50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800c504:	2201      	movs	r2, #1
 800c506:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c50a:	4828      	ldr	r0, [pc, #160]	; (800c5ac <USBH_UserProcess+0xf8>)
 800c50c:	f7f6 fca0 	bl	8002e50 <HAL_GPIO_WritePin>
  break;
 800c510:	e044      	b.n	800c59c <USBH_UserProcess+0xe8>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c512:	4b24      	ldr	r3, [pc, #144]	; (800c5a4 <USBH_UserProcess+0xf0>)
 800c514:	2202      	movs	r2, #2
 800c516:	701a      	strb	r2, [r3, #0]
  // Check if BleuIO firmware is running
  // (idProduct:0x6001 = bootloader, idProduct:0x6002 = bleuio fw)
  if(phost->device.DevDesc.idProduct == 0x6002)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800c51e:	f246 0202 	movw	r2, #24578	; 0x6002
 800c522:	4293      	cmp	r3, r2
 800c524:	d139      	bne.n	800c59a <USBH_UserProcess+0xe6>
  {
	  isBleuIOReady = true;
 800c526:	4b20      	ldr	r3, [pc, #128]	; (800c5a8 <USBH_UserProcess+0xf4>)
 800c528:	2201      	movs	r2, #1
 800c52a:	701a      	strb	r2, [r3, #0]
	  // Sends message to uart that BleuIO is connected and ready
	  HAL_UART_Transmit(&huart3, (uint8_t*)BLEUIO_READY, strlen(BLEUIO_READY), HAL_MAX_DELAY);
 800c52c:	f04f 33ff 	mov.w	r3, #4294967295
 800c530:	2219      	movs	r2, #25
 800c532:	4920      	ldr	r1, [pc, #128]	; (800c5b4 <USBH_UserProcess+0x100>)
 800c534:	4820      	ldr	r0, [pc, #128]	; (800c5b8 <USBH_UserProcess+0x104>)
 800c536:	f7fb f89d 	bl	8007674 <HAL_UART_Transmit>

	  // Turn on Green LED, turn off Yellow and Red LED
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800c53a:	2201      	movs	r2, #1
 800c53c:	2101      	movs	r1, #1
 800c53e:	481b      	ldr	r0, [pc, #108]	; (800c5ac <USBH_UserProcess+0xf8>)
 800c540:	f7f6 fc86 	bl	8002e50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800c544:	2200      	movs	r2, #0
 800c546:	2102      	movs	r1, #2
 800c548:	4819      	ldr	r0, [pc, #100]	; (800c5b0 <USBH_UserProcess+0xfc>)
 800c54a:	f7f6 fc81 	bl	8002e50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800c54e:	2200      	movs	r2, #0
 800c550:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c554:	4815      	ldr	r0, [pc, #84]	; (800c5ac <USBH_UserProcess+0xf8>)
 800c556:	f7f6 fc7b 	bl	8002e50 <HAL_GPIO_WritePin>

	  // Start receiving from usb
	  USBH_CDC_Receive(&hUsbHostFS, CDC_RX_Buffer, RX_BUFF_SIZE);
 800c55a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c55e:	4917      	ldr	r1, [pc, #92]	; (800c5bc <USBH_UserProcess+0x108>)
 800c560:	4817      	ldr	r0, [pc, #92]	; (800c5c0 <USBH_UserProcess+0x10c>)
 800c562:	f7fe facc 	bl	800aafe <USBH_CDC_Receive>
  }
  break;
 800c566:	e018      	b.n	800c59a <USBH_UserProcess+0xe6>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c568:	4b0e      	ldr	r3, [pc, #56]	; (800c5a4 <USBH_UserProcess+0xf0>)
 800c56a:	2201      	movs	r2, #1
 800c56c:	701a      	strb	r2, [r3, #0]
  isBleuIOReady = false;
 800c56e:	4b0e      	ldr	r3, [pc, #56]	; (800c5a8 <USBH_UserProcess+0xf4>)
 800c570:	2200      	movs	r2, #0
 800c572:	701a      	strb	r2, [r3, #0]
  // Turn on Yellow LED, turn off Green and Red LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800c574:	2200      	movs	r2, #0
 800c576:	2101      	movs	r1, #1
 800c578:	480c      	ldr	r0, [pc, #48]	; (800c5ac <USBH_UserProcess+0xf8>)
 800c57a:	f7f6 fc69 	bl	8002e50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800c57e:	2201      	movs	r2, #1
 800c580:	2102      	movs	r1, #2
 800c582:	480b      	ldr	r0, [pc, #44]	; (800c5b0 <USBH_UserProcess+0xfc>)
 800c584:	f7f6 fc64 	bl	8002e50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800c588:	2200      	movs	r2, #0
 800c58a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c58e:	4807      	ldr	r0, [pc, #28]	; (800c5ac <USBH_UserProcess+0xf8>)
 800c590:	f7f6 fc5e 	bl	8002e50 <HAL_GPIO_WritePin>
  break;
 800c594:	e002      	b.n	800c59c <USBH_UserProcess+0xe8>

  default:
  break;
 800c596:	bf00      	nop
 800c598:	e000      	b.n	800c59c <USBH_UserProcess+0xe8>
  break;
 800c59a:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c59c:	bf00      	nop
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	24000284 	.word	0x24000284
 800c5a8:	24000420 	.word	0x24000420
 800c5ac:	58020400 	.word	0x58020400
 800c5b0:	58021000 	.word	0x58021000
 800c5b4:	0800d618 	.word	0x0800d618
 800c5b8:	24000388 	.word	0x24000388
 800c5bc:	24000914 	.word	0x24000914
 800c5c0:	2400053c 	.word	0x2400053c

0800c5c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b0b8      	sub	sp, #224	; 0xe0
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	601a      	str	r2, [r3, #0]
 800c5d4:	605a      	str	r2, [r3, #4]
 800c5d6:	609a      	str	r2, [r3, #8]
 800c5d8:	60da      	str	r2, [r3, #12]
 800c5da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c5dc:	f107 0310 	add.w	r3, r7, #16
 800c5e0:	22bc      	movs	r2, #188	; 0xbc
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f000 fb01 	bl	800cbec <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a3b      	ldr	r2, [pc, #236]	; (800c6dc <HAL_HCD_MspInit+0x118>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d16e      	bne.n	800c6d2 <HAL_HCD_MspInit+0x10e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c5f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c5f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800c5fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c5fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c602:	f107 0310 	add.w	r3, r7, #16
 800c606:	4618      	mov	r0, r3
 800c608:	f7f9 f9ba 	bl	8005980 <HAL_RCCEx_PeriphCLKConfig>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 800c612:	f7f4 fc3b 	bl	8000e8c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800c616:	f7f8 fa07 	bl	8004a28 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c61a:	4b31      	ldr	r3, [pc, #196]	; (800c6e0 <HAL_HCD_MspInit+0x11c>)
 800c61c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c620:	4a2f      	ldr	r2, [pc, #188]	; (800c6e0 <HAL_HCD_MspInit+0x11c>)
 800c622:	f043 0301 	orr.w	r3, r3, #1
 800c626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c62a:	4b2d      	ldr	r3, [pc, #180]	; (800c6e0 <HAL_HCD_MspInit+0x11c>)
 800c62c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c630:	f003 0301 	and.w	r3, r3, #1
 800c634:	60fb      	str	r3, [r7, #12]
 800c636:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800c638:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800c63c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c640:	2302      	movs	r3, #2
 800c642:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c646:	2300      	movs	r3, #0
 800c648:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c64c:	2300      	movs	r3, #0
 800c64e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800c652:	230a      	movs	r3, #10
 800c654:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c658:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c65c:	4619      	mov	r1, r3
 800c65e:	4821      	ldr	r0, [pc, #132]	; (800c6e4 <HAL_HCD_MspInit+0x120>)
 800c660:	f7f6 fa46 	bl	8002af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c664:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c668:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c66c:	2300      	movs	r3, #0
 800c66e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c672:	2300      	movs	r3, #0
 800c674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c678:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c67c:	4619      	mov	r1, r3
 800c67e:	4819      	ldr	r0, [pc, #100]	; (800c6e4 <HAL_HCD_MspInit+0x120>)
 800c680:	f7f6 fa36 	bl	8002af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c684:	4b16      	ldr	r3, [pc, #88]	; (800c6e0 <HAL_HCD_MspInit+0x11c>)
 800c686:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c68a:	4a15      	ldr	r2, [pc, #84]	; (800c6e0 <HAL_HCD_MspInit+0x11c>)
 800c68c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c690:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c694:	4b12      	ldr	r3, [pc, #72]	; (800c6e0 <HAL_HCD_MspInit+0x11c>)
 800c696:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c69a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c69e:	60bb      	str	r3, [r7, #8]
 800c6a0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	2062      	movs	r0, #98	; 0x62
 800c6a8:	f7f5 f875 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 800c6ac:	2062      	movs	r0, #98	; 0x62
 800c6ae:	f7f5 f88c 	bl	80017ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	2063      	movs	r0, #99	; 0x63
 800c6b8:	f7f5 f86d 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 800c6bc:	2063      	movs	r0, #99	; 0x63
 800c6be:	f7f5 f884 	bl	80017ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	2065      	movs	r0, #101	; 0x65
 800c6c8:	f7f5 f865 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c6cc:	2065      	movs	r0, #101	; 0x65
 800c6ce:	f7f5 f87c 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c6d2:	bf00      	nop
 800c6d4:	37e0      	adds	r7, #224	; 0xe0
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	40080000 	.word	0x40080000
 800c6e0:	58024400 	.word	0x58024400
 800c6e4:	58020000 	.word	0x58020000

0800c6e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7ff f807 	bl	800b70a <USBH_LL_IncTimer>
}
 800c6fc:	bf00      	nop
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c712:	4618      	mov	r0, r3
 800c714:	f7ff f83f 	bl	800b796 <USBH_LL_Connect>
}
 800c718:	bf00      	nop
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c72e:	4618      	mov	r0, r3
 800c730:	f7ff f848 	bl	800b7c4 <USBH_LL_Disconnect>
}
 800c734:	bf00      	nop
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	460b      	mov	r3, r1
 800c746:	70fb      	strb	r3, [r7, #3]
 800c748:	4613      	mov	r3, r2
 800c74a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c74c:	bf00      	nop
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c766:	4618      	mov	r0, r3
 800c768:	f7fe fff9 	bl	800b75e <USBH_LL_PortEnabled>
}
 800c76c:	bf00      	nop
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c782:	4618      	mov	r0, r3
 800c784:	f7fe fff9 	bl	800b77a <USBH_LL_PortDisabled>
}
 800c788:	bf00      	nop
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d129      	bne.n	800c7f6 <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c7a2:	4a17      	ldr	r2, [pc, #92]	; (800c800 <USBH_LL_Init+0x70>)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4a14      	ldr	r2, [pc, #80]	; (800c800 <USBH_LL_Init+0x70>)
 800c7ae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c7b2:	4b13      	ldr	r3, [pc, #76]	; (800c800 <USBH_LL_Init+0x70>)
 800c7b4:	4a13      	ldr	r2, [pc, #76]	; (800c804 <USBH_LL_Init+0x74>)
 800c7b6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 800c7b8:	4b11      	ldr	r3, [pc, #68]	; (800c800 <USBH_LL_Init+0x70>)
 800c7ba:	2210      	movs	r2, #16
 800c7bc:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c7be:	4b10      	ldr	r3, [pc, #64]	; (800c800 <USBH_LL_Init+0x70>)
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c7c4:	4b0e      	ldr	r3, [pc, #56]	; (800c800 <USBH_LL_Init+0x70>)
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c7ca:	4b0d      	ldr	r3, [pc, #52]	; (800c800 <USBH_LL_Init+0x70>)
 800c7cc:	2202      	movs	r2, #2
 800c7ce:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c7d0:	4b0b      	ldr	r3, [pc, #44]	; (800c800 <USBH_LL_Init+0x70>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c7d6:	480a      	ldr	r0, [pc, #40]	; (800c800 <USBH_LL_Init+0x70>)
 800c7d8:	f7f6 fb87 	bl	8002eea <HAL_HCD_Init>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d001      	beq.n	800c7e6 <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 800c7e2:	f7f4 fb53 	bl	8000e8c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c7e6:	4806      	ldr	r0, [pc, #24]	; (800c800 <USBH_LL_Init+0x70>)
 800c7e8:	f7f6 ff64 	bl	80036b4 <HAL_HCD_GetCurrentFrame>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7fe ff7b 	bl	800b6ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	24000d14 	.word	0x24000d14
 800c804:	40080000 	.word	0x40080000

0800c808 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c810:	2300      	movs	r3, #0
 800c812:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c814:	2300      	movs	r3, #0
 800c816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c81e:	4618      	mov	r0, r3
 800c820:	f7f6 fed2 	bl	80035c8 <HAL_HCD_Start>
 800c824:	4603      	mov	r3, r0
 800c826:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c828:	7bfb      	ldrb	r3, [r7, #15]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f000 f95c 	bl	800cae8 <USBH_Get_USB_Status>
 800c830:	4603      	mov	r3, r0
 800c832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c834:	7bbb      	ldrb	r3, [r7, #14]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c83e:	b580      	push	{r7, lr}
 800c840:	b084      	sub	sp, #16
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c846:	2300      	movs	r3, #0
 800c848:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c84a:	2300      	movs	r3, #0
 800c84c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c854:	4618      	mov	r0, r3
 800c856:	f7f6 feda 	bl	800360e <HAL_HCD_Stop>
 800c85a:	4603      	mov	r3, r0
 800c85c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c85e:	7bfb      	ldrb	r3, [r7, #15]
 800c860:	4618      	mov	r0, r3
 800c862:	f000 f941 	bl	800cae8 <USBH_Get_USB_Status>
 800c866:	4603      	mov	r3, r0
 800c868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c86a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3710      	adds	r7, #16
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c87c:	2301      	movs	r3, #1
 800c87e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c886:	4618      	mov	r0, r3
 800c888:	f7f6 ff22 	bl	80036d0 <HAL_HCD_GetCurrentSpeed>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b02      	cmp	r3, #2
 800c890:	d00c      	beq.n	800c8ac <USBH_LL_GetSpeed+0x38>
 800c892:	2b02      	cmp	r3, #2
 800c894:	d80d      	bhi.n	800c8b2 <USBH_LL_GetSpeed+0x3e>
 800c896:	2b00      	cmp	r3, #0
 800c898:	d002      	beq.n	800c8a0 <USBH_LL_GetSpeed+0x2c>
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d003      	beq.n	800c8a6 <USBH_LL_GetSpeed+0x32>
 800c89e:	e008      	b.n	800c8b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c8a4:	e008      	b.n	800c8b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c8aa:	e005      	b.n	800c8b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c8b0:	e002      	b.n	800c8b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	73fb      	strb	r3, [r7, #15]
    break;
 800c8b6:	bf00      	nop
  }
  return  speed;
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}

0800c8c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b084      	sub	sp, #16
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7f6 feb5 	bl	8003648 <HAL_HCD_ResetPort>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c8e2:	7bfb      	ldrb	r3, [r7, #15]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 f8ff 	bl	800cae8 <USBH_Get_USB_Status>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c90a:	78fa      	ldrb	r2, [r7, #3]
 800c90c:	4611      	mov	r1, r2
 800c90e:	4618      	mov	r0, r3
 800c910:	f7f6 febc 	bl	800368c <HAL_HCD_HC_GetXferCount>
 800c914:	4603      	mov	r3, r0
}
 800c916:	4618      	mov	r0, r3
 800c918:	3708      	adds	r7, #8
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c91e:	b590      	push	{r4, r7, lr}
 800c920:	b089      	sub	sp, #36	; 0x24
 800c922:	af04      	add	r7, sp, #16
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	4608      	mov	r0, r1
 800c928:	4611      	mov	r1, r2
 800c92a:	461a      	mov	r2, r3
 800c92c:	4603      	mov	r3, r0
 800c92e:	70fb      	strb	r3, [r7, #3]
 800c930:	460b      	mov	r3, r1
 800c932:	70bb      	strb	r3, [r7, #2]
 800c934:	4613      	mov	r3, r2
 800c936:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c938:	2300      	movs	r3, #0
 800c93a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c93c:	2300      	movs	r3, #0
 800c93e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c946:	787c      	ldrb	r4, [r7, #1]
 800c948:	78ba      	ldrb	r2, [r7, #2]
 800c94a:	78f9      	ldrb	r1, [r7, #3]
 800c94c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c94e:	9302      	str	r3, [sp, #8]
 800c950:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	4623      	mov	r3, r4
 800c95e:	f7f6 fb26 	bl	8002fae <HAL_HCD_HC_Init>
 800c962:	4603      	mov	r3, r0
 800c964:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c966:	7bfb      	ldrb	r3, [r7, #15]
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 f8bd 	bl	800cae8 <USBH_Get_USB_Status>
 800c96e:	4603      	mov	r3, r0
 800c970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c972:	7bbb      	ldrb	r3, [r7, #14]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3714      	adds	r7, #20
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd90      	pop	{r4, r7, pc}

0800c97c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	460b      	mov	r3, r1
 800c986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c988:	2300      	movs	r3, #0
 800c98a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c996:	78fa      	ldrb	r2, [r7, #3]
 800c998:	4611      	mov	r1, r2
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7f6 fb96 	bl	80030cc <HAL_HCD_HC_Halt>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9a4:	7bfb      	ldrb	r3, [r7, #15]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 f89e 	bl	800cae8 <USBH_Get_USB_Status>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c9ba:	b590      	push	{r4, r7, lr}
 800c9bc:	b089      	sub	sp, #36	; 0x24
 800c9be:	af04      	add	r7, sp, #16
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	4608      	mov	r0, r1
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	70fb      	strb	r3, [r7, #3]
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	70bb      	strb	r3, [r7, #2]
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c9e2:	787c      	ldrb	r4, [r7, #1]
 800c9e4:	78ba      	ldrb	r2, [r7, #2]
 800c9e6:	78f9      	ldrb	r1, [r7, #3]
 800c9e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c9ec:	9303      	str	r3, [sp, #12]
 800c9ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9f0:	9302      	str	r3, [sp, #8]
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f4:	9301      	str	r3, [sp, #4]
 800c9f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	4623      	mov	r3, r4
 800c9fe:	f7f6 fb89 	bl	8003114 <HAL_HCD_HC_SubmitRequest>
 800ca02:	4603      	mov	r3, r0
 800ca04:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ca06:	7bfb      	ldrb	r3, [r7, #15]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f000 f86d 	bl	800cae8 <USBH_Get_USB_Status>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3714      	adds	r7, #20
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd90      	pop	{r4, r7, pc}

0800ca1c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	460b      	mov	r3, r1
 800ca26:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca2e:	78fa      	ldrb	r2, [r7, #3]
 800ca30:	4611      	mov	r1, r2
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7f6 fe16 	bl	8003664 <HAL_HCD_HC_GetURBState>
 800ca38:	4603      	mov	r3, r0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3708      	adds	r7, #8
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b082      	sub	sp, #8
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d103      	bne.n	800ca60 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ca58:	78fb      	ldrb	r3, [r7, #3]
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f000 f870 	bl	800cb40 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ca60:	20c8      	movs	r0, #200	; 0xc8
 800ca62:	f7f4 fd79 	bl	8001558 <HAL_Delay>
  return USBH_OK;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	70fb      	strb	r3, [r7, #3]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca86:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ca88:	78fb      	ldrb	r3, [r7, #3]
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	212c      	movs	r1, #44	; 0x2c
 800ca8e:	fb01 f303 	mul.w	r3, r1, r3
 800ca92:	4413      	add	r3, r2
 800ca94:	333b      	adds	r3, #59	; 0x3b
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d009      	beq.n	800cab0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ca9c:	78fb      	ldrb	r3, [r7, #3]
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	212c      	movs	r1, #44	; 0x2c
 800caa2:	fb01 f303 	mul.w	r3, r1, r3
 800caa6:	4413      	add	r3, r2
 800caa8:	3354      	adds	r3, #84	; 0x54
 800caaa:	78ba      	ldrb	r2, [r7, #2]
 800caac:	701a      	strb	r2, [r3, #0]
 800caae:	e008      	b.n	800cac2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cab0:	78fb      	ldrb	r3, [r7, #3]
 800cab2:	68fa      	ldr	r2, [r7, #12]
 800cab4:	212c      	movs	r1, #44	; 0x2c
 800cab6:	fb01 f303 	mul.w	r3, r1, r3
 800caba:	4413      	add	r3, r2
 800cabc:	3355      	adds	r3, #85	; 0x55
 800cabe:	78ba      	ldrb	r2, [r7, #2]
 800cac0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cac2:	2300      	movs	r3, #0
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3714      	adds	r7, #20
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f7f4 fd3d 	bl	8001558 <HAL_Delay>
}
 800cade:	bf00      	nop
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
	...

0800cae8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	4603      	mov	r3, r0
 800caf0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800caf2:	2300      	movs	r3, #0
 800caf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800caf6:	79fb      	ldrb	r3, [r7, #7]
 800caf8:	2b03      	cmp	r3, #3
 800cafa:	d817      	bhi.n	800cb2c <USBH_Get_USB_Status+0x44>
 800cafc:	a201      	add	r2, pc, #4	; (adr r2, 800cb04 <USBH_Get_USB_Status+0x1c>)
 800cafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb02:	bf00      	nop
 800cb04:	0800cb15 	.word	0x0800cb15
 800cb08:	0800cb1b 	.word	0x0800cb1b
 800cb0c:	0800cb21 	.word	0x0800cb21
 800cb10:	0800cb27 	.word	0x0800cb27
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	73fb      	strb	r3, [r7, #15]
    break;
 800cb18:	e00b      	b.n	800cb32 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cb1a:	2302      	movs	r3, #2
 800cb1c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb1e:	e008      	b.n	800cb32 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cb20:	2301      	movs	r3, #1
 800cb22:	73fb      	strb	r3, [r7, #15]
    break;
 800cb24:	e005      	b.n	800cb32 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cb26:	2302      	movs	r3, #2
 800cb28:	73fb      	strb	r3, [r7, #15]
    break;
 800cb2a:	e002      	b.n	800cb32 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cb2c:	2302      	movs	r3, #2
 800cb2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb30:	bf00      	nop
  }
  return usb_status;
 800cb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3714      	adds	r7, #20
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	4603      	mov	r3, r0
 800cb48:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cb4a:	79fb      	ldrb	r3, [r7, #7]
 800cb4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cb4e:	79fb      	ldrb	r3, [r7, #7]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d102      	bne.n	800cb5a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800cb54:	2301      	movs	r3, #1
 800cb56:	73fb      	strb	r3, [r7, #15]
 800cb58:	e001      	b.n	800cb5e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,(GPIO_PinState)data);
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
 800cb60:	461a      	mov	r2, r3
 800cb62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cb66:	4803      	ldr	r0, [pc, #12]	; (800cb74 <MX_DriverVbusFS+0x34>)
 800cb68:	f7f6 f972 	bl	8002e50 <HAL_GPIO_WritePin>
}
 800cb6c:	bf00      	nop
 800cb6e:	3710      	adds	r7, #16
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	58020c00 	.word	0x58020c00

0800cb78 <__errno>:
 800cb78:	4b01      	ldr	r3, [pc, #4]	; (800cb80 <__errno+0x8>)
 800cb7a:	6818      	ldr	r0, [r3, #0]
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	24000030 	.word	0x24000030

0800cb84 <__libc_init_array>:
 800cb84:	b570      	push	{r4, r5, r6, lr}
 800cb86:	4d0d      	ldr	r5, [pc, #52]	; (800cbbc <__libc_init_array+0x38>)
 800cb88:	4c0d      	ldr	r4, [pc, #52]	; (800cbc0 <__libc_init_array+0x3c>)
 800cb8a:	1b64      	subs	r4, r4, r5
 800cb8c:	10a4      	asrs	r4, r4, #2
 800cb8e:	2600      	movs	r6, #0
 800cb90:	42a6      	cmp	r6, r4
 800cb92:	d109      	bne.n	800cba8 <__libc_init_array+0x24>
 800cb94:	4d0b      	ldr	r5, [pc, #44]	; (800cbc4 <__libc_init_array+0x40>)
 800cb96:	4c0c      	ldr	r4, [pc, #48]	; (800cbc8 <__libc_init_array+0x44>)
 800cb98:	f000 fc66 	bl	800d468 <_init>
 800cb9c:	1b64      	subs	r4, r4, r5
 800cb9e:	10a4      	asrs	r4, r4, #2
 800cba0:	2600      	movs	r6, #0
 800cba2:	42a6      	cmp	r6, r4
 800cba4:	d105      	bne.n	800cbb2 <__libc_init_array+0x2e>
 800cba6:	bd70      	pop	{r4, r5, r6, pc}
 800cba8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbac:	4798      	blx	r3
 800cbae:	3601      	adds	r6, #1
 800cbb0:	e7ee      	b.n	800cb90 <__libc_init_array+0xc>
 800cbb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbb6:	4798      	blx	r3
 800cbb8:	3601      	adds	r6, #1
 800cbba:	e7f2      	b.n	800cba2 <__libc_init_array+0x1e>
 800cbbc:	0800d6a8 	.word	0x0800d6a8
 800cbc0:	0800d6a8 	.word	0x0800d6a8
 800cbc4:	0800d6a8 	.word	0x0800d6a8
 800cbc8:	0800d6ac 	.word	0x0800d6ac

0800cbcc <malloc>:
 800cbcc:	4b02      	ldr	r3, [pc, #8]	; (800cbd8 <malloc+0xc>)
 800cbce:	4601      	mov	r1, r0
 800cbd0:	6818      	ldr	r0, [r3, #0]
 800cbd2:	f000 b863 	b.w	800cc9c <_malloc_r>
 800cbd6:	bf00      	nop
 800cbd8:	24000030 	.word	0x24000030

0800cbdc <free>:
 800cbdc:	4b02      	ldr	r3, [pc, #8]	; (800cbe8 <free+0xc>)
 800cbde:	4601      	mov	r1, r0
 800cbe0:	6818      	ldr	r0, [r3, #0]
 800cbe2:	f000 b80b 	b.w	800cbfc <_free_r>
 800cbe6:	bf00      	nop
 800cbe8:	24000030 	.word	0x24000030

0800cbec <memset>:
 800cbec:	4402      	add	r2, r0
 800cbee:	4603      	mov	r3, r0
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d100      	bne.n	800cbf6 <memset+0xa>
 800cbf4:	4770      	bx	lr
 800cbf6:	f803 1b01 	strb.w	r1, [r3], #1
 800cbfa:	e7f9      	b.n	800cbf0 <memset+0x4>

0800cbfc <_free_r>:
 800cbfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbfe:	2900      	cmp	r1, #0
 800cc00:	d048      	beq.n	800cc94 <_free_r+0x98>
 800cc02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc06:	9001      	str	r0, [sp, #4]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f1a1 0404 	sub.w	r4, r1, #4
 800cc0e:	bfb8      	it	lt
 800cc10:	18e4      	addlt	r4, r4, r3
 800cc12:	f000 f8d5 	bl	800cdc0 <__malloc_lock>
 800cc16:	4a20      	ldr	r2, [pc, #128]	; (800cc98 <_free_r+0x9c>)
 800cc18:	9801      	ldr	r0, [sp, #4]
 800cc1a:	6813      	ldr	r3, [r2, #0]
 800cc1c:	4615      	mov	r5, r2
 800cc1e:	b933      	cbnz	r3, 800cc2e <_free_r+0x32>
 800cc20:	6063      	str	r3, [r4, #4]
 800cc22:	6014      	str	r4, [r2, #0]
 800cc24:	b003      	add	sp, #12
 800cc26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc2a:	f000 b8cf 	b.w	800cdcc <__malloc_unlock>
 800cc2e:	42a3      	cmp	r3, r4
 800cc30:	d90b      	bls.n	800cc4a <_free_r+0x4e>
 800cc32:	6821      	ldr	r1, [r4, #0]
 800cc34:	1862      	adds	r2, r4, r1
 800cc36:	4293      	cmp	r3, r2
 800cc38:	bf04      	itt	eq
 800cc3a:	681a      	ldreq	r2, [r3, #0]
 800cc3c:	685b      	ldreq	r3, [r3, #4]
 800cc3e:	6063      	str	r3, [r4, #4]
 800cc40:	bf04      	itt	eq
 800cc42:	1852      	addeq	r2, r2, r1
 800cc44:	6022      	streq	r2, [r4, #0]
 800cc46:	602c      	str	r4, [r5, #0]
 800cc48:	e7ec      	b.n	800cc24 <_free_r+0x28>
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	b10b      	cbz	r3, 800cc54 <_free_r+0x58>
 800cc50:	42a3      	cmp	r3, r4
 800cc52:	d9fa      	bls.n	800cc4a <_free_r+0x4e>
 800cc54:	6811      	ldr	r1, [r2, #0]
 800cc56:	1855      	adds	r5, r2, r1
 800cc58:	42a5      	cmp	r5, r4
 800cc5a:	d10b      	bne.n	800cc74 <_free_r+0x78>
 800cc5c:	6824      	ldr	r4, [r4, #0]
 800cc5e:	4421      	add	r1, r4
 800cc60:	1854      	adds	r4, r2, r1
 800cc62:	42a3      	cmp	r3, r4
 800cc64:	6011      	str	r1, [r2, #0]
 800cc66:	d1dd      	bne.n	800cc24 <_free_r+0x28>
 800cc68:	681c      	ldr	r4, [r3, #0]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	6053      	str	r3, [r2, #4]
 800cc6e:	4421      	add	r1, r4
 800cc70:	6011      	str	r1, [r2, #0]
 800cc72:	e7d7      	b.n	800cc24 <_free_r+0x28>
 800cc74:	d902      	bls.n	800cc7c <_free_r+0x80>
 800cc76:	230c      	movs	r3, #12
 800cc78:	6003      	str	r3, [r0, #0]
 800cc7a:	e7d3      	b.n	800cc24 <_free_r+0x28>
 800cc7c:	6825      	ldr	r5, [r4, #0]
 800cc7e:	1961      	adds	r1, r4, r5
 800cc80:	428b      	cmp	r3, r1
 800cc82:	bf04      	itt	eq
 800cc84:	6819      	ldreq	r1, [r3, #0]
 800cc86:	685b      	ldreq	r3, [r3, #4]
 800cc88:	6063      	str	r3, [r4, #4]
 800cc8a:	bf04      	itt	eq
 800cc8c:	1949      	addeq	r1, r1, r5
 800cc8e:	6021      	streq	r1, [r4, #0]
 800cc90:	6054      	str	r4, [r2, #4]
 800cc92:	e7c7      	b.n	800cc24 <_free_r+0x28>
 800cc94:	b003      	add	sp, #12
 800cc96:	bd30      	pop	{r4, r5, pc}
 800cc98:	24000288 	.word	0x24000288

0800cc9c <_malloc_r>:
 800cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9e:	1ccd      	adds	r5, r1, #3
 800cca0:	f025 0503 	bic.w	r5, r5, #3
 800cca4:	3508      	adds	r5, #8
 800cca6:	2d0c      	cmp	r5, #12
 800cca8:	bf38      	it	cc
 800ccaa:	250c      	movcc	r5, #12
 800ccac:	2d00      	cmp	r5, #0
 800ccae:	4606      	mov	r6, r0
 800ccb0:	db01      	blt.n	800ccb6 <_malloc_r+0x1a>
 800ccb2:	42a9      	cmp	r1, r5
 800ccb4:	d903      	bls.n	800ccbe <_malloc_r+0x22>
 800ccb6:	230c      	movs	r3, #12
 800ccb8:	6033      	str	r3, [r6, #0]
 800ccba:	2000      	movs	r0, #0
 800ccbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccbe:	f000 f87f 	bl	800cdc0 <__malloc_lock>
 800ccc2:	4921      	ldr	r1, [pc, #132]	; (800cd48 <_malloc_r+0xac>)
 800ccc4:	680a      	ldr	r2, [r1, #0]
 800ccc6:	4614      	mov	r4, r2
 800ccc8:	b99c      	cbnz	r4, 800ccf2 <_malloc_r+0x56>
 800ccca:	4f20      	ldr	r7, [pc, #128]	; (800cd4c <_malloc_r+0xb0>)
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	b923      	cbnz	r3, 800ccda <_malloc_r+0x3e>
 800ccd0:	4621      	mov	r1, r4
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	f000 f83c 	bl	800cd50 <_sbrk_r>
 800ccd8:	6038      	str	r0, [r7, #0]
 800ccda:	4629      	mov	r1, r5
 800ccdc:	4630      	mov	r0, r6
 800ccde:	f000 f837 	bl	800cd50 <_sbrk_r>
 800cce2:	1c43      	adds	r3, r0, #1
 800cce4:	d123      	bne.n	800cd2e <_malloc_r+0x92>
 800cce6:	230c      	movs	r3, #12
 800cce8:	6033      	str	r3, [r6, #0]
 800ccea:	4630      	mov	r0, r6
 800ccec:	f000 f86e 	bl	800cdcc <__malloc_unlock>
 800ccf0:	e7e3      	b.n	800ccba <_malloc_r+0x1e>
 800ccf2:	6823      	ldr	r3, [r4, #0]
 800ccf4:	1b5b      	subs	r3, r3, r5
 800ccf6:	d417      	bmi.n	800cd28 <_malloc_r+0x8c>
 800ccf8:	2b0b      	cmp	r3, #11
 800ccfa:	d903      	bls.n	800cd04 <_malloc_r+0x68>
 800ccfc:	6023      	str	r3, [r4, #0]
 800ccfe:	441c      	add	r4, r3
 800cd00:	6025      	str	r5, [r4, #0]
 800cd02:	e004      	b.n	800cd0e <_malloc_r+0x72>
 800cd04:	6863      	ldr	r3, [r4, #4]
 800cd06:	42a2      	cmp	r2, r4
 800cd08:	bf0c      	ite	eq
 800cd0a:	600b      	streq	r3, [r1, #0]
 800cd0c:	6053      	strne	r3, [r2, #4]
 800cd0e:	4630      	mov	r0, r6
 800cd10:	f000 f85c 	bl	800cdcc <__malloc_unlock>
 800cd14:	f104 000b 	add.w	r0, r4, #11
 800cd18:	1d23      	adds	r3, r4, #4
 800cd1a:	f020 0007 	bic.w	r0, r0, #7
 800cd1e:	1ac2      	subs	r2, r0, r3
 800cd20:	d0cc      	beq.n	800ccbc <_malloc_r+0x20>
 800cd22:	1a1b      	subs	r3, r3, r0
 800cd24:	50a3      	str	r3, [r4, r2]
 800cd26:	e7c9      	b.n	800ccbc <_malloc_r+0x20>
 800cd28:	4622      	mov	r2, r4
 800cd2a:	6864      	ldr	r4, [r4, #4]
 800cd2c:	e7cc      	b.n	800ccc8 <_malloc_r+0x2c>
 800cd2e:	1cc4      	adds	r4, r0, #3
 800cd30:	f024 0403 	bic.w	r4, r4, #3
 800cd34:	42a0      	cmp	r0, r4
 800cd36:	d0e3      	beq.n	800cd00 <_malloc_r+0x64>
 800cd38:	1a21      	subs	r1, r4, r0
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	f000 f808 	bl	800cd50 <_sbrk_r>
 800cd40:	3001      	adds	r0, #1
 800cd42:	d1dd      	bne.n	800cd00 <_malloc_r+0x64>
 800cd44:	e7cf      	b.n	800cce6 <_malloc_r+0x4a>
 800cd46:	bf00      	nop
 800cd48:	24000288 	.word	0x24000288
 800cd4c:	2400028c 	.word	0x2400028c

0800cd50 <_sbrk_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4d06      	ldr	r5, [pc, #24]	; (800cd6c <_sbrk_r+0x1c>)
 800cd54:	2300      	movs	r3, #0
 800cd56:	4604      	mov	r4, r0
 800cd58:	4608      	mov	r0, r1
 800cd5a:	602b      	str	r3, [r5, #0]
 800cd5c:	f7f4 fa7e 	bl	800125c <_sbrk>
 800cd60:	1c43      	adds	r3, r0, #1
 800cd62:	d102      	bne.n	800cd6a <_sbrk_r+0x1a>
 800cd64:	682b      	ldr	r3, [r5, #0]
 800cd66:	b103      	cbz	r3, 800cd6a <_sbrk_r+0x1a>
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	bd38      	pop	{r3, r4, r5, pc}
 800cd6c:	24001018 	.word	0x24001018

0800cd70 <siprintf>:
 800cd70:	b40e      	push	{r1, r2, r3}
 800cd72:	b500      	push	{lr}
 800cd74:	b09c      	sub	sp, #112	; 0x70
 800cd76:	ab1d      	add	r3, sp, #116	; 0x74
 800cd78:	9002      	str	r0, [sp, #8]
 800cd7a:	9006      	str	r0, [sp, #24]
 800cd7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd80:	4809      	ldr	r0, [pc, #36]	; (800cda8 <siprintf+0x38>)
 800cd82:	9107      	str	r1, [sp, #28]
 800cd84:	9104      	str	r1, [sp, #16]
 800cd86:	4909      	ldr	r1, [pc, #36]	; (800cdac <siprintf+0x3c>)
 800cd88:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd8c:	9105      	str	r1, [sp, #20]
 800cd8e:	6800      	ldr	r0, [r0, #0]
 800cd90:	9301      	str	r3, [sp, #4]
 800cd92:	a902      	add	r1, sp, #8
 800cd94:	f000 f87c 	bl	800ce90 <_svfiprintf_r>
 800cd98:	9b02      	ldr	r3, [sp, #8]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	701a      	strb	r2, [r3, #0]
 800cd9e:	b01c      	add	sp, #112	; 0x70
 800cda0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cda4:	b003      	add	sp, #12
 800cda6:	4770      	bx	lr
 800cda8:	24000030 	.word	0x24000030
 800cdac:	ffff0208 	.word	0xffff0208

0800cdb0 <strcpy>:
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdb6:	f803 2b01 	strb.w	r2, [r3], #1
 800cdba:	2a00      	cmp	r2, #0
 800cdbc:	d1f9      	bne.n	800cdb2 <strcpy+0x2>
 800cdbe:	4770      	bx	lr

0800cdc0 <__malloc_lock>:
 800cdc0:	4801      	ldr	r0, [pc, #4]	; (800cdc8 <__malloc_lock+0x8>)
 800cdc2:	f000 baf9 	b.w	800d3b8 <__retarget_lock_acquire_recursive>
 800cdc6:	bf00      	nop
 800cdc8:	24001020 	.word	0x24001020

0800cdcc <__malloc_unlock>:
 800cdcc:	4801      	ldr	r0, [pc, #4]	; (800cdd4 <__malloc_unlock+0x8>)
 800cdce:	f000 baf4 	b.w	800d3ba <__retarget_lock_release_recursive>
 800cdd2:	bf00      	nop
 800cdd4:	24001020 	.word	0x24001020

0800cdd8 <__ssputs_r>:
 800cdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cddc:	688e      	ldr	r6, [r1, #8]
 800cdde:	429e      	cmp	r6, r3
 800cde0:	4682      	mov	sl, r0
 800cde2:	460c      	mov	r4, r1
 800cde4:	4690      	mov	r8, r2
 800cde6:	461f      	mov	r7, r3
 800cde8:	d838      	bhi.n	800ce5c <__ssputs_r+0x84>
 800cdea:	898a      	ldrh	r2, [r1, #12]
 800cdec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdf0:	d032      	beq.n	800ce58 <__ssputs_r+0x80>
 800cdf2:	6825      	ldr	r5, [r4, #0]
 800cdf4:	6909      	ldr	r1, [r1, #16]
 800cdf6:	eba5 0901 	sub.w	r9, r5, r1
 800cdfa:	6965      	ldr	r5, [r4, #20]
 800cdfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce04:	3301      	adds	r3, #1
 800ce06:	444b      	add	r3, r9
 800ce08:	106d      	asrs	r5, r5, #1
 800ce0a:	429d      	cmp	r5, r3
 800ce0c:	bf38      	it	cc
 800ce0e:	461d      	movcc	r5, r3
 800ce10:	0553      	lsls	r3, r2, #21
 800ce12:	d531      	bpl.n	800ce78 <__ssputs_r+0xa0>
 800ce14:	4629      	mov	r1, r5
 800ce16:	f7ff ff41 	bl	800cc9c <_malloc_r>
 800ce1a:	4606      	mov	r6, r0
 800ce1c:	b950      	cbnz	r0, 800ce34 <__ssputs_r+0x5c>
 800ce1e:	230c      	movs	r3, #12
 800ce20:	f8ca 3000 	str.w	r3, [sl]
 800ce24:	89a3      	ldrh	r3, [r4, #12]
 800ce26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce2a:	81a3      	strh	r3, [r4, #12]
 800ce2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce34:	6921      	ldr	r1, [r4, #16]
 800ce36:	464a      	mov	r2, r9
 800ce38:	f000 fac0 	bl	800d3bc <memcpy>
 800ce3c:	89a3      	ldrh	r3, [r4, #12]
 800ce3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce46:	81a3      	strh	r3, [r4, #12]
 800ce48:	6126      	str	r6, [r4, #16]
 800ce4a:	6165      	str	r5, [r4, #20]
 800ce4c:	444e      	add	r6, r9
 800ce4e:	eba5 0509 	sub.w	r5, r5, r9
 800ce52:	6026      	str	r6, [r4, #0]
 800ce54:	60a5      	str	r5, [r4, #8]
 800ce56:	463e      	mov	r6, r7
 800ce58:	42be      	cmp	r6, r7
 800ce5a:	d900      	bls.n	800ce5e <__ssputs_r+0x86>
 800ce5c:	463e      	mov	r6, r7
 800ce5e:	4632      	mov	r2, r6
 800ce60:	6820      	ldr	r0, [r4, #0]
 800ce62:	4641      	mov	r1, r8
 800ce64:	f000 fab8 	bl	800d3d8 <memmove>
 800ce68:	68a3      	ldr	r3, [r4, #8]
 800ce6a:	6822      	ldr	r2, [r4, #0]
 800ce6c:	1b9b      	subs	r3, r3, r6
 800ce6e:	4432      	add	r2, r6
 800ce70:	60a3      	str	r3, [r4, #8]
 800ce72:	6022      	str	r2, [r4, #0]
 800ce74:	2000      	movs	r0, #0
 800ce76:	e7db      	b.n	800ce30 <__ssputs_r+0x58>
 800ce78:	462a      	mov	r2, r5
 800ce7a:	f000 fac7 	bl	800d40c <_realloc_r>
 800ce7e:	4606      	mov	r6, r0
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d1e1      	bne.n	800ce48 <__ssputs_r+0x70>
 800ce84:	6921      	ldr	r1, [r4, #16]
 800ce86:	4650      	mov	r0, sl
 800ce88:	f7ff feb8 	bl	800cbfc <_free_r>
 800ce8c:	e7c7      	b.n	800ce1e <__ssputs_r+0x46>
	...

0800ce90 <_svfiprintf_r>:
 800ce90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce94:	4698      	mov	r8, r3
 800ce96:	898b      	ldrh	r3, [r1, #12]
 800ce98:	061b      	lsls	r3, r3, #24
 800ce9a:	b09d      	sub	sp, #116	; 0x74
 800ce9c:	4607      	mov	r7, r0
 800ce9e:	460d      	mov	r5, r1
 800cea0:	4614      	mov	r4, r2
 800cea2:	d50e      	bpl.n	800cec2 <_svfiprintf_r+0x32>
 800cea4:	690b      	ldr	r3, [r1, #16]
 800cea6:	b963      	cbnz	r3, 800cec2 <_svfiprintf_r+0x32>
 800cea8:	2140      	movs	r1, #64	; 0x40
 800ceaa:	f7ff fef7 	bl	800cc9c <_malloc_r>
 800ceae:	6028      	str	r0, [r5, #0]
 800ceb0:	6128      	str	r0, [r5, #16]
 800ceb2:	b920      	cbnz	r0, 800cebe <_svfiprintf_r+0x2e>
 800ceb4:	230c      	movs	r3, #12
 800ceb6:	603b      	str	r3, [r7, #0]
 800ceb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cebc:	e0d1      	b.n	800d062 <_svfiprintf_r+0x1d2>
 800cebe:	2340      	movs	r3, #64	; 0x40
 800cec0:	616b      	str	r3, [r5, #20]
 800cec2:	2300      	movs	r3, #0
 800cec4:	9309      	str	r3, [sp, #36]	; 0x24
 800cec6:	2320      	movs	r3, #32
 800cec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cecc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ced0:	2330      	movs	r3, #48	; 0x30
 800ced2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d07c <_svfiprintf_r+0x1ec>
 800ced6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ceda:	f04f 0901 	mov.w	r9, #1
 800cede:	4623      	mov	r3, r4
 800cee0:	469a      	mov	sl, r3
 800cee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cee6:	b10a      	cbz	r2, 800ceec <_svfiprintf_r+0x5c>
 800cee8:	2a25      	cmp	r2, #37	; 0x25
 800ceea:	d1f9      	bne.n	800cee0 <_svfiprintf_r+0x50>
 800ceec:	ebba 0b04 	subs.w	fp, sl, r4
 800cef0:	d00b      	beq.n	800cf0a <_svfiprintf_r+0x7a>
 800cef2:	465b      	mov	r3, fp
 800cef4:	4622      	mov	r2, r4
 800cef6:	4629      	mov	r1, r5
 800cef8:	4638      	mov	r0, r7
 800cefa:	f7ff ff6d 	bl	800cdd8 <__ssputs_r>
 800cefe:	3001      	adds	r0, #1
 800cf00:	f000 80aa 	beq.w	800d058 <_svfiprintf_r+0x1c8>
 800cf04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf06:	445a      	add	r2, fp
 800cf08:	9209      	str	r2, [sp, #36]	; 0x24
 800cf0a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f000 80a2 	beq.w	800d058 <_svfiprintf_r+0x1c8>
 800cf14:	2300      	movs	r3, #0
 800cf16:	f04f 32ff 	mov.w	r2, #4294967295
 800cf1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf1e:	f10a 0a01 	add.w	sl, sl, #1
 800cf22:	9304      	str	r3, [sp, #16]
 800cf24:	9307      	str	r3, [sp, #28]
 800cf26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf2a:	931a      	str	r3, [sp, #104]	; 0x68
 800cf2c:	4654      	mov	r4, sl
 800cf2e:	2205      	movs	r2, #5
 800cf30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf34:	4851      	ldr	r0, [pc, #324]	; (800d07c <_svfiprintf_r+0x1ec>)
 800cf36:	f7f3 f9db 	bl	80002f0 <memchr>
 800cf3a:	9a04      	ldr	r2, [sp, #16]
 800cf3c:	b9d8      	cbnz	r0, 800cf76 <_svfiprintf_r+0xe6>
 800cf3e:	06d0      	lsls	r0, r2, #27
 800cf40:	bf44      	itt	mi
 800cf42:	2320      	movmi	r3, #32
 800cf44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf48:	0711      	lsls	r1, r2, #28
 800cf4a:	bf44      	itt	mi
 800cf4c:	232b      	movmi	r3, #43	; 0x2b
 800cf4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf52:	f89a 3000 	ldrb.w	r3, [sl]
 800cf56:	2b2a      	cmp	r3, #42	; 0x2a
 800cf58:	d015      	beq.n	800cf86 <_svfiprintf_r+0xf6>
 800cf5a:	9a07      	ldr	r2, [sp, #28]
 800cf5c:	4654      	mov	r4, sl
 800cf5e:	2000      	movs	r0, #0
 800cf60:	f04f 0c0a 	mov.w	ip, #10
 800cf64:	4621      	mov	r1, r4
 800cf66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf6a:	3b30      	subs	r3, #48	; 0x30
 800cf6c:	2b09      	cmp	r3, #9
 800cf6e:	d94e      	bls.n	800d00e <_svfiprintf_r+0x17e>
 800cf70:	b1b0      	cbz	r0, 800cfa0 <_svfiprintf_r+0x110>
 800cf72:	9207      	str	r2, [sp, #28]
 800cf74:	e014      	b.n	800cfa0 <_svfiprintf_r+0x110>
 800cf76:	eba0 0308 	sub.w	r3, r0, r8
 800cf7a:	fa09 f303 	lsl.w	r3, r9, r3
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	9304      	str	r3, [sp, #16]
 800cf82:	46a2      	mov	sl, r4
 800cf84:	e7d2      	b.n	800cf2c <_svfiprintf_r+0x9c>
 800cf86:	9b03      	ldr	r3, [sp, #12]
 800cf88:	1d19      	adds	r1, r3, #4
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	9103      	str	r1, [sp, #12]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	bfbb      	ittet	lt
 800cf92:	425b      	neglt	r3, r3
 800cf94:	f042 0202 	orrlt.w	r2, r2, #2
 800cf98:	9307      	strge	r3, [sp, #28]
 800cf9a:	9307      	strlt	r3, [sp, #28]
 800cf9c:	bfb8      	it	lt
 800cf9e:	9204      	strlt	r2, [sp, #16]
 800cfa0:	7823      	ldrb	r3, [r4, #0]
 800cfa2:	2b2e      	cmp	r3, #46	; 0x2e
 800cfa4:	d10c      	bne.n	800cfc0 <_svfiprintf_r+0x130>
 800cfa6:	7863      	ldrb	r3, [r4, #1]
 800cfa8:	2b2a      	cmp	r3, #42	; 0x2a
 800cfaa:	d135      	bne.n	800d018 <_svfiprintf_r+0x188>
 800cfac:	9b03      	ldr	r3, [sp, #12]
 800cfae:	1d1a      	adds	r2, r3, #4
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	9203      	str	r2, [sp, #12]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	bfb8      	it	lt
 800cfb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfbc:	3402      	adds	r4, #2
 800cfbe:	9305      	str	r3, [sp, #20]
 800cfc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d08c <_svfiprintf_r+0x1fc>
 800cfc4:	7821      	ldrb	r1, [r4, #0]
 800cfc6:	2203      	movs	r2, #3
 800cfc8:	4650      	mov	r0, sl
 800cfca:	f7f3 f991 	bl	80002f0 <memchr>
 800cfce:	b140      	cbz	r0, 800cfe2 <_svfiprintf_r+0x152>
 800cfd0:	2340      	movs	r3, #64	; 0x40
 800cfd2:	eba0 000a 	sub.w	r0, r0, sl
 800cfd6:	fa03 f000 	lsl.w	r0, r3, r0
 800cfda:	9b04      	ldr	r3, [sp, #16]
 800cfdc:	4303      	orrs	r3, r0
 800cfde:	3401      	adds	r4, #1
 800cfe0:	9304      	str	r3, [sp, #16]
 800cfe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfe6:	4826      	ldr	r0, [pc, #152]	; (800d080 <_svfiprintf_r+0x1f0>)
 800cfe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfec:	2206      	movs	r2, #6
 800cfee:	f7f3 f97f 	bl	80002f0 <memchr>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	d038      	beq.n	800d068 <_svfiprintf_r+0x1d8>
 800cff6:	4b23      	ldr	r3, [pc, #140]	; (800d084 <_svfiprintf_r+0x1f4>)
 800cff8:	bb1b      	cbnz	r3, 800d042 <_svfiprintf_r+0x1b2>
 800cffa:	9b03      	ldr	r3, [sp, #12]
 800cffc:	3307      	adds	r3, #7
 800cffe:	f023 0307 	bic.w	r3, r3, #7
 800d002:	3308      	adds	r3, #8
 800d004:	9303      	str	r3, [sp, #12]
 800d006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d008:	4433      	add	r3, r6
 800d00a:	9309      	str	r3, [sp, #36]	; 0x24
 800d00c:	e767      	b.n	800cede <_svfiprintf_r+0x4e>
 800d00e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d012:	460c      	mov	r4, r1
 800d014:	2001      	movs	r0, #1
 800d016:	e7a5      	b.n	800cf64 <_svfiprintf_r+0xd4>
 800d018:	2300      	movs	r3, #0
 800d01a:	3401      	adds	r4, #1
 800d01c:	9305      	str	r3, [sp, #20]
 800d01e:	4619      	mov	r1, r3
 800d020:	f04f 0c0a 	mov.w	ip, #10
 800d024:	4620      	mov	r0, r4
 800d026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d02a:	3a30      	subs	r2, #48	; 0x30
 800d02c:	2a09      	cmp	r2, #9
 800d02e:	d903      	bls.n	800d038 <_svfiprintf_r+0x1a8>
 800d030:	2b00      	cmp	r3, #0
 800d032:	d0c5      	beq.n	800cfc0 <_svfiprintf_r+0x130>
 800d034:	9105      	str	r1, [sp, #20]
 800d036:	e7c3      	b.n	800cfc0 <_svfiprintf_r+0x130>
 800d038:	fb0c 2101 	mla	r1, ip, r1, r2
 800d03c:	4604      	mov	r4, r0
 800d03e:	2301      	movs	r3, #1
 800d040:	e7f0      	b.n	800d024 <_svfiprintf_r+0x194>
 800d042:	ab03      	add	r3, sp, #12
 800d044:	9300      	str	r3, [sp, #0]
 800d046:	462a      	mov	r2, r5
 800d048:	4b0f      	ldr	r3, [pc, #60]	; (800d088 <_svfiprintf_r+0x1f8>)
 800d04a:	a904      	add	r1, sp, #16
 800d04c:	4638      	mov	r0, r7
 800d04e:	f3af 8000 	nop.w
 800d052:	1c42      	adds	r2, r0, #1
 800d054:	4606      	mov	r6, r0
 800d056:	d1d6      	bne.n	800d006 <_svfiprintf_r+0x176>
 800d058:	89ab      	ldrh	r3, [r5, #12]
 800d05a:	065b      	lsls	r3, r3, #25
 800d05c:	f53f af2c 	bmi.w	800ceb8 <_svfiprintf_r+0x28>
 800d060:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d062:	b01d      	add	sp, #116	; 0x74
 800d064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d068:	ab03      	add	r3, sp, #12
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	462a      	mov	r2, r5
 800d06e:	4b06      	ldr	r3, [pc, #24]	; (800d088 <_svfiprintf_r+0x1f8>)
 800d070:	a904      	add	r1, sp, #16
 800d072:	4638      	mov	r0, r7
 800d074:	f000 f87a 	bl	800d16c <_printf_i>
 800d078:	e7eb      	b.n	800d052 <_svfiprintf_r+0x1c2>
 800d07a:	bf00      	nop
 800d07c:	0800d66c 	.word	0x0800d66c
 800d080:	0800d676 	.word	0x0800d676
 800d084:	00000000 	.word	0x00000000
 800d088:	0800cdd9 	.word	0x0800cdd9
 800d08c:	0800d672 	.word	0x0800d672

0800d090 <_printf_common>:
 800d090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d094:	4616      	mov	r6, r2
 800d096:	4699      	mov	r9, r3
 800d098:	688a      	ldr	r2, [r1, #8]
 800d09a:	690b      	ldr	r3, [r1, #16]
 800d09c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	bfb8      	it	lt
 800d0a4:	4613      	movlt	r3, r2
 800d0a6:	6033      	str	r3, [r6, #0]
 800d0a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0ac:	4607      	mov	r7, r0
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	b10a      	cbz	r2, 800d0b6 <_printf_common+0x26>
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	6033      	str	r3, [r6, #0]
 800d0b6:	6823      	ldr	r3, [r4, #0]
 800d0b8:	0699      	lsls	r1, r3, #26
 800d0ba:	bf42      	ittt	mi
 800d0bc:	6833      	ldrmi	r3, [r6, #0]
 800d0be:	3302      	addmi	r3, #2
 800d0c0:	6033      	strmi	r3, [r6, #0]
 800d0c2:	6825      	ldr	r5, [r4, #0]
 800d0c4:	f015 0506 	ands.w	r5, r5, #6
 800d0c8:	d106      	bne.n	800d0d8 <_printf_common+0x48>
 800d0ca:	f104 0a19 	add.w	sl, r4, #25
 800d0ce:	68e3      	ldr	r3, [r4, #12]
 800d0d0:	6832      	ldr	r2, [r6, #0]
 800d0d2:	1a9b      	subs	r3, r3, r2
 800d0d4:	42ab      	cmp	r3, r5
 800d0d6:	dc26      	bgt.n	800d126 <_printf_common+0x96>
 800d0d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0dc:	1e13      	subs	r3, r2, #0
 800d0de:	6822      	ldr	r2, [r4, #0]
 800d0e0:	bf18      	it	ne
 800d0e2:	2301      	movne	r3, #1
 800d0e4:	0692      	lsls	r2, r2, #26
 800d0e6:	d42b      	bmi.n	800d140 <_printf_common+0xb0>
 800d0e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0ec:	4649      	mov	r1, r9
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	47c0      	blx	r8
 800d0f2:	3001      	adds	r0, #1
 800d0f4:	d01e      	beq.n	800d134 <_printf_common+0xa4>
 800d0f6:	6823      	ldr	r3, [r4, #0]
 800d0f8:	68e5      	ldr	r5, [r4, #12]
 800d0fa:	6832      	ldr	r2, [r6, #0]
 800d0fc:	f003 0306 	and.w	r3, r3, #6
 800d100:	2b04      	cmp	r3, #4
 800d102:	bf08      	it	eq
 800d104:	1aad      	subeq	r5, r5, r2
 800d106:	68a3      	ldr	r3, [r4, #8]
 800d108:	6922      	ldr	r2, [r4, #16]
 800d10a:	bf0c      	ite	eq
 800d10c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d110:	2500      	movne	r5, #0
 800d112:	4293      	cmp	r3, r2
 800d114:	bfc4      	itt	gt
 800d116:	1a9b      	subgt	r3, r3, r2
 800d118:	18ed      	addgt	r5, r5, r3
 800d11a:	2600      	movs	r6, #0
 800d11c:	341a      	adds	r4, #26
 800d11e:	42b5      	cmp	r5, r6
 800d120:	d11a      	bne.n	800d158 <_printf_common+0xc8>
 800d122:	2000      	movs	r0, #0
 800d124:	e008      	b.n	800d138 <_printf_common+0xa8>
 800d126:	2301      	movs	r3, #1
 800d128:	4652      	mov	r2, sl
 800d12a:	4649      	mov	r1, r9
 800d12c:	4638      	mov	r0, r7
 800d12e:	47c0      	blx	r8
 800d130:	3001      	adds	r0, #1
 800d132:	d103      	bne.n	800d13c <_printf_common+0xac>
 800d134:	f04f 30ff 	mov.w	r0, #4294967295
 800d138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13c:	3501      	adds	r5, #1
 800d13e:	e7c6      	b.n	800d0ce <_printf_common+0x3e>
 800d140:	18e1      	adds	r1, r4, r3
 800d142:	1c5a      	adds	r2, r3, #1
 800d144:	2030      	movs	r0, #48	; 0x30
 800d146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d14a:	4422      	add	r2, r4
 800d14c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d154:	3302      	adds	r3, #2
 800d156:	e7c7      	b.n	800d0e8 <_printf_common+0x58>
 800d158:	2301      	movs	r3, #1
 800d15a:	4622      	mov	r2, r4
 800d15c:	4649      	mov	r1, r9
 800d15e:	4638      	mov	r0, r7
 800d160:	47c0      	blx	r8
 800d162:	3001      	adds	r0, #1
 800d164:	d0e6      	beq.n	800d134 <_printf_common+0xa4>
 800d166:	3601      	adds	r6, #1
 800d168:	e7d9      	b.n	800d11e <_printf_common+0x8e>
	...

0800d16c <_printf_i>:
 800d16c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d170:	460c      	mov	r4, r1
 800d172:	4691      	mov	r9, r2
 800d174:	7e27      	ldrb	r7, [r4, #24]
 800d176:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d178:	2f78      	cmp	r7, #120	; 0x78
 800d17a:	4680      	mov	r8, r0
 800d17c:	469a      	mov	sl, r3
 800d17e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d182:	d807      	bhi.n	800d194 <_printf_i+0x28>
 800d184:	2f62      	cmp	r7, #98	; 0x62
 800d186:	d80a      	bhi.n	800d19e <_printf_i+0x32>
 800d188:	2f00      	cmp	r7, #0
 800d18a:	f000 80d8 	beq.w	800d33e <_printf_i+0x1d2>
 800d18e:	2f58      	cmp	r7, #88	; 0x58
 800d190:	f000 80a3 	beq.w	800d2da <_printf_i+0x16e>
 800d194:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d19c:	e03a      	b.n	800d214 <_printf_i+0xa8>
 800d19e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1a2:	2b15      	cmp	r3, #21
 800d1a4:	d8f6      	bhi.n	800d194 <_printf_i+0x28>
 800d1a6:	a001      	add	r0, pc, #4	; (adr r0, 800d1ac <_printf_i+0x40>)
 800d1a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d1ac:	0800d205 	.word	0x0800d205
 800d1b0:	0800d219 	.word	0x0800d219
 800d1b4:	0800d195 	.word	0x0800d195
 800d1b8:	0800d195 	.word	0x0800d195
 800d1bc:	0800d195 	.word	0x0800d195
 800d1c0:	0800d195 	.word	0x0800d195
 800d1c4:	0800d219 	.word	0x0800d219
 800d1c8:	0800d195 	.word	0x0800d195
 800d1cc:	0800d195 	.word	0x0800d195
 800d1d0:	0800d195 	.word	0x0800d195
 800d1d4:	0800d195 	.word	0x0800d195
 800d1d8:	0800d325 	.word	0x0800d325
 800d1dc:	0800d249 	.word	0x0800d249
 800d1e0:	0800d307 	.word	0x0800d307
 800d1e4:	0800d195 	.word	0x0800d195
 800d1e8:	0800d195 	.word	0x0800d195
 800d1ec:	0800d347 	.word	0x0800d347
 800d1f0:	0800d195 	.word	0x0800d195
 800d1f4:	0800d249 	.word	0x0800d249
 800d1f8:	0800d195 	.word	0x0800d195
 800d1fc:	0800d195 	.word	0x0800d195
 800d200:	0800d30f 	.word	0x0800d30f
 800d204:	680b      	ldr	r3, [r1, #0]
 800d206:	1d1a      	adds	r2, r3, #4
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	600a      	str	r2, [r1, #0]
 800d20c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d214:	2301      	movs	r3, #1
 800d216:	e0a3      	b.n	800d360 <_printf_i+0x1f4>
 800d218:	6825      	ldr	r5, [r4, #0]
 800d21a:	6808      	ldr	r0, [r1, #0]
 800d21c:	062e      	lsls	r6, r5, #24
 800d21e:	f100 0304 	add.w	r3, r0, #4
 800d222:	d50a      	bpl.n	800d23a <_printf_i+0xce>
 800d224:	6805      	ldr	r5, [r0, #0]
 800d226:	600b      	str	r3, [r1, #0]
 800d228:	2d00      	cmp	r5, #0
 800d22a:	da03      	bge.n	800d234 <_printf_i+0xc8>
 800d22c:	232d      	movs	r3, #45	; 0x2d
 800d22e:	426d      	negs	r5, r5
 800d230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d234:	485e      	ldr	r0, [pc, #376]	; (800d3b0 <_printf_i+0x244>)
 800d236:	230a      	movs	r3, #10
 800d238:	e019      	b.n	800d26e <_printf_i+0x102>
 800d23a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d23e:	6805      	ldr	r5, [r0, #0]
 800d240:	600b      	str	r3, [r1, #0]
 800d242:	bf18      	it	ne
 800d244:	b22d      	sxthne	r5, r5
 800d246:	e7ef      	b.n	800d228 <_printf_i+0xbc>
 800d248:	680b      	ldr	r3, [r1, #0]
 800d24a:	6825      	ldr	r5, [r4, #0]
 800d24c:	1d18      	adds	r0, r3, #4
 800d24e:	6008      	str	r0, [r1, #0]
 800d250:	0628      	lsls	r0, r5, #24
 800d252:	d501      	bpl.n	800d258 <_printf_i+0xec>
 800d254:	681d      	ldr	r5, [r3, #0]
 800d256:	e002      	b.n	800d25e <_printf_i+0xf2>
 800d258:	0669      	lsls	r1, r5, #25
 800d25a:	d5fb      	bpl.n	800d254 <_printf_i+0xe8>
 800d25c:	881d      	ldrh	r5, [r3, #0]
 800d25e:	4854      	ldr	r0, [pc, #336]	; (800d3b0 <_printf_i+0x244>)
 800d260:	2f6f      	cmp	r7, #111	; 0x6f
 800d262:	bf0c      	ite	eq
 800d264:	2308      	moveq	r3, #8
 800d266:	230a      	movne	r3, #10
 800d268:	2100      	movs	r1, #0
 800d26a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d26e:	6866      	ldr	r6, [r4, #4]
 800d270:	60a6      	str	r6, [r4, #8]
 800d272:	2e00      	cmp	r6, #0
 800d274:	bfa2      	ittt	ge
 800d276:	6821      	ldrge	r1, [r4, #0]
 800d278:	f021 0104 	bicge.w	r1, r1, #4
 800d27c:	6021      	strge	r1, [r4, #0]
 800d27e:	b90d      	cbnz	r5, 800d284 <_printf_i+0x118>
 800d280:	2e00      	cmp	r6, #0
 800d282:	d04d      	beq.n	800d320 <_printf_i+0x1b4>
 800d284:	4616      	mov	r6, r2
 800d286:	fbb5 f1f3 	udiv	r1, r5, r3
 800d28a:	fb03 5711 	mls	r7, r3, r1, r5
 800d28e:	5dc7      	ldrb	r7, [r0, r7]
 800d290:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d294:	462f      	mov	r7, r5
 800d296:	42bb      	cmp	r3, r7
 800d298:	460d      	mov	r5, r1
 800d29a:	d9f4      	bls.n	800d286 <_printf_i+0x11a>
 800d29c:	2b08      	cmp	r3, #8
 800d29e:	d10b      	bne.n	800d2b8 <_printf_i+0x14c>
 800d2a0:	6823      	ldr	r3, [r4, #0]
 800d2a2:	07df      	lsls	r7, r3, #31
 800d2a4:	d508      	bpl.n	800d2b8 <_printf_i+0x14c>
 800d2a6:	6923      	ldr	r3, [r4, #16]
 800d2a8:	6861      	ldr	r1, [r4, #4]
 800d2aa:	4299      	cmp	r1, r3
 800d2ac:	bfde      	ittt	le
 800d2ae:	2330      	movle	r3, #48	; 0x30
 800d2b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2b8:	1b92      	subs	r2, r2, r6
 800d2ba:	6122      	str	r2, [r4, #16]
 800d2bc:	f8cd a000 	str.w	sl, [sp]
 800d2c0:	464b      	mov	r3, r9
 800d2c2:	aa03      	add	r2, sp, #12
 800d2c4:	4621      	mov	r1, r4
 800d2c6:	4640      	mov	r0, r8
 800d2c8:	f7ff fee2 	bl	800d090 <_printf_common>
 800d2cc:	3001      	adds	r0, #1
 800d2ce:	d14c      	bne.n	800d36a <_printf_i+0x1fe>
 800d2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d4:	b004      	add	sp, #16
 800d2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2da:	4835      	ldr	r0, [pc, #212]	; (800d3b0 <_printf_i+0x244>)
 800d2dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2e0:	6823      	ldr	r3, [r4, #0]
 800d2e2:	680e      	ldr	r6, [r1, #0]
 800d2e4:	061f      	lsls	r7, r3, #24
 800d2e6:	f856 5b04 	ldr.w	r5, [r6], #4
 800d2ea:	600e      	str	r6, [r1, #0]
 800d2ec:	d514      	bpl.n	800d318 <_printf_i+0x1ac>
 800d2ee:	07d9      	lsls	r1, r3, #31
 800d2f0:	bf44      	itt	mi
 800d2f2:	f043 0320 	orrmi.w	r3, r3, #32
 800d2f6:	6023      	strmi	r3, [r4, #0]
 800d2f8:	b91d      	cbnz	r5, 800d302 <_printf_i+0x196>
 800d2fa:	6823      	ldr	r3, [r4, #0]
 800d2fc:	f023 0320 	bic.w	r3, r3, #32
 800d300:	6023      	str	r3, [r4, #0]
 800d302:	2310      	movs	r3, #16
 800d304:	e7b0      	b.n	800d268 <_printf_i+0xfc>
 800d306:	6823      	ldr	r3, [r4, #0]
 800d308:	f043 0320 	orr.w	r3, r3, #32
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	2378      	movs	r3, #120	; 0x78
 800d310:	4828      	ldr	r0, [pc, #160]	; (800d3b4 <_printf_i+0x248>)
 800d312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d316:	e7e3      	b.n	800d2e0 <_printf_i+0x174>
 800d318:	065e      	lsls	r6, r3, #25
 800d31a:	bf48      	it	mi
 800d31c:	b2ad      	uxthmi	r5, r5
 800d31e:	e7e6      	b.n	800d2ee <_printf_i+0x182>
 800d320:	4616      	mov	r6, r2
 800d322:	e7bb      	b.n	800d29c <_printf_i+0x130>
 800d324:	680b      	ldr	r3, [r1, #0]
 800d326:	6826      	ldr	r6, [r4, #0]
 800d328:	6960      	ldr	r0, [r4, #20]
 800d32a:	1d1d      	adds	r5, r3, #4
 800d32c:	600d      	str	r5, [r1, #0]
 800d32e:	0635      	lsls	r5, r6, #24
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	d501      	bpl.n	800d338 <_printf_i+0x1cc>
 800d334:	6018      	str	r0, [r3, #0]
 800d336:	e002      	b.n	800d33e <_printf_i+0x1d2>
 800d338:	0671      	lsls	r1, r6, #25
 800d33a:	d5fb      	bpl.n	800d334 <_printf_i+0x1c8>
 800d33c:	8018      	strh	r0, [r3, #0]
 800d33e:	2300      	movs	r3, #0
 800d340:	6123      	str	r3, [r4, #16]
 800d342:	4616      	mov	r6, r2
 800d344:	e7ba      	b.n	800d2bc <_printf_i+0x150>
 800d346:	680b      	ldr	r3, [r1, #0]
 800d348:	1d1a      	adds	r2, r3, #4
 800d34a:	600a      	str	r2, [r1, #0]
 800d34c:	681e      	ldr	r6, [r3, #0]
 800d34e:	6862      	ldr	r2, [r4, #4]
 800d350:	2100      	movs	r1, #0
 800d352:	4630      	mov	r0, r6
 800d354:	f7f2 ffcc 	bl	80002f0 <memchr>
 800d358:	b108      	cbz	r0, 800d35e <_printf_i+0x1f2>
 800d35a:	1b80      	subs	r0, r0, r6
 800d35c:	6060      	str	r0, [r4, #4]
 800d35e:	6863      	ldr	r3, [r4, #4]
 800d360:	6123      	str	r3, [r4, #16]
 800d362:	2300      	movs	r3, #0
 800d364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d368:	e7a8      	b.n	800d2bc <_printf_i+0x150>
 800d36a:	6923      	ldr	r3, [r4, #16]
 800d36c:	4632      	mov	r2, r6
 800d36e:	4649      	mov	r1, r9
 800d370:	4640      	mov	r0, r8
 800d372:	47d0      	blx	sl
 800d374:	3001      	adds	r0, #1
 800d376:	d0ab      	beq.n	800d2d0 <_printf_i+0x164>
 800d378:	6823      	ldr	r3, [r4, #0]
 800d37a:	079b      	lsls	r3, r3, #30
 800d37c:	d413      	bmi.n	800d3a6 <_printf_i+0x23a>
 800d37e:	68e0      	ldr	r0, [r4, #12]
 800d380:	9b03      	ldr	r3, [sp, #12]
 800d382:	4298      	cmp	r0, r3
 800d384:	bfb8      	it	lt
 800d386:	4618      	movlt	r0, r3
 800d388:	e7a4      	b.n	800d2d4 <_printf_i+0x168>
 800d38a:	2301      	movs	r3, #1
 800d38c:	4632      	mov	r2, r6
 800d38e:	4649      	mov	r1, r9
 800d390:	4640      	mov	r0, r8
 800d392:	47d0      	blx	sl
 800d394:	3001      	adds	r0, #1
 800d396:	d09b      	beq.n	800d2d0 <_printf_i+0x164>
 800d398:	3501      	adds	r5, #1
 800d39a:	68e3      	ldr	r3, [r4, #12]
 800d39c:	9903      	ldr	r1, [sp, #12]
 800d39e:	1a5b      	subs	r3, r3, r1
 800d3a0:	42ab      	cmp	r3, r5
 800d3a2:	dcf2      	bgt.n	800d38a <_printf_i+0x21e>
 800d3a4:	e7eb      	b.n	800d37e <_printf_i+0x212>
 800d3a6:	2500      	movs	r5, #0
 800d3a8:	f104 0619 	add.w	r6, r4, #25
 800d3ac:	e7f5      	b.n	800d39a <_printf_i+0x22e>
 800d3ae:	bf00      	nop
 800d3b0:	0800d67d 	.word	0x0800d67d
 800d3b4:	0800d68e 	.word	0x0800d68e

0800d3b8 <__retarget_lock_acquire_recursive>:
 800d3b8:	4770      	bx	lr

0800d3ba <__retarget_lock_release_recursive>:
 800d3ba:	4770      	bx	lr

0800d3bc <memcpy>:
 800d3bc:	440a      	add	r2, r1
 800d3be:	4291      	cmp	r1, r2
 800d3c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3c4:	d100      	bne.n	800d3c8 <memcpy+0xc>
 800d3c6:	4770      	bx	lr
 800d3c8:	b510      	push	{r4, lr}
 800d3ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3d2:	4291      	cmp	r1, r2
 800d3d4:	d1f9      	bne.n	800d3ca <memcpy+0xe>
 800d3d6:	bd10      	pop	{r4, pc}

0800d3d8 <memmove>:
 800d3d8:	4288      	cmp	r0, r1
 800d3da:	b510      	push	{r4, lr}
 800d3dc:	eb01 0402 	add.w	r4, r1, r2
 800d3e0:	d902      	bls.n	800d3e8 <memmove+0x10>
 800d3e2:	4284      	cmp	r4, r0
 800d3e4:	4623      	mov	r3, r4
 800d3e6:	d807      	bhi.n	800d3f8 <memmove+0x20>
 800d3e8:	1e43      	subs	r3, r0, #1
 800d3ea:	42a1      	cmp	r1, r4
 800d3ec:	d008      	beq.n	800d400 <memmove+0x28>
 800d3ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3f6:	e7f8      	b.n	800d3ea <memmove+0x12>
 800d3f8:	4402      	add	r2, r0
 800d3fa:	4601      	mov	r1, r0
 800d3fc:	428a      	cmp	r2, r1
 800d3fe:	d100      	bne.n	800d402 <memmove+0x2a>
 800d400:	bd10      	pop	{r4, pc}
 800d402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d40a:	e7f7      	b.n	800d3fc <memmove+0x24>

0800d40c <_realloc_r>:
 800d40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40e:	4607      	mov	r7, r0
 800d410:	4614      	mov	r4, r2
 800d412:	460e      	mov	r6, r1
 800d414:	b921      	cbnz	r1, 800d420 <_realloc_r+0x14>
 800d416:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d41a:	4611      	mov	r1, r2
 800d41c:	f7ff bc3e 	b.w	800cc9c <_malloc_r>
 800d420:	b922      	cbnz	r2, 800d42c <_realloc_r+0x20>
 800d422:	f7ff fbeb 	bl	800cbfc <_free_r>
 800d426:	4625      	mov	r5, r4
 800d428:	4628      	mov	r0, r5
 800d42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d42c:	f000 f814 	bl	800d458 <_malloc_usable_size_r>
 800d430:	42a0      	cmp	r0, r4
 800d432:	d20f      	bcs.n	800d454 <_realloc_r+0x48>
 800d434:	4621      	mov	r1, r4
 800d436:	4638      	mov	r0, r7
 800d438:	f7ff fc30 	bl	800cc9c <_malloc_r>
 800d43c:	4605      	mov	r5, r0
 800d43e:	2800      	cmp	r0, #0
 800d440:	d0f2      	beq.n	800d428 <_realloc_r+0x1c>
 800d442:	4631      	mov	r1, r6
 800d444:	4622      	mov	r2, r4
 800d446:	f7ff ffb9 	bl	800d3bc <memcpy>
 800d44a:	4631      	mov	r1, r6
 800d44c:	4638      	mov	r0, r7
 800d44e:	f7ff fbd5 	bl	800cbfc <_free_r>
 800d452:	e7e9      	b.n	800d428 <_realloc_r+0x1c>
 800d454:	4635      	mov	r5, r6
 800d456:	e7e7      	b.n	800d428 <_realloc_r+0x1c>

0800d458 <_malloc_usable_size_r>:
 800d458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d45c:	1f18      	subs	r0, r3, #4
 800d45e:	2b00      	cmp	r3, #0
 800d460:	bfbc      	itt	lt
 800d462:	580b      	ldrlt	r3, [r1, r0]
 800d464:	18c0      	addlt	r0, r0, r3
 800d466:	4770      	bx	lr

0800d468 <_init>:
 800d468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46a:	bf00      	nop
 800d46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d46e:	bc08      	pop	{r3}
 800d470:	469e      	mov	lr, r3
 800d472:	4770      	bx	lr

0800d474 <_fini>:
 800d474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d476:	bf00      	nop
 800d478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d47a:	bc08      	pop	{r3}
 800d47c:	469e      	mov	lr, r3
 800d47e:	4770      	bx	lr
